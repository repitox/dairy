/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ WebApp
 */

class WebAppDateTimeUtils {
    constructor(userId) {
        this.userId = userId;
        this.userTimezone = null;
        this.loadUserTimezone();
    }

    async loadUserTimezone() {
        try {
            if (this.userId) {
                const response = await fetch(`/api/user/timezone?user_id=${this.userId}`);
                if (response.ok) {
                    const data = await response.json();
                    this.userTimezone = parseInt(data.timezone) || 0;
                    console.log('üåç –ó–∞–≥—Ä—É–∂–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.userTimezone);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
            this.userTimezone = this.detectUserTimezone(); // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        }
    }

    async setUserTimezone(timezoneOffset) {
        try {
            if (!this.userId) return false;

            const response = await fetch('/api/user/timezone', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    user_id: this.userId,
                    timezone: timezoneOffset
                })
            });

            if (response.ok) {
                this.userTimezone = timezoneOffset;
                console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', timezoneOffset);
                return true;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
        }
        return false;
    }

    getUserTimezone() {
        return this.userTimezone !== null ? this.userTimezone : 0;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    detectUserTimezone() {
        const offset = -new Date().getTimezoneOffset() / 60;
        const detectedOffset = Math.round(offset);
        console.log('üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', detectedOffset);
        return detectedOffset;
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–∞–º —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
     */
    groupTasksByDate(tasks) {
        const now = new Date();
        const userOffset = this.getUserTimezone();
        
        // –°–æ–∑–¥–∞–µ–º "—Å–µ–π—á–∞—Å" –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const nowUser = new Date(now.getTime() + (userOffset * 60 * 60 * 1000));
        
        const grouped = {
            "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏": [],
            "–°–µ–≥–æ–¥–Ω—è": [],
            "–ó–∞–≤—Ç—Ä–∞": [],
            "–ù–∞ –Ω–µ–¥–µ–ª–µ": [],
            "–ü–æ–∑–∂–µ": [],
            "–ë–µ–∑ —Å—Ä–æ–∫–∞": []
        };

        tasks.forEach(task => {
            if (task.completed) return;

            if (!task.due_date) {
                grouped["–ë–µ–∑ —Å—Ä–æ–∫–∞"].push(task);
                return;
            }

            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∑–∞–¥–∞—á–∏
            const taskDate = this.parseTaskDate(task.due_date);
            if (!taskDate) {
                grouped["–ë–µ–∑ —Å—Ä–æ–∫–∞"].push(task);
                return;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const taskDateUser = new Date(taskDate.getTime() + (userOffset * 60 * 60 * 1000));
            
            console.log(`üìÖ –ó–∞–¥–∞—á–∞ "${task.title}":`, {
                due_date: task.due_date,
                taskDate: taskDate.toISOString(),
                taskDateUser: taskDateUser.toISOString(),
                nowUser: nowUser.toISOString(),
                isToday: this.isSameDay(taskDateUser, nowUser),
                isTomorrow: this.isSameDay(taskDateUser, new Date(nowUser.getTime() + 24*60*60*1000)),
                isPast: taskDateUser < nowUser
            });

            if (taskDateUser < nowUser) {
                grouped["–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"].push(task);
            } else if (this.isSameDay(taskDateUser, nowUser)) {
                grouped["–°–µ–≥–æ–¥–Ω—è"].push(task);
            } else if (this.isSameDay(taskDateUser, new Date(nowUser.getTime() + 24*60*60*1000))) {
                grouped["–ó–∞–≤—Ç—Ä–∞"].push(task);
            } else if (this.isSameWeek(taskDateUser, nowUser)) {
                grouped["–ù–∞ –Ω–µ–¥–µ–ª–µ"].push(task);
            } else {
                grouped["–ü–æ–∑–∂–µ"].push(task);
            }
        });

        return grouped;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∑–∞–¥–∞—á–∏
     */
    parseTaskDate(dateString) {
        if (!dateString) return null;

        try {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            const formats = [
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/, // 2025-07-02T19:00:00
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}/,       // 2025-07-02T19:00
                /^\d{4}-\d{2}-\d{2}$/                    // 2025-07-02
            ];

            let parsedDate;
            
            if (formats[0].test(dateString) || formats[1].test(dateString)) {
                // –î–∞—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º - —Å—á–∏—Ç–∞–µ–º UTC
                parsedDate = new Date(dateString + (dateString.includes('Z') ? '' : 'Z'));
            } else if (formats[2].test(dateString)) {
                // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è 00:00 –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userOffset = this.getUserTimezone();
                parsedDate = new Date(dateString + 'T00:00:00Z');
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                parsedDate = new Date(parsedDate.getTime() - (userOffset * 60 * 60 * 1000));
            } else {
                parsedDate = new Date(dateString);
            }

            return isNaN(parsedDate.getTime()) ? null : parsedDate;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', dateString, error);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–≤–µ –¥–∞—Ç—ã –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
     */
    isSameDay(date1, date2) {
        return date1.getFullYear() === date2.getFullYear() &&
               date1.getMonth() === date2.getMonth() &&
               date1.getDate() === date2.getDate();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–≤–µ –¥–∞—Ç—ã –≤ –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–µ
     */
    isSameWeek(date1, date2) {
        const startOfWeek1 = new Date(date1);
        startOfWeek1.setDate(date1.getDate() - date1.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        startOfWeek1.setHours(0, 0, 0, 0);

        const startOfWeek2 = new Date(date2);
        startOfWeek2.setDate(date2.getDate() - date2.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        startOfWeek2.setHours(0, 0, 0, 0);

        return startOfWeek1.getTime() === startOfWeek2.getTime();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    formatDate(dateString, format = 'relative') {
        if (!dateString) return '';
        
        const date = this.parseTaskDate(dateString);
        if (!date) return '';
        
        const userOffset = this.getUserTimezone();
        const userDate = new Date(date.getTime() + (userOffset * 60 * 60 * 1000));
        
        if (format === 'relative') {
            return this.getRelativeDateText(userDate);
        } else if (format === 'full') {
            return userDate.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } else if (format === 'date') {
            return userDate.toLocaleDateString('ru-RU');
        } else if (format === 'time') {
            return userDate.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        return userDate.toLocaleString('ru-RU');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã
     */
    getRelativeDateText(userDate) {
        const now = new Date();
        const userOffset = this.getUserTimezone();
        const nowUser = new Date(now.getTime() + (userOffset * 60 * 60 * 1000));
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
        const dateOnly = new Date(userDate.getFullYear(), userDate.getMonth(), userDate.getDate());
        const nowOnly = new Date(nowUser.getFullYear(), nowUser.getMonth(), nowUser.getDate());
        const diffTime = dateOnly - nowOnly;
        const diffDays = diffTime / (1000 * 60 * 60 * 24);

        if (diffDays < 0) {
            return `${Math.abs(diffDays)}–¥ –Ω–∞–∑–∞–¥`;
        } else if (diffDays === 0) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (diffDays === 1) {
            return '–ó–∞–≤—Ç—Ä–∞';
        } else if (diffDays <= 7) {
            return `${diffDays}–¥`;
        } else {
            return userDate.toLocaleDateString('ru-RU', { 
                day: 'numeric', 
                month: 'short' 
            });
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
     */
    async autoSetTimezoneIfNeeded() {
        if (this.userTimezone === null || this.userTimezone === 0) {
            const detectedTz = this.detectUserTimezone();
            if (detectedTz !== 0) {
                await this.setUserTimezone(detectedTz);
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.WebAppDateTimeUtils = WebAppDateTimeUtils;