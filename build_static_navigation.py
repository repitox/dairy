#!/usr/bin/env python3
"""
Build-time –∏–Ω–∂–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ HTML —Ñ–∞–π–ª—ã –±–µ–∑ JavaScript –∑–∞–≥—Ä—É–∑–∫–∏
"""

import os
import re
from pathlib import Path

def inject_static_navigation(html_file_path, navigation_html):
    """–ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ HTML —Ñ–∞–π–ª"""
    
    with open(html_file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if 'static-navbar' in content:
        print(f"‚úÖ {html_file_path.name} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é")
        return False
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    patterns_to_remove = [
        r'<script src="navigation-loader\.js"></script>',
        r'<script src="main-navigation\.js"></script>',
        r'<link rel="stylesheet" href="navigation-skeleton\.css">',
        r'<link rel="preload" href="navigation-component\.html"[^>]*>',
    ]
    
    for pattern in patterns_to_remove:
        content = re.sub(pattern, '', content, flags=re.IGNORECASE)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ navigation.css
    nav_css_pattern = r'(<link[^>]*href="navigation\.css"[^>]*>)'
    nav_css_match = re.search(nav_css_pattern, content, re.IGNORECASE)
    
    if nav_css_match:
        static_css = '\n    <link rel="stylesheet" href="navigation-static.css">'
        content = content.replace(nav_css_match.group(1), nav_css_match.group(1) + static_css)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è <body>
    body_pattern = r'(<body[^>]*>)'
    body_match = re.search(body_pattern, content, re.IGNORECASE | re.DOTALL)
    
    if body_match:
        content = content.replace(body_match.group(1), body_match.group(1) + '\n' + navigation_html + '\n')
    else:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ <body> –≤ {html_file_path.name}")
        return False
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ static-main-content
    # –ò—â–µ–º div —Å –∫–ª–∞—Å—Å–æ–º container –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    container_pattern = r'(<div class="container"[^>]*>)'
    if re.search(container_pattern, content, re.IGNORECASE):
        content = re.sub(
            container_pattern, 
            r'<div class="static-main-content">\1', 
            content, 
            flags=re.IGNORECASE
        )
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º static-main-content –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º body
        content = content.replace('</body>', '</div>\n</body>')
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(html_file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    dashboard_dir = Path('/Users/d.dubenetskiy/Documents/tg_project/dashboard')
    navigation_file = dashboard_dir / 'navigation-static.html'
    
    if not navigation_file.exists():
        print("‚ùå –§–∞–π–ª navigation-static.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    with open(navigation_file, 'r', encoding='utf-8') as f:
        navigation_html = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º HTML —Ñ–∞–π–ª—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ)
    html_files = []
    exclude_files = {
        'navigation-component.html', 
        'navigation-static.html',
        'navbar-component.html',
        'navbar-demo.html',
        'test-navigation.html'
    }
    
    for html_file in dashboard_dir.glob('*.html'):
        if html_file.name not in exclude_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–µ—Å—Ç—å container)
            try:
                with open(html_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'class="container"' in content:
                        html_files.append(html_file)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {html_file.name}: {e}")
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    for file in html_files:
        print(f"  - {file.name}")
    
    print("\nüîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∂–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    
    updated_count = 0
    for html_file in html_files:
        try:
            if inject_static_navigation(html_file, navigation_html):
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {html_file.name}")
                updated_count += 1
            else:
                print(f"‚ö™ –ü—Ä–æ–ø—É—â–µ–Ω {html_file.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {html_file.name}: {e}")
    
    print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∏–∑ {len(html_files)} —Ñ–∞–π–ª–æ–≤")
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã navigation-loader.js")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ <body>")
    print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω navigation-static.css")
    print("  ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–µ—Ä–Ω—É—Ç –≤ static-main-content")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ - –±–µ–∑ –ø—Ä—ã–∂–∫–æ–≤!")

if __name__ == "__main__":
    main()