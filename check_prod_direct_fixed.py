#!/usr/bin/env python3
"""
üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ë–î
"""

import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ë–î
DB_CONFIG = {
    'host': 'postgres.c107597.h2',
    'database': 'c107597_rptx_na4u_ru',
    'user': 'c107597_rptx_na4u_ru',
    'password': 'ZiKceXoydixol93',
    'port': 5432
}

def check_production_schema():
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ö–æ—Å—Ç–æ–≤
    hosts_to_try = [
        'postgres.c107597.h2',
        'h60.netangels.ru',
        'localhost',
        '127.0.0.1'
    ]
    
    conn = None
    cur = None
    
    for host in hosts_to_try:
        try:
            print(f"üîó –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {host}...")
            config = DB_CONFIG.copy()
            config['host'] = host
            conn = psycopg2.connect(**config, cursor_factory=RealDictCursor)
            cur = conn.cursor()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host} —É—Å–ø–µ—à–Ω–æ!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}: {e}")
            if host == hosts_to_try[-1]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ—Å—Ç
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ö–æ—Å—Ç—É!")
                return
            continue
    
    if not conn or not cur:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
        
    try:
        print('\nüîç –°–•–ï–ú–ê –ë–î –í –ü–†–û–î–ê–ö–®–ï–ù–ï:')
        print('=' * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """)
        tables = cur.fetchall()
        
        if not tables:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        schema_info = {}
        
        for table in tables:
            table_name = table['table_name']
            print(f'\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("""
                SELECT 
                    column_name, 
                    data_type, 
                    is_nullable,
                    column_default,
                    character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = %s 
                ORDER BY ordinal_position;
            """, (table_name,))
            
            columns = cur.fetchall()
            schema_info[table_name] = columns
            
            for col in columns:
                nullable = 'NULL' if col['is_nullable'] == 'YES' else 'NOT NULL'
                default = f' DEFAULT {col["column_default"]}' if col['column_default'] else ''
                length = f'({col["character_maximum_length"]})' if col['character_maximum_length'] else ''
                print(f'  - {col["column_name"]}: {col["data_type"]}{length} {nullable}{default}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        print('\nüîÑ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ú–ò–ì–†–ê–¶–ò–ò:')
        print('=' * 60)
        try:
            cur.execute('SELECT version, name, executed_at FROM schema_migrations ORDER BY version;')
            migrations = cur.fetchall()
            if migrations:
                for migration in migrations:
                    print(f'‚úÖ {migration["version"]} - {migration["name"]} ({migration["executed_at"]})')
            else:
                print('‚ùå –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
        except Exception as e:
            print(f'‚ùå –¢–∞–±–ª–∏—Ü–∞ schema_migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        print('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        print('=' * 60)
        
        main_tables = ['users', 'projects', 'tasks', 'events', 'shopping', 'purchases', 'notes', 'shopping_lists']
        for table_name in main_tables:
            if table_name in schema_info:
                try:
                    cur.execute(f'SELECT COUNT(*) as count FROM {table_name};')
                    count = cur.fetchone()['count']
                    print(f'{table_name}: {count} –∑–∞–ø–∏—Å–µ–π')
                except Exception as e:
                    print(f'{table_name}: –æ—à–∏–±–∫–∞ - {e}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        print('\nüìù –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò:')
        print('=' * 60)
        
        if 'tasks' in schema_info:
            try:
                cur.execute('SELECT id, title, user_id, completed FROM tasks ORDER BY id DESC LIMIT 3;')
                tasks = cur.fetchall()
                print('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
                for task in tasks:
                    status = '‚úÖ' if task['completed'] else '‚è≥'
                    print(f'  {status} ID:{task["id"]} - {task["title"]} (user: {task["user_id"]})')
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}')
        
        if 'users' in schema_info:
            try:
                cur.execute('SELECT user_id, first_name, username FROM users ORDER BY user_id DESC LIMIT 3;')
                users = cur.fetchall()
                print('\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
                for user in users:
                    print(f'  üë§ ID:{user["user_id"]} - {user["first_name"]} (@{user["username"]})')
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')
        
        print('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}')
        print(f'–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}')
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()

if __name__ == '__main__':
    check_production_schema()