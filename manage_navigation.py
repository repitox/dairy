#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø—É–Ω–∫—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db import get_conn
import json

def show_navigation():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        id, title, url, icon, description, 
                        sort_order, category, is_active, is_visible,
                        CASE 
                            WHEN url LIKE '/dashboard/%' THEN 'üñ•Ô∏è Dashboard'
                            ELSE 'üì± WebApp'
                        END as type
                    FROM navigation_items 
                    ORDER BY category, sort_order
                """)
                items = cur.fetchall()
                
                if not items:
                    print("‚ùå –ü—É–Ω–∫—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(items)} –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n")
                
                current_category = None
                for item in items:
                    if item['category'] != current_category:
                        current_category = item['category']
                        print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.upper()}")
                        print("-" * 50)
                    
                    status = "‚úÖ" if item['is_active'] and item['is_visible'] else "‚ùå"
                    print(f"{status} [{item['id']:2d}] {item['type']} {item['icon']} {item['title']}")
                    print(f"    URL: {item['url']}")
                    print(f"    –ü–æ—Ä—è–¥–æ–∫: {item['sort_order']}")
                    if item['description']:
                        print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}")
                    print()
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")

def add_navigation_item():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞: ").strip()
        if not title:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        url = input("URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: tasks.html –∏–ª–∏ /dashboard/reports.html): ").strip()
        if not url:
            print("‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        icon = input("–ò–∫–æ–Ω–∫–∞ (emoji, –Ω–∞–ø—Ä–∏–º–µ—Ä: üìã): ").strip() or "üìÑ"
        description = input("–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        print("1. main - –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("2. projects - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏") 
        print("3. create - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        print("4. settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("5. tools - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("6. admin - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        category_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-6) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é: ").strip()
        
        category_map = {
            '1': 'main',
            '2': 'projects', 
            '3': 'create',
            '4': 'settings',
            '5': 'tools',
            '6': 'admin'
        }
        
        category = category_map.get(category_choice, category_choice if category_choice else 'main')
        
        sort_order = input("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15): ").strip()
        try:
            sort_order = int(sort_order) if sort_order else 50
        except ValueError:
            sort_order = 50
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
        nav_type = "üñ•Ô∏è Dashboard" if url.startswith('/dashboard/') else "üì± WebApp"
        
        print(f"\nüìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
        print(f"–¢–∏–ø: {nav_type}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        print(f"URL: {url}")
        print(f"–ò–∫–æ–Ω–∫–∞: {icon}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"–ü–æ—Ä—è–¥–æ–∫: {sort_order}")
        
        confirm = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO navigation_items 
                    (title, url, icon, description, sort_order, category, is_active, is_visible)
                    VALUES (%s, %s, %s, %s, %s, %s, TRUE, TRUE)
                    RETURNING id
                """, (title, url, icon, description, sort_order, category))
                
                new_id = cur.fetchone()['id']
                conn.commit()
                
                print(f"‚úÖ –ü—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {new_id}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")

def toggle_navigation_item():
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    print("\nüîÑ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        item_id = input("ID –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ").strip()
        if not item_id.isdigit():
            print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        item_id = int(item_id)
        
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞
                cur.execute("SELECT title, is_active FROM navigation_items WHERE id = %s", (item_id,))
                item = cur.fetchone()
                
                if not item:
                    print(f"‚ùå –ü—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                new_status = not item['is_active']
                status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
                
                cur.execute("""
                    UPDATE navigation_items 
                    SET is_active = %s, updated_at = NOW()
                    WHERE id = %s
                """, (new_status, item_id))
                
                conn.commit()
                
                print(f"‚úÖ –ü—É–Ω–∫—Ç '{item['title']}' {status_text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")

def delete_navigation_item():
    """–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        item_id = input("ID –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
        if not item_id.isdigit():
            print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        item_id = int(item_id)
        
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞
                cur.execute("SELECT title FROM navigation_items WHERE id = %s", (item_id,))
                item = cur.fetchone()
                
                if not item:
                    print(f"‚ùå –ü—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                print(f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç: '{item['title']}'")
                confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (–≤–≤–µ–¥–∏—Ç–µ 'DELETE'): ").strip()
                
                if confirm != 'DELETE':
                    print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return
                
                cur.execute("DELETE FROM navigation_items WHERE id = %s", (item_id,))
                conn.commit()
                
                print(f"‚úÖ –ü—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ '{item['title']}' —É–¥–∞–ª–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")

def show_navigation_by_type():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º (WebApp/Dashboard)"""
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                print("\nüì± WebApp –Ω–∞–≤–∏–≥–∞—Ü–∏—è (Telegram):")
                print("-" * 40)
                
                cur.execute("""
                    SELECT title, url, icon, category, sort_order
                    FROM navigation_items 
                    WHERE url NOT LIKE '/dashboard/%' 
                    AND url NOT LIKE '%dashboard%'
                    AND is_active = TRUE
                    ORDER BY category, sort_order
                """)
                webapp_items = cur.fetchall()
                
                if webapp_items:
                    current_category = None
                    for item in webapp_items:
                        if item['category'] != current_category:
                            current_category = item['category']
                            print(f"\nüìÇ {current_category.upper()}:")
                        print(f"  {item['icon']} {item['title']} ‚Üí {item['url']}")
                else:
                    print("  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")
                
                print("\nüñ•Ô∏è Dashboard –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–ë—Ä–∞—É–∑–µ—Ä):")
                print("-" * 40)
                
                cur.execute("""
                    SELECT title, url, icon, category, sort_order
                    FROM navigation_items 
                    WHERE is_active = TRUE
                    ORDER BY category, sort_order
                """)
                dashboard_items = cur.fetchall()
                
                if dashboard_items:
                    current_category = None
                    for item in dashboard_items:
                        if item['category'] != current_category:
                            current_category = item['category']
                            print(f"\nüìÇ {current_category.upper()}:")
                        
                        nav_type = "üñ•Ô∏è" if item['url'].startswith('/dashboard/') else "üì±"
                        print(f"  {nav_type} {item['icon']} {item['title']} ‚Üí {item['url']}")
                else:
                    print("  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º: {e}")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\n" + "="*50)
        print("üß≠ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–ï–ô")
        print("="*50)
        print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        print("2. üì±üñ•Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ç–∏–ø–∞–º (WebApp/Dashboard)")
        print("3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç")
        print("4. üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—É–Ω–∫—Ç")
        print("5. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç")
        print("6. üö™ –í—ã—Ö–æ–¥")
        print("-" * 50)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()
        
        if choice == '1':
            show_navigation()
        elif choice == '2':
            show_navigation_by_type()
        elif choice == '3':
            add_navigation_item()
        elif choice == '4':
            toggle_navigation_item()
        elif choice == '5':
            delete_navigation_item()
        elif choice == '6':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    print("üß≠ –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT COUNT(*) FROM navigation_items")
                count = cur.fetchone()[0]
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {count} –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        
        main()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã: docker-compose up -d")
        sys.exit(1)