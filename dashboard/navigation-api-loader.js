// –£–º–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ API —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –ø—Ä—ã–∂–∫–æ–≤
(function() {
    'use strict';
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        API_URL: '/api/navigation',
        CACHE_KEY: 'navigation_cache',
        CACHE_DURATION: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
        FALLBACK_TIMEOUT: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É API
        SKELETON_DURATION: 150, // –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ skeleton –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    let isNavigationLoaded = false;
    let isLoading = false;
    let navigationCache = null;
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ skeleton –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä—ã–∂–∫–æ–≤
     */
    function createNavigationSkeleton() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ skeleton
        if (document.querySelector('.api-navigation-skeleton')) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º navbar skeleton
        const navbarSkeleton = document.createElement('nav');
        navbarSkeleton.className = 'api-navigation-skeleton api-navbar-skeleton';
        navbarSkeleton.innerHTML = `
            <div class="api-navbar-brand-skeleton"></div>
            <div class="api-navbar-actions-skeleton">
                <div class="api-navbar-user-skeleton"></div>
            </div>
        `;
        
        // –°–æ–∑–¥–∞–µ–º sidebar skeleton
        const sidebarSkeleton = document.createElement('div');
        sidebarSkeleton.className = 'api-navigation-skeleton api-sidebar-skeleton';
        
        // –î–æ–±–∞–≤–ª—è–µ–º skeleton —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        const menuSkeleton = document.createElement('div');
        menuSkeleton.className = 'api-menu-skeleton';
        
        for (let i = 0; i < 8; i++) {
            const itemSkeleton = document.createElement('div');
            itemSkeleton.className = 'api-menu-item-skeleton';
            itemSkeleton.style.animationDelay = `${i * 0.1}s`;
            menuSkeleton.appendChild(itemSkeleton);
        }
        
        sidebarSkeleton.appendChild(menuSkeleton);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º skeleton –≤ DOM
        document.body.insertAdjacentElement('afterbegin', navbarSkeleton);
        document.body.insertAdjacentElement('afterbegin', sidebarSkeleton);
        
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        document.body.classList.add('api-navigation-loading');
        
        console.log('üîÆ API Navigation skeleton —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ skeleton –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    function removeNavigationSkeleton() {
        const skeletons = document.querySelectorAll('.api-navigation-skeleton');
        
        skeletons.forEach(skeleton => {
            skeleton.style.opacity = '0';
            skeleton.style.transform = 'translateY(-10px)';
            
            setTimeout(() => {
                if (skeleton.parentNode) {
                    skeleton.parentNode.removeChild(skeleton);
                }
            }, 300);
        });
        
        document.body.classList.remove('api-navigation-loading');
        document.body.classList.add('api-navigation-loaded');
        
        console.log('‚úÖ API Navigation skeleton —É–¥–∞–ª–µ–Ω');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –∫–µ—à–∞
     */
    function getCachedNavigation() {
        try {
            const cached = localStorage.getItem(CONFIG.CACHE_KEY);
            if (!cached) return null;
            
            const data = JSON.parse(cached);
            const now = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
            if (now - data.timestamp > CONFIG.CACHE_DURATION) {
                localStorage.removeItem(CONFIG.CACHE_KEY);
                return null;
            }
            
            console.log('üì¶ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫–µ—à–∞');
            return data.navigation;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
            localStorage.removeItem(CONFIG.CACHE_KEY);
            return null;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–µ—à
     */
    function cacheNavigation(navigation) {
        try {
            const cacheData = {
                navigation: navigation,
                timestamp: Date.now(),
                version: '1.0'
            };
            
            localStorage.setItem(CONFIG.CACHE_KEY, JSON.stringify(cacheData));
            console.log('üíæ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–µ—à');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å API
     */
    async function fetchNavigationFromAPI() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ localStorage –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            const userData = JSON.parse(localStorage.getItem('telegram_user') || '{}');
            const userId = userData.id || null;
            
            const params = new URLSearchParams();
            if (userId) params.append('user_id', userId);
            params.append('category', 'main');
            
            const response = await fetch(`${CONFIG.API_URL}?${params}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (!data.navigation || !Array.isArray(data.navigation)) {
                throw new Error('Invalid navigation data format');
            }
            
            console.log('üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å API:', data.navigation.length, '–ø—É–Ω–∫—Ç–æ–≤');
            
            // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            cacheNavigation(data.navigation);
            
            return data.navigation;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å API:', error);
            throw error;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    function createNavigationHTML(navigationItems) {
        // Navbar HTML
        const userData = JSON.parse(localStorage.getItem('telegram_user') || '{}');
        const userName = userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userAvatar = userName.charAt(0).toUpperCase();
        
        const navbarHTML = `
            <nav class="api-navbar">
                <a href="/dashboard/main.html" class="api-navbar-brand">
                    <div class="api-navbar-brand-icon">üì±</div>
                    <span>Dialist</span>
                </a>
                
                <div class="api-navbar-user" onclick="toggleApiUserMenu()">
                    <div class="api-navbar-user-avatar">${userAvatar}</div>
                    <div class="api-navbar-user-info">
                        <div class="api-navbar-user-name">${userName}</div>
                        <div class="api-navbar-user-status">–û–Ω–ª–∞–π–Ω</div>
                    </div>
                </div>
                
                <div class="api-user-dropdown" id="api-user-dropdown">
                    <div class="api-dropdown-item" onclick="alert('–ü—Ä–æ—Ñ–∏–ª—å')">
                        <span>üë§</span> –ü—Ä–æ—Ñ–∏–ª—å
                    </div>
                    <div class="api-dropdown-item" onclick="alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')">
                        <span>‚öôÔ∏è</span> –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </div>
                    <div class="api-dropdown-divider"></div>
                    <div class="api-dropdown-item" onclick="confirmLogout()">
                        <span>üö™</span> –í—ã–π—Ç–∏
                    </div>
                </div>
            </nav>
        `;
        
        // Sidebar HTML
        let sidebarHTML = `
            <div class="api-sidebar">
                <div class="api-navigation">
        `;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
        navigationItems.forEach(item => {
            const isActive = window.location.pathname === item.url ? 'active' : '';
            const badge = item.badge_text ? `<span class="api-nav-badge">${item.badge_text}</span>` : '';
            
            sidebarHTML += `
                <a href="${item.url}" class="api-nav-item ${isActive}" data-page="${item.id}">
                    <span class="api-nav-icon">${item.icon}</span>
                    <span class="api-nav-title">${item.title}</span>
                    ${badge}
                </a>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if (item.children && item.children.length > 0) {
                item.children.forEach(child => {
                    const childActive = window.location.pathname === child.url ? 'active' : '';
                    const childBadge = child.badge_text ? `<span class="api-nav-badge">${child.badge_text}</span>` : '';
                    
                    sidebarHTML += `
                        <a href="${child.url}" class="api-nav-item api-nav-child ${childActive}" data-page="${child.id}">
                            <span class="api-nav-icon">${child.icon}</span>
                            <span class="api-nav-title">${child.title}</span>
                            ${childBadge}
                        </a>
                    `;
                });
            }
        });
        
        sidebarHTML += `
                </div>
            </div>
        `;
        
        // Main content wrapper
        const mainContentHTML = `
            <div class="api-main-content">
                <div class="api-content-body" id="api-page-content">
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω —Å—é–¥–∞ -->
                </div>
            </div>
        `;
        
        return {
            navbar: navbarHTML,
            sidebar: sidebarHTML,
            mainContent: mainContentHTML
        };
    }
    
    /**
     * –í—Å—Ç–∞–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ DOM
     */
    function insertNavigationIntoDOM(navigationHTML) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º navbar –≤ –Ω–∞—á–∞–ª–æ body
        document.body.insertAdjacentHTML('afterbegin', navigationHTML.navbar);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º sidebar –ø–æ—Å–ª–µ navbar
        document.body.insertAdjacentHTML('beforeend', navigationHTML.sidebar);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º main content wrapper
        document.body.insertAdjacentHTML('beforeend', navigationHTML.mainContent);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ main-content
        movePageContentToWrapper();
        
        console.log('‚úÖ API –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ DOM');
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ wrapper
     */
    function movePageContentToWrapper() {
        const pageContentContainer = document.getElementById('api-page-content');
        if (!pageContentContainer) return;
        
        const elementsToMove = [];
        const bodyChildren = Array.from(document.body.children);
        
        bodyChildren.forEach(child => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã
            if (!child.classList.contains('api-navbar') && 
                !child.classList.contains('api-sidebar') &&
                !child.classList.contains('api-main-content') &&
                !child.classList.contains('api-navigation-skeleton') &&
                child.tagName !== 'SCRIPT' &&
                child.tagName !== 'STYLE') {
                elementsToMove.push(child);
            }
        });
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        elementsToMove.forEach(element => {
            pageContentContainer.appendChild(element);
        });
        
        console.log(`‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ ${elementsToMove.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ page-content`);
    }
    
    /**
     * Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è
     */
    function createFallbackNavigation() {
        console.log('üîÑ –°–æ–∑–¥–∞–µ–º fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
        
        const fallbackItems = [
            {id: 1, title: '–ì–ª–∞–≤–Ω–∞—è', url: '/dashboard/main.html', icon: 'üè†', children: []},
            {id: 2, title: '–ó–∞–¥–∞—á–∏', url: '/dashboard/tasks.html', icon: 'üìã', children: []},
            {id: 3, title: '–í—Å—Ç—Ä–µ—á–∏', url: '/dashboard/meetings.html', icon: 'üìÖ', children: []},
            {id: 4, title: '–ü—Ä–æ–µ–∫—Ç—ã', url: '/dashboard/projects.html', icon: 'üìÅ', children: []},
            {id: 5, title: '–ü–æ–∫—É–ø–∫–∏', url: '/dashboard/shopping.html', icon: 'üõí', children: []},
            {id: 6, title: '–ó–∞–º–µ—Ç–∫–∏', url: '/dashboard/notes.html', icon: 'üìù', children: []},
            {id: 7, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', url: '/dashboard/settings.html', icon: '‚öôÔ∏è', children: []},
            {id: 8, title: 'UI Kit', url: '/dashboard/ui-kit.html', icon: 'üé®', children: []}
        ];
        
        return fallbackItems;
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    async function loadNavigation() {
        if (isLoading || isNavigationLoaded) return;
        
        isLoading = true;
        
        try {
            // –°–æ–∑–¥–∞–µ–º skeleton —Å—Ä–∞–∑—É
            createNavigationSkeleton();
            
            let navigationItems = null;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞
            navigationItems = getCachedNavigation();
            
            if (!navigationItems) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                const timeoutPromise = new Promise((_, reject) => {
                    setTimeout(() => reject(new Error('API timeout')), CONFIG.FALLBACK_TIMEOUT);
                });
                
                try {
                    navigationItems = await Promise.race([
                        fetchNavigationFromAPI(),
                        timeoutPromise
                    ]);
                } catch (apiError) {
                    console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', apiError.message);
                    navigationItems = createFallbackNavigation();
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º HTML –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const navigationHTML = createNavigationHTML(navigationItems);
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ DOM
            insertNavigationIntoDOM(navigationHTML);
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∏ —É–¥–∞–ª—è–µ–º skeleton
            setTimeout(() => {
                removeNavigationSkeleton();
                isNavigationLoaded = true;
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                document.dispatchEvent(new CustomEvent('apiNavigationLoaded', {
                    detail: { navigationItems }
                }));
                
            }, CONFIG.SKELETON_DURATION);
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
            
            // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            setTimeout(() => {
                removeNavigationSkeleton();
                const fallbackHTML = createNavigationHTML(createFallbackNavigation());
                insertNavigationIntoDOM(fallbackHTML);
            }, 500);
            
        } finally {
            isLoading = false;
        }
    }
    
    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    window.toggleApiUserMenu = function() {
        const dropdown = document.getElementById('api-user-dropdown');
        if (dropdown) {
            dropdown.classList.toggle('show');
        }
    };
    
    window.confirmLogout = function() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?')) {
            localStorage.clear();
            window.location.reload();
        }
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', function(event) {
        const userButton = event.target.closest('.api-navbar-user');
        const dropdown = document.getElementById('api-user-dropdown');
        
        if (!userButton && dropdown) {
            dropdown.classList.remove('show');
        }
    });
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    function init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        if (document.querySelector('.api-navbar') || document.querySelector('.api-sidebar')) {
            console.log('‚ÑπÔ∏è API –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            return;
        }
        
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Navigation Loader');
        loadNavigation();
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    window.ApiNavigationLoader = {
        load: loadNavigation,
        clearCache: () => localStorage.removeItem(CONFIG.CACHE_KEY),
        getCache: getCachedNavigation,
        isLoaded: () => isNavigationLoaded
    };
    
})();