#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü dashboard
–ü—Ä–∏–≤–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∏–ª—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
"""

import os
import re
from typing import Dict, List, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DASHBOARD_DIR = "/Users/d.dubenetskiy/Documents/tg_project/dashboard"

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
MAIN_PAGES = {
    'main.html': {
        'title': '–ì–ª–∞–≤–Ω–∞—è',
        'icon': 'üè†',
        'action_btn': None  # –ù–∞ –≥–ª–∞–≤–Ω–æ–π –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    },
    'tasks.html': {
        'title': '–ó–∞–¥–∞—á–∏',
        'icon': 'üìã',
        'action_btn': {
            'text': '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
            'onclick': 'addTask()',
            'icon': '+'
        }
    },
    'meetings.html': {
        'title': '–í—Å—Ç—Ä–µ—á–∏',
        'icon': 'üìÖ',
        'action_btn': {
            'text': '–î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É',
            'onclick': 'addMeeting()',
            'icon': '+'
        }
    },
    'projects.html': {
        'title': '–ü—Ä–æ–µ–∫—Ç—ã',
        'icon': 'üìÅ',
        'action_btn': {
            'text': '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç',
            'onclick': 'createProject()',
            'icon': '+'
        }
    },
    'shopping.html': {
        'title': '–ü–æ–∫—É–ø–∫–∏',
        'icon': 'üõí',
        'action_btn': {
            'text': '–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫',
            'onclick': 'addShoppingList()',
            'icon': '+'
        }
    },
    'notes.html': {
        'title': '–ó–∞–º–µ—Ç–∫–∏',
        'icon': 'üìù',
        'action_btn': {
            'text': '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
            'onclick': 'createNote()',
            'icon': '+'
        }
    },
    'settings.html': {
        'title': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'icon': '‚öôÔ∏è',
        'action_btn': None  # –ù–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    }
}

def add_unified_css_link(content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ unified-page-styles.css –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∞
    if 'unified-page-styles.css' in content:
        return content
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ navigation-api-simple.css)
    pattern = r'(<link rel="stylesheet" href="navigation-api-simple\.css">)'
    replacement = r'\1\n    <link rel="stylesheet" href="unified-page-styles.css">'
    
    if re.search(pattern, content):
        content = re.sub(pattern, replacement, content)
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω navigation-api-simple.css, –¥–æ–±–∞–≤–ª—è–µ–º –≤ head
        head_pattern = r'(</head>)'
        css_link = '    <link rel="stylesheet" href="unified-page-styles.css">\n'
        content = re.sub(head_pattern, css_link + r'\1', content)
    
    return content

def generate_unified_header(page_config: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    title = page_config['title']
    icon = page_config['icon']
    action_btn = page_config.get('action_btn')
    
    header_html = f'''        <div class="unified-page-header">
            <h1 class="unified-page-title">
                <span class="unified-page-title-icon">{icon}</span>
                <span class="unified-page-title-text">{title}</span>
            </h1>'''
    
    if action_btn:
        header_html += f'''
            <div class="unified-action-group">
                <button class="unified-action-btn" onclick="{action_btn['onclick']}">
                    <span class="unified-action-btn-icon">{action_btn['icon']}</span>
                    {action_btn['text']}
                </button>
            </div>'''
    
    header_html += '\n        </div>'
    
    return header_html

def update_page_structure(content: str, filename: str) -> str:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å"""
    
    page_config = MAIN_PAGES[filename]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    new_header = generate_unified_header(page_config)
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    container_patterns = [
        # main.html - container
        (r'<div class="container"[^>]*>', '<div class="unified-page-container">'),
        
        # tasks.html - tasks-page-container
        (r'<div class="tasks-page-container"[^>]*>', '<div class="unified-page-container">'),
        
        # meetings.html - meetings-container
        (r'<div class="meetings-container"[^>]*>', '<div class="unified-page-container">'),
        
        # projects.html - main-content + container
        (r'<main class="main-content">\s*<div class="container"[^>]*>', '<div class="unified-page-container">'),
        
        # shopping.html - shopping-container
        (r'<div class="shopping-container"[^>]*>', '<div class="unified-page-container">'),
        
        # notes.html - notes-container
        (r'<div class="notes-container"[^>]*>', '<div class="unified-page-container">'),
        
        # settings.html - settings-container
        (r'<div class="settings-container"[^>]*>', '<div class="unified-page-container">'),
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    for pattern, replacement in container_patterns:
        content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_patterns = [
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π (meetings, shopping, tasks)
        (r'<div class="[^"]*header[^"]*"[^>]*>.*?</div>', new_header, re.MULTILINE | re.DOTALL),
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1
        (r'<h1[^>]*>.*?</h1>', new_header, re.MULTILINE | re.DOTALL),
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ projects.html
        (r'<div class="page-header"[^>]*>.*?</div>', new_header, re.MULTILINE | re.DOTALL),
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for pattern, replacement, flags in header_patterns:
        if re.search(pattern, content, flags):
            content = re.sub(pattern, replacement, content, flags)
            break  # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    closing_patterns = [
        # –ó–∞–∫—Ä—ã—Ç–∏–µ main + container –≤ projects.html
        (r'</div>\s*</main>', '</div>'),
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        (r'</div>\s*</div>\s*$', '</div>', re.MULTILINE),
    ]
    
    for pattern, replacement, *flags in closing_patterns:
        flag = flags[0] if flags else 0
        content = re.sub(pattern, replacement, content, flag)
    
    return content

def backup_file(file_path: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = file_path + '.backup-unify'
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return backup_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ {file_path}: {e}")
        return None

def update_page(filename: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    
    file_path = os.path.join(DASHBOARD_DIR, filename)
    
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_path = backup_file(file_path)
        if backup_path:
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {os.path.basename(backup_path)}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Å—ã–ª–∫—É
        content = add_unified_css_link(content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        content = update_page_structure(content, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {filename}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {filename}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü dashboard")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSS —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    css_path = os.path.join(DASHBOARD_DIR, 'unified-page-styles.css')
    if not os.path.exists(css_path):
        print(f"‚ùå CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {css_path}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª unified-page-styles.css –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∏–ø—Ç–∞")
        return
    
    print(f"‚úÖ CSS —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: unified-page-styles.css")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updated_count = 0
    total_count = len(MAIN_PAGES)
    
    for filename in MAIN_PAGES.keys():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {filename}")
        
        if update_page(filename):
            updated_count += 1
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {filename}")
    
    print(f"\nüéâ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {updated_count}/{total_count}")
    
    if updated_count > 0:
        print(f"\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(f"  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω unified-page-styles.css –≤–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print(f"  ‚Ä¢ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏–∂–∞—Ç—ã –≤–ª–µ–≤–æ (—É–±—Ä–∞–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        print(f"  ‚Ä¢ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1 —Å –∏–∫–æ–Ω–∫–∞–º–∏")
        print(f"  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –±—ç–∫–∞–ø—ã –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (.backup-unify)")
        
        print(f"\nüß™ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
        for filename in MAIN_PAGES.keys():
            page_name = MAIN_PAGES[filename]['title']
            print(f"  üåê http://localhost:8000/dashboard/{filename} - {page_name}")

if __name__ == "__main__":
    main()