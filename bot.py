import os
import asyncio
from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from typing import Optional
from fastapi.responses import FileResponse, RedirectResponse

from db import create_project
from db import update_user_setting, get_user_settings, get_user_setting
from db import get_today_events, get_recent_purchases, get_today_tasks
from db import (
    get_shopping_items, add_shopping_item, toggle_shopping_item, delete_shopping_item, update_shopping_item,
    get_user_shopping_lists, create_shopping_list, get_shopping_list, update_shopping_list, 
    delete_shopping_list, get_shopping_items_by_lists,
    get_user_stats, get_dashboard_counters, toggle_task_status, delete_event_by_id, clear_user_data
)
from dotenv import load_dotenv
load_dotenv()  # –∑–∞–≥—Ä—É–∑–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    WebAppInfo, MenuButtonWebApp, Bot
)
from fastapi_utils.tasks import repeat_every
from datetime import datetime, timedelta
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
from db import (
    init_db,
    add_user,
    add_purchase,
    get_purchases_by_status,
    update_purchase_status,
    add_event,
    update_event,
    deactivate_event,
    get_events_by_filter,
    get_conn,
    log_event,
    has_reminder_been_sent,
    get_user_personal_project_id,
    record_reminder_sent,
    update_shopping_item,
    resolve_user_id,
)

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ /api/events (GET)
from db import get_user_events
from db import add_project_member, get_project

TOKEN = os.getenv("BOT_TOKEN")

# === –ü–µ—Ä–µ–µ—Ö–∞–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö  ===
async def reminder_loop():
    while True:
        now = datetime.utcnow()
        check_time = now + timedelta(minutes=60)
        now_iso = now.isoformat()
        check_iso = check_time.isoformat()

        with get_conn() as conn:
            with conn.cursor() as cur:
                # –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—Ç—É—é—Ç —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç (–ø–ª—é—Å/–º–∏–Ω—É—Å 1 –º–∏–Ω—É—Ç–∞)
                cur.execute("""
                    SELECT id, title, location, start_at
                    FROM events
                    WHERE active = TRUE
                    AND start_at BETWEEN %s AND %s
                """, (now_iso, check_iso))
                events = cur.fetchall()

                cur.execute("SELECT telegram_id FROM users")
                users = [u["telegram_id"] for u in cur.fetchall()]

        if not users:
            log_event("info", "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        if not events:
            log_event("info", "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

        bot = Bot(token=TOKEN)

        for event in events:
            for user_id in users:
                if has_reminder_been_sent(user_id, event["id"]):
                    continue

                start = datetime.fromisoformat(event["start_at"])
                user_tz_offset = get_user_setting(user_id, "timezone") or "0"

                try:
                    offset_hours = int(user_tz_offset)
                except ValueError:
                    offset_hours = 0

                user_time = start + timedelta(hours=offset_hours)
                formatted_time = user_time.strftime("%d.%m.%y %H:%M")

                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                            f"üìÖ –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
                            f"¬´{event['title']}¬ª\n"
                            f"üïí {formatted_time}\n"
                            f"üìç {event['location']}"
                        )
                    )
                    log_event("reminder", f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Å–æ–±—ã—Ç–∏–∏ '{event['title']}'")
                    record_reminder_sent(user_id, event["id"])
                except Exception as e:
                    log_event("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {type(e).__name__} ‚Äî {e}")
        await asyncio.sleep(60)
import uvicorn

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
# TOKEN = os.getenv("BOT_TOKEN")
DOMAIN = os.getenv("DOMAIN", "https://dialist.ru")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{DOMAIN}{WEBHOOK_PATH}"

telegram_app = ApplicationBuilder().token(TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("/tmp/webhook_debug.log", "a") as f:
        f.write(f"‚ö°Ô∏è START HANDLER CALLED {datetime.utcnow().isoformat()}\n")
    
    print("‚ö°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω")
    user = update.effective_user
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user.id, user.username)
    
    with open("/tmp/webhook_debug.log", "a") as f:
        f.write(f"üë§ User: ID={user.id}, username={user.username}, first_name={user.first_name}\n")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_url = os.getenv("DATABASE_URL", "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"üîß DATABASE_URL: {db_url[:70]}...\n")
        
        result = add_user(
            user_id=user.id,
            first_name=user.first_name or "",
            username=user.username or ""
        )
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"‚úÖ add_user result: {result}\n")
            
    except Exception as e:
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"‚ùå add_user error: {e}\n")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    keyboard = [[
        InlineKeyboardButton(
            "–û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=f"{DOMAIN}/webapp")
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)
    
    with open("/tmp/webhook_debug.log", "a") as f:
        f.write(f"‚úÖ START HANDLER COMPLETED\n\n")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'show_hello':
        await query.edit_message_text("Hello, World!")


# === –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì© test_notify –≤—ã–∑–≤–∞–Ω –æ—Ç:", update.effective_user.id)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(button_handler))
telegram_app.add_handler(CommandHandler("test_notify", test_notify))

# === FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def initialize_database():
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª—è NetAngels)
        if not os.getenv("DATABASE_URL") and os.getenv("DB_CONNECTION_STRING"):
            os.environ["DATABASE_URL"] = os.getenv("DB_CONNECTION_STRING")
        
        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üìç DATABASE_URL: {os.getenv('DATABASE_URL', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        import traceback
        traceback.print_exc()
        return False

# –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initialize_database()

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    try:
        data = await req.json()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import json
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"=== {datetime.utcnow().isoformat()} ===\n")
            f.write(json.dumps(data, indent=2, ensure_ascii=False) + "\n\n")
        
        print("üì© Webhook –ø–æ–ª—É—á–µ–Ω:", data.get("message", {}).get("text", data))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if "message" in data and "from" in data["message"]:
            user = data["message"]["from"]
            print(f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user['id']}, username={user.get('username', 'None')}")
        
        update = Update.de_json(data, telegram_app.bot)
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update: {update.update_id}")
        
        await telegram_app.process_update(update)
        print("‚úÖ Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return {"status": "ok"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        import traceback
        traceback.print_exc()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"ERROR {datetime.utcnow().isoformat()}: {e}\n")
            f.write(traceback.format_exc() + "\n\n")
            
        return {"status": "error", "message": str(e)}

# === –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.get("/webhook-info")
async def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook"""
    return {
        "webhook_url": WEBHOOK_URL,
        "webhook_path": WEBHOOK_PATH,
        "domain": DOMAIN,
        "token_set": bool(TOKEN)
    }

@app.get("/webhook-debug")
async def webhook_debug():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ webhook –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        with open("/tmp/webhook_debug.log", "r") as f:
            logs = f.read()
        return {"logs": logs}
    except FileNotFoundError:
        return {"logs": "–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

# === WebApp –º–∞—Ä—à—Ä—É—Ç—ã ===

app.mount("/webapp", StaticFiles(directory="static", html=True), name="webapp")
app.mount("/dashboard", StaticFiles(directory="dashboard", html=True), name="dashboard")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º HTML —Ñ–∞–π–ª
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    return FileResponse("index.html")

@app.get("/test-auth")
async def test_auth():
    return FileResponse("test_auth.html")

@app.get("/local-auth")
async def local_auth():
    return FileResponse("local_auth.html")

@app.get("/api/shopping")
async def get_shopping(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è dashboard"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        items = get_shopping_items(db_user_id)
        return items
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching shopping items: {str(e)}")

@app.post("/api/shopping")
async def add_to_shopping(request: Request):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è dashboard"""
    data = await request.json()
    name = data.get("name")
    quantity = data.get("quantity", 1)
    price = data.get("price")
    category = data.get("category", "other")
    user_id = data.get("user_id")
    shopping_list_id = data.get("shopping_list_id")
    url = data.get("url")
    comment = data.get("comment")

    if not name or not user_id:
        raise HTTPException(status_code=400, detail="name and user_id required")

    try:
        item_id = add_shopping_item(user_id, name, int(quantity), price, category, shopping_list_id, url, comment)
        return {"status": "ok", "id": item_id}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error adding shopping item: {str(e)}")

@app.put("/api/shopping/{item_id}")
async def update_shopping_item_endpoint(item_id: int, request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
    data = await request.json()
    user_id = data.get("user_id")
    name = data.get("name")
    quantity = data.get("quantity", 1)
    price = data.get("price")
    category = data.get("category", "other")
    shopping_list_id = data.get("shopping_list_id")
    url = data.get("url")
    comment = data.get("comment")

    if not user_id or not name:
        raise HTTPException(status_code=400, detail="user_id and name required")

    try:
        success = update_shopping_item(item_id, user_id, name, int(quantity), price, category, shopping_list_id, url, comment)
        if not success:
            raise HTTPException(status_code=404, detail="Item not found")
        
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating item: {str(e)}")

@app.post("/api/events")
async def create_event(request: Request):
    data = await request.json()
    title = data.get("title")
    location = data.get("location")
    start_at = data.get("start_at")
    end_at = data.get("end_at")
    user_id = data.get("user_id")
    project_id = data.get("project_id")
    description = data.get("description")

    if not all([title, user_id]):
        raise HTTPException(status_code=400, detail="Missing required fields: title and user_id")
    
    # –ï—Å–ª–∏ location –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not location:
        location = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ï—Å–ª–∏ project_id None, –ø–æ–ª—É—á–∞–µ–º ID –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if project_id is None:
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        project_id = get_user_personal_project_id(db_user_id)
        if not project_id:
            raise HTTPException(status_code=400, detail="–õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")

    add_event(user_id, project_id, title, location, start_at, end_at, description)
    return {"status": "ok"}

@app.get("/api/events")
async def get_events(user_id: int, filter: str = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ"):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        raise HTTPException(status_code=404, detail="User not found")
    
    events = get_user_events(db_user_id, filter)
    return events

@app.get("/api/projects")
async def get_user_projects(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        from db import get_user_projects
        projects = get_user_projects(db_user_id)
        return projects
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return []

@app.get("/api/user-projects")
async def get_user_projects_alt(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        from db import get_user_projects
        projects = get_user_projects(db_user_id)
        return projects
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return []

@app.post("/api/projects")
async def create_project(request: Request):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    try:
        data = await request.json()
        name = data.get("name")
        color = data.get("color", "#4facfe")
        owner_id = data.get("owner_id")
        
        if not name or not owner_id:
            raise HTTPException(status_code=400, detail="Name and owner_id are required")
        
        from db import create_project
        project = create_project(name, owner_id, color)
        return {"id": project, "name": name, "color": color, "owner_id": owner_id}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/api/projects/{project_id}")
async def update_project(project_id: int, request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    try:
        data = await request.json()
        name = data.get("name")
        color = data.get("color", "#4facfe")
        owner_id = data.get("owner_id")
        
        if not name or not owner_id:
            raise HTTPException(status_code=400, detail="Name and owner_id are required")
        
        from db import update_project
        success = update_project(project_id, name, color, owner_id)
        
        if success:
            return {"id": project_id, "name": name, "color": color, "owner_id": owner_id}
        else:
            raise HTTPException(status_code=404, detail="Project not found or access denied")
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/projects/{project_id}")
async def delete_project(project_id: int, user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        from db import delete_project
        success = delete_project(project_id, db_user_id)
        
        if success:
            return {"message": "Project deleted successfully"}
        else:
            raise HTTPException(status_code=404, detail="Project not found or access denied")
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/api/projects/{project_id}/deactivate")
async def deactivate_project(project_id: int, request: Request):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="user_id is required")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        from db import deactivate_project
        success = deactivate_project(project_id, db_user_id)
        
        if success:
            return {"message": "Project deactivated successfully"}
        else:
            raise HTTPException(status_code=404, detail="Project not found or access denied")
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/projects/{project_id}")
async def get_project(project_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        from db import get_project
        project = get_project(project_id, db_user_id)
        
        if project:
            return project
        else:
            raise HTTPException(status_code=404, detail="Project not found or access denied")
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/projects/{project_id}/members")
async def get_project_members(project_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        from db import get_project_members
        members = get_project_members(project_id, db_user_id)
        return members
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/projects/{project_id}/members")
async def add_project_member(project_id: int, request: Request):
    """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        member_user_id = data.get("member_user_id")
        
        if not user_id or not member_user_id:
            raise HTTPException(status_code=400, detail="user_id and member_user_id are required")
        
        from db import add_project_member
        success = add_project_member(project_id, user_id, member_user_id)
        
        if success:
            return {"message": "Member added successfully"}
        else:
            raise HTTPException(status_code=404, detail="Project not found, access denied, or user not found")
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/projects/{project_id}/members/{member_id}")
async def remove_project_member(project_id: int, member_id: int, request: Request):
    """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="user_id is required")
        
        from db import remove_project_member
        success = remove_project_member(project_id, user_id, member_id)
        
        if success:
            return {"message": "Member removed successfully"}
        else:
            raise HTTPException(status_code=404, detail="Project not found, access denied, or member not found")
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/api/events/{event_id}")
async def edit_event(event_id: int, request: Request):
    data = await request.json()
    title = data.get("title")
    location = data.get("location")
    start_at = data.get("start_at")
    end_at = data.get("end_at")
    user_id = data.get("user_id")

    if not all([title, location, start_at, end_at, user_id]):
        raise HTTPException(status_code=400, detail="Missing fields")

    update_event(event_id, user_id, title, location, start_at, end_at)
    return {"status": "updated"}

@app.put("/api/events/{event_id}/deactivate")
async def deactivate_event_api(event_id: int):
    deactivate_event(event_id)
    return {"status": "deactivated"}


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API endpoint –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@app.get("/api/user/settings")
async def get_user_settings_api(user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        raise HTTPException(status_code=404, detail="User not found")
    
    settings = get_user_settings(db_user_id)
    if not isinstance(settings, dict):
        raise HTTPException(status_code=500, detail="Settings not loaded correctly")
    return {
        "timezone": settings.get("timezone", "0")
    }

@app.post("/api/user/settings")
async def set_user_settings(request: Request):
    data = await request.json()
    user_id = data.get("user_id")

    if not user_id:
        raise HTTPException(status_code=400, detail="Missing user_id")

    return {"status": "ok"}

# === User Timezone API ===
@app.get("/api/user/timezone")
async def get_user_timezone(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        timezone = get_user_setting(db_user_id, "timezone") or "0"
        return {"timezone": timezone}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting timezone: {str(e)}")

@app.post("/api/user/timezone")
async def set_user_timezone(request: Request):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        timezone = data.get("timezone")
        
        if not user_id or timezone is None:
            raise HTTPException(status_code=400, detail="Missing user_id or timezone")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç -12 –¥–æ +14)
        try:
            tz_offset = int(timezone)
            if tz_offset < -12 or tz_offset > 14:
                raise ValueError("Invalid timezone offset")
        except ValueError:
            raise HTTPException(status_code=400, detail="Invalid timezone format")
        
        update_user_setting(user_id, "timezone", str(tz_offset))
        return {"status": "ok", "timezone": str(tz_offset)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error setting timezone: {str(e)}")

# === Dashboard Settings API ===
@app.get("/api/settings")
async def get_dashboard_settings(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dashboard –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (db_user_id: {db_user_id})")
        settings = get_user_settings(db_user_id)
        print(f"üìä –°—ã—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: {settings}")
        
        if not isinstance(settings, dict):
            settings = {}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
        def str_to_bool(value, default=False):
            if isinstance(value, bool):
                return value
            if isinstance(value, str):
                return value.lower() in ('true', '1', 'yes', 'on')
            return default
        
        result = {
            "emailNotifications": str_to_bool(settings.get("email_notifications"), False),
            "taskReminders": str_to_bool(settings.get("task_reminders"), True)
        }
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {result}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"Error loading settings: {str(e)}")

@app.post("/api/settings")
async def save_dashboard_settings(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dashboard –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        
        print(f"üîß –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="Missing user_id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏)
        if "email_notifications" in data:
            update_user_setting(user_id, "email_notifications", str(data["email_notifications"]).lower())
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data['email_notifications']}")
        
        if "task_reminders" in data:
            update_user_setting(user_id, "task_reminders", str(data["task_reminders"]).lower())
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {data['task_reminders']}")
        
        print("üéâ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return {"status": "ok"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"Error saving settings: {str(e)}")

@app.post("/api/clear-all-data")
async def clear_all_user_data(request: Request):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await request.json()
    user_id = data.get("user_id")
    
    if not user_id:
        raise HTTPException(status_code=400, detail="Missing user_id")
    
    try:
        success = clear_user_data(user_id)
        if not success:
            raise HTTPException(status_code=500, detail="Failed to clear user data")
        
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error clearing data: {str(e)}")

# === Shopping API Extensions ===
@app.post("/api/shopping/{item_id}/toggle")
async def toggle_shopping_item_status(item_id: int, request: Request):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏"""
    data = await request.json()
    user_id = data.get("user_id")
    
    if not user_id:
        raise HTTPException(status_code=400, detail="Missing user_id")
    
    try:
        new_status = toggle_shopping_item(item_id, user_id)
        if new_status is None:
            raise HTTPException(status_code=404, detail="Item not found")
        
        return {"status": "ok", "completed": new_status}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error toggling item: {str(e)}")

@app.delete("/api/shopping/{item_id}")
async def delete_shopping_item_endpoint(item_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
    try:
        success = delete_shopping_item(item_id)
        if not success:
            raise HTTPException(status_code=404, detail="Item not found")
        
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting item: {str(e)}")

# === Shopping Lists API ===

@app.get("/api/shopping-lists")
async def get_shopping_lists(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        lists = get_user_shopping_lists(db_user_id)
        return lists
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching shopping lists: {str(e)}")

@app.post("/api/shopping-lists")
async def create_shopping_list_endpoint(request: Request):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    data = await request.json()
    name = data.get("name")
    project_id = data.get("project_id")
    user_id = data.get("user_id")

    if not all([name, project_id, user_id]):
        raise HTTPException(status_code=400, detail="name, project_id and user_id required")

    try:
        list_id = create_shopping_list(user_id, name, project_id)
        return {"status": "ok", "id": list_id}
    except ValueError as e:
        raise HTTPException(status_code=403, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating shopping list: {str(e)}")

@app.get("/api/shopping-lists/{list_id}")
async def get_shopping_list_endpoint(list_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        shopping_list = get_shopping_list(list_id, db_user_id)
        if not shopping_list:
            raise HTTPException(status_code=404, detail="Shopping list not found")
        return shopping_list
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching shopping list: {str(e)}")

@app.put("/api/shopping-lists/{list_id}")
async def update_shopping_list_endpoint(list_id: int, request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    data = await request.json()
    name = data.get("name")
    project_id = data.get("project_id")
    user_id = data.get("user_id")

    if not all([name, project_id, user_id]):
        raise HTTPException(status_code=400, detail="name, project_id and user_id required")

    try:
        success = update_shopping_list(list_id, user_id, name, project_id)
        if not success:
            raise HTTPException(status_code=404, detail="Shopping list not found")
        return {"status": "ok"}
    except ValueError as e:
        raise HTTPException(status_code=403, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating shopping list: {str(e)}")

@app.delete("/api/shopping-lists/{list_id}")
async def delete_shopping_list_endpoint(list_id: int, user_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        success = delete_shopping_list(list_id, db_user_id)
        if not success:
            raise HTTPException(status_code=404, detail="Shopping list not found")
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting shopping list: {str(e)}")

@app.get("/api/shopping-by-lists")
async def get_shopping_by_lists(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        items = get_shopping_items_by_lists(db_user_id)
        return items
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching shopping items by lists: {str(e)}")

# === Tasks API Extensions ===
@app.post("/api/tasks/{task_id}/toggle")
async def toggle_task_status_endpoint(task_id: int, request: Request):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
    data = await request.json()
    user_id = data.get("user_id")
    
    if not user_id:
        raise HTTPException(status_code=400, detail="Missing user_id")
    
    try:
        new_status = toggle_task_status(task_id, user_id)
        if new_status is None:
            raise HTTPException(status_code=404, detail="Task not found")
        
        return {"status": "ok", "completed": new_status}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error toggling task: {str(e)}")

@app.put("/api/tasks/{task_id}/complete")
async def complete_task_endpoint(task_id: int):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ static)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—ë
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("UPDATE tasks SET completed = TRUE WHERE id = %s", (task_id,))
                if cur.rowcount == 0:
                    raise HTTPException(status_code=404, detail="Task not found")
        
        return {"status": "ok", "completed": True}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error completing task: {str(e)}")

# === Events API Extensions ===
@app.delete("/api/events/{event_id}")
async def delete_event_endpoint(event_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
    try:
        success = delete_event_by_id(event_id)
        if not success:
            raise HTTPException(status_code=404, detail="Event not found")
        
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting event: {str(e)}")

# === Dashboard Stats API ===
@app.get("/api/user-stats")
async def get_user_stats_endpoint(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è dashboard"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        stats = get_user_stats(db_user_id)
        return stats
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching user stats: {str(e)}")

@app.get("/api/dashboard-counters")
async def get_dashboard_counters_endpoint(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ dashboard"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        counters = get_dashboard_counters(db_user_id)
        return counters
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching dashboard counters: {str(e)}")

# === Telegram Auth endpoint ===
import hashlib
import hmac
from urllib.parse import unquote

def verify_telegram_auth(auth_data: dict, bot_token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
    check_hash = auth_data.pop('hash', None)
    if not check_hash:
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    data_check_arr = []
    for key, value in sorted(auth_data.items()):
        if key != 'hash':
            data_check_arr.append(f"{key}={value}")
    
    data_check_string = '\n'.join(data_check_arr)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = hashlib.sha256(bot_token.encode()).digest()
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
    calculated_hash = hmac.new(
        secret_key, 
        data_check_string.encode(), 
        hashlib.sha256
    ).hexdigest()
    
    return calculated_hash == check_hash

@app.post("/api/auth/telegram")
async def auth_telegram(request: Request):
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        data = await request.json()
        print(f"üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not data.get("hash"):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash")
            raise HTTPException(status_code=400, detail="Missing hash")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞)
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É!
        verify_signature = os.getenv("VERIFY_TELEGRAM_SIGNATURE", "false").lower() == "true"
        print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {verify_signature}")
        
        if verify_signature:
            if not verify_telegram_auth(data.copy(), TOKEN):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram")
                raise HTTPException(status_code=401, detail="Invalid Telegram signature")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = data.get("id")
        first_name = data.get("first_name", "")
        last_name = data.get("last_name", "")
        username = data.get("username", "")
        photo_url = data.get("photo_url", "")
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, –ò–º—è={first_name}, Username={username}")
        
        if not user_id:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user ID")
            raise HTTPException(status_code=400, detail="Missing user ID")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        auth_date = data.get("auth_date")
        if auth_date:
            import time
            current_time = int(time.time())
            auth_time = int(auth_date)
            time_diff = current_time - auth_time
            
            print(f"üïê –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_time}, —Ç–µ–∫—É—â–µ–µ: {current_time}, —Ä–∞–∑–Ω–∏—Ü–∞: {time_diff}—Å")
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ (3600 —Å–µ–∫—É–Ω–¥), –æ—Ç–∫–ª–æ–Ω—è–µ–º
            if time_diff > 3600:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
                raise HTTPException(status_code=401, detail="Authorization expired")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üíæ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
        user_id_from_db = add_user(user_id, first_name, username)
        
        if not user_id_from_db:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î")
            raise HTTPException(status_code=500, detail="Failed to create user")
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user_id_from_db}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
        personal_project_id = get_user_personal_project_id(user_id_from_db)
        if not personal_project_id:
            print("‚ùå –õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            raise HTTPException(status_code=500, detail="Failed to create personal project")
        
        print(f"‚úÖ –õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: {personal_project_id}")
        
        result = {
            "status": "ok", 
            "user": {
                "id": user_id_from_db,  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–∑ –ë–î
                "telegram_id": user_id,  # ID —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞  
                "first_name": first_name,
                "last_name": last_name,
                "username": username,
                "photo_url": photo_url,
                "personal_project_id": personal_project_id
            }
        }
        print(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ auth_telegram: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")

@app.get("/api/user/validate")
async def validate_user(user_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î –∏ –∏–º–µ–µ—Ç –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    """
    try:
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return {"valid": False, "reason": "User not found"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        personal_project_id = get_user_personal_project_id(db_user_id)
        if not personal_project_id:
            print(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (db_user_id: {db_user_id}) –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
            return {"valid": False, "reason": "Personal project not found"}
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∞–ª–∏–¥–µ–Ω (db_user_id: {db_user_id}, personal_project: {personal_project_id})")
        return {
            "valid": True, 
            "id": db_user_id,  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–∑ –ë–î
            "telegram_id": user_id,  # ID —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞
            "personal_project_id": personal_project_id
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {"valid": False, "reason": f"Server error: {str(e)}"}

# === Task API ===
from db import add_task, get_tasks, complete_task, get_user_personal_project_id
from typing import Optional

@app.get("/api/tasks")
async def api_get_tasks(user_id: int, project_id: Optional[int] = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    from datetime_utils import format_datetime_for_user, is_today, is_tomorrow, is_overdue
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        raise HTTPException(status_code=404, detail="User not found")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    tasks = get_tasks(db_user_id, project_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_timezone = get_user_setting(db_user_id, "timezone") or "0"
    
    # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞—Ç–∞—Ö
    enriched_tasks = []
    for task in tasks:
        task_dict = dict(task)
        
        if task_dict.get('due_date'):
            try:
                from datetime_utils import parse_datetime_string
                due_dt = parse_datetime_string(task_dict['due_date'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ
                task_dict['date_info'] = {
                    'is_today': is_today(due_dt, user_timezone),
                    'is_tomorrow': is_tomorrow(due_dt, user_timezone),
                    'is_overdue': is_overdue(due_dt, user_timezone),
                    'formatted_date': format_datetime_for_user(due_dt, user_timezone, 'relative'),
                    'formatted_full': format_datetime_for_user(due_dt, user_timezone, 'full')
                }
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã {task_dict['due_date']}: {e}")
                task_dict['date_info'] = None
        else:
            task_dict['date_info'] = None
            
        enriched_tasks.append(task_dict)
    
    return enriched_tasks

@app.get("/api/tasks/today")
async def api_today_tasks(user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        raise HTTPException(status_code=404, detail="User not found")
    
    result = get_today_tasks(user_id)
    return {
        "overdue": result.get("overdue", []),
        "today": result.get("today", [])
    }

@app.get("/api/tasks/{task_id}")
async def api_get_task(task_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT t.id, t.title, t.description, t.due_date, t.priority,
                           t.completed, t.created_at, t.completed_at, t.project_id, 
                           p.name AS project_name, p.color AS project_color
                    FROM tasks t
                    LEFT JOIN projects p ON t.project_id = p.id
                    WHERE t.id = %s AND (t.user_id = %s OR t.project_id IN (
                        SELECT p2.id FROM projects p2 
                        WHERE p2.owner_id = %s OR p2.id IN (
                            SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                        )
                    ))
                """, (task_id, db_user_id, db_user_id, db_user_id))
                
                task = cur.fetchone()
                if not task:
                    raise HTTPException(status_code=404, detail="Task not found")
                
                return dict(task)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error getting task: {str(e)}")

@app.post("/api/tasks")
async def api_add_task(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    project_id = data.get("project_id")
    title = data.get("title")
    description = data.get("description", "")
    priority = data.get("priority", "–æ–±—ã—á–Ω–∞—è")
    due_date = data.get("due_date")

    if not user_id or not title:
        raise HTTPException(status_code=400, detail="user_id and title required")

    # –ï—Å–ª–∏ project_id None, –ø–æ–ª—É—á–∞–µ–º ID –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if project_id is None:
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        project_id = get_user_personal_project_id(db_user_id)
        if not project_id:
            raise HTTPException(status_code=400, detail="–õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    processed_due_date = due_date
    if due_date:
        try:
            from datetime_utils import user_timezone_to_utc, parse_datetime_string
            user_timezone = get_user_setting(user_id, "timezone") or "0"
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            parsed_date = parse_datetime_string(due_date)
            if parsed_date:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                utc_date = user_timezone_to_utc(parsed_date, user_timezone)
                processed_due_date = utc_date.isoformat()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã {due_date}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            processed_due_date = due_date
    
    add_task(user_id, project_id, title, processed_due_date, priority, description)
    return {"status": "ok"}


@app.put("/api/tasks/{task_id}/complete")
async def api_complete_task(task_id: int):
    complete_task(task_id)
    return {"status": "completed"}

# === API-–º–∞—Ä—à—Ä—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID ===
from datetime import datetime

@app.put("/api/tasks/{task_id}")
async def update_task(task_id: int, request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    title = data.get("title")
    description = data.get("description", "")
    due_date = data.get("due_date")
    priority = data.get("priority", "–æ–±—ã—á–Ω–∞—è")

    if not user_id or not title:
        raise HTTPException(status_code=400, detail="user_id and title are required")

    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cur.execute("""
                SELECT id FROM tasks 
                WHERE id = %s AND (user_id = %s OR project_id IN (
                    SELECT p.id FROM projects p 
                    WHERE p.owner_id = %s OR p.id IN (
                        SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                    )
                ))
            """, (task_id, user_id, user_id, user_id))
            
            if not cur.fetchone():
                raise HTTPException(status_code=404, detail="Task not found")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            cur.execute("""
                UPDATE tasks
                SET title = %s,
                    description = %s,
                    due_date = %s,
                    priority = %s
                WHERE id = %s
            """, (title, description, due_date, priority, task_id))
            conn.commit()

    return {"status": "updated"}

# === API-–º–∞—Ä—à—Ä—É—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID ===
from db import delete_task  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –≤–∫–ª—é—á–µ–Ω

@app.delete("/api/tasks/{task_id}")
async def api_delete_task(task_id: int, request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    
    if not user_id:
        raise HTTPException(status_code=400, detail="user_id is required")
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ —É–¥–∞–ª—è–µ–º
            cur.execute("""
                DELETE FROM tasks 
                WHERE id = %s AND (user_id = %s OR project_id IN (
                    SELECT p.id FROM projects p 
                    WHERE p.owner_id = %s OR p.id IN (
                        SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                    )
                ))
            """, (task_id, user_id, user_id, user_id))
            
            if cur.rowcount == 0:
                raise HTTPException(status_code=404, detail="Task not found")
            
            conn.commit()
    
    return {"status": "deleted"}

# === Today endpoints ===

@app.post("/api/debug/add-user-to-project")
async def debug_add_user_to_project(request: Request):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç"""
    data = await request.json()
    user_id = data.get("user_id")
    project_id = data.get("project_id")
    
    if not user_id or not project_id:
        raise HTTPException(status_code=400, detail="user_id and project_id required")
    
    try:
        add_project_member(project_id, user_id)
        return {"status": "ok", "message": f"User {user_id} added to project {project_id}"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/api/events/today")
async def api_today_events(user_id: int):
    return get_today_events(user_id)

@app.get("/api/shopping/today")
async def api_recent_purchases(user_id: int):
    return get_recent_purchases(user_id)


# === Projects endpoints ===

# –£–¥–∞–ª–µ–Ω—ã /api/projects GET –∏ POST, –¥–æ–±–∞–≤–ª–µ–Ω create_project_api:

from db import get_user_projects

@app.get("/api/project/list")
async def list_user_projects(user_id: int):
    return get_user_projects(user_id)

@app.post("/api/project/create")
async def create_project_api(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    name = data.get("name")
    color = data.get("color", "#4f46e5")  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if not user_id or not name:
        raise HTTPException(status_code=400, detail="Missing fields")

    project_id = create_project(name, user_id, color)
    return {"id": project_id}

@app.get("/api/project")
async def get_project_info(id: int):
    project = get_project(id)
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")
    return {"id": project["id"], "name": project["name"]}

@app.post("/api/project/invite")
async def invite_user_to_project(request: Request):
    data = await request.json()
    project_id = data.get("project_id")
    user_id = data.get("user_id")
    if not project_id or not user_id:
        raise HTTPException(status_code=400, detail="Missing fields")
    add_project_member(project_id, user_id)
    return {"status": "ok"}

# === Notes API ===
from db import add_note, get_user_notes, get_note_by_id, update_note, delete_note

@app.get("/api/notes")
async def api_get_notes(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        notes = get_user_notes(db_user_id)
        return notes
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching notes: {str(e)}")

@app.get("/api/notes/{note_id}")
async def api_get_note(note_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        note = get_note_by_id(note_id, db_user_id)
        if not note:
            raise HTTPException(status_code=404, detail="Note not found")
        return note
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching note: {str(e)}")

@app.post("/api/notes")
async def api_create_note(request: Request):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        title = data.get("title")
        content = data.get("content", "")
        
        if not user_id or not title:
            raise HTTPException(status_code=400, detail="user_id and title are required")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á) (—Ñ—É–Ω–∫—Ü–∏—è add_note —É–∂–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ, –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
        note_id = add_note(user_id, title, content)
        return {"status": "ok", "id": note_id}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating note: {str(e)}")

@app.put("/api/notes/{note_id}")
async def api_update_note(note_id: int, request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        title = data.get("title")
        content = data.get("content", "")
        
        if not user_id or not title:
            raise HTTPException(status_code=400, detail="user_id and title are required")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        success = update_note(note_id, db_user_id, title, content)
        if not success:
            raise HTTPException(status_code=404, detail="Note not found")
        
        return {"status": "ok"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating note: {str(e)}")

@app.delete("/api/notes/{note_id}")
async def api_delete_note(note_id: int, user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á)
        db_user_id = resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        success = delete_note(note_id, db_user_id)
        if not success:
            raise HTTPException(status_code=404, detail="Note not found")
        
        return {"status": "ok"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting note: {str(e)}")

# === Startup ===
@app.on_event("startup")
async def on_startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ start_server.py
    try:
        await telegram_app.initialize()
        await telegram_app.bot.delete_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        
        await telegram_app.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="–û—Ç–∫—Ä—ã—Ç—å WebApp",
                web_app=WebAppInfo(url=f"{DOMAIN}/webapp")
            )
        )
        asyncio.create_task(reminder_loop())
        
        try:
            await telegram_app.bot.send_message(
                chat_id=88504731,  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π user_id
                text="ü§ñ –ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ:", e)
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")

@app.api_route("/ping", methods=["GET", "POST", "HEAD"])
async def ping():
    return {"status": "ok"}

@app.get("/dashboard", include_in_schema=False)
async def dashboard_entry():
    return FileResponse("dashboard/index.html")

from scheduler import start_scheduler
start_scheduler()