#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —á–µ—Ä–µ–∑ SSH
"""

import subprocess
import sys
import os
import time

def run_ssh_command(command, timeout=30):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SSH"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sshpass –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª—è
        ssh_command = [
            'sshpass', '-p', 'YiKceHokjelen89',
            'ssh', '-o', 'StrictHostKeyChecking=no',
            'c107597@h60.netangels.ru',
            f'cd dialist.ru/app && {command}'
        ]
        
        print(f"üîó –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {command}")
        
        result = subprocess.run(
            ssh_command,
            capture_output=True,
            text=True,
            timeout=timeout
        )
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")
            return None
            
        return result.stdout.strip()
        
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã ({timeout}s)")
        return None
    except FileNotFoundError:
        print("‚ùå sshpass –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sshpass
        try:
            subprocess.run(['brew', 'install', 'sshpass'], check=True)
            return run_ssh_command(command, timeout)
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å sshpass")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
        return None

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    command = "ls -la"
    return run_ssh_command(command)

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—É navigation_items...")
    
    command = '''python3 -c "
import psycopg2
import os
from dotenv import load_dotenv

load_dotenv('.env')

try:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host=os.getenv('DB_HOST', 'postgres.c107597.h2'),
        database=os.getenv('DB_NAME', 'c107597_dialist_ru'),
        user=os.getenv('DB_USER', 'c107597_dialist_ru'),
        password=os.getenv('DB_PASSWORD'),
        port=os.getenv('DB_PORT', 5432)
    )
    
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute(\\\"\\\"\\\"
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'navigation_items'
        );
    \\\"\\\"\\\")
    table_exists = cursor.fetchone()[0]
    print(f'üìã –¢–∞–±–ª–∏—Ü–∞ navigation_items —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {table_exists}')
    
    if table_exists:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        cursor.execute(\\\"\\\"\\\"
            SELECT 
                id, title, url, icon, category, 
                sort_order, is_active, is_visible,
                parent_id, group_name
            FROM navigation_items 
            ORDER BY sort_order ASC, title ASC;
        \\\"\\\"\\\")
        rows = cursor.fetchall()
        
        print(f'üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ navigation_items: {len(rows)}')
        print('=' * 80)
        
        for row in rows:
            active_status = '‚úÖ' if row[6] else '‚ùå'
            visible_status = 'üëÅÔ∏è' if row[7] else 'üôà'
            print(f'ID: {row[0]:2} | {row[1]:20} | {row[2]:30} | {row[3]:3} | {active_status} {visible_status}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤–∏–¥–∏–º—ã–µ –∑–∞–ø–∏—Å–∏
        cursor.execute(\\\"\\\"\\\"
            SELECT COUNT(*) FROM navigation_items 
            WHERE is_active = true AND is_visible = true;
        \\\"\\\"\\\")
        active_count = cursor.fetchone()[0]
        print(f'\\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏ –≤–∏–¥–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_count}')
    
    cursor.close()
    conn.close()
    
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}')
    import traceback
    traceback.print_exc()
"'''
    
    return run_ssh_command(command)

def check_api_navigation():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    
    command = '''curl -s -X GET "http://localhost:8000/api/navigation?category=main" -H "Content-Type: application/json"'''
    
    return run_ssh_command(command)

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    command = "ps aux | grep python3 | grep -v grep"
    return run_ssh_command(command)

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏"""
    print("üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏...")
    
    command = "tail -n 30 nohup.out | grep -E '(navigation|Navigation|ERROR|‚ùå|API)'"
    return run_ssh_command(command)

def main():
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    structure = check_project_structure()
    if structure:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        print(structure[:500] + "..." if len(structure) > 500 else structure)
        print()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    status = check_server_status()
    if status:
        print("‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:")
        print(status)
        print()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    db_check = check_database_connection()
    if db_check:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î:")
        print(db_check)
        print()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_response = check_api_navigation()
    if api_response:
        print("‚úÖ API –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:")
        try:
            import json
            formatted = json.dumps(json.loads(api_response), indent=2, ensure_ascii=False)
            print(formatted)
        except:
            print(api_response)
        print()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    logs = check_logs()
    if logs:
        print("üìù –õ–æ–≥–∏:")
        print(logs)
        print()
    
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()