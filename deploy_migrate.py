#!/usr/bin/env python3
"""
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from dotenv import load_dotenv
load_dotenv()
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime

DATABASE_URL = os.getenv("DATABASE_URL")

def get_conn():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def check_migration_needed():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è"""
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ purchases
                cur.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'purchases'
                    );
                """)
                result = cur.fetchone()
                purchases_exists = result['exists'] if result else False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ type –≤ events
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'events' AND column_name = 'type';
                """)
                events_type_exists = cur.fetchone() is not None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("SELECT COUNT(*) as count FROM user_settings WHERE key = 'theme'")
                theme_settings_count = cur.fetchone()['count']
                
                return {
                    'purchases_table': purchases_exists,
                    'events_type_field': events_type_exists,
                    'user_settings': theme_settings_count > 0,
                    'migration_needed': not (purchases_exists and events_type_exists)
                }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return {'migration_needed': True, 'error': str(e)}

def run_migration():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                
                # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
                cur.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'purchases'
                    );
                """)
                result = cur.fetchone()
                purchases_exists = result['exists'] if result else False
                
                if not purchases_exists:
                    print("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases...")
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping
                    cur.execute("""
                        CREATE TABLE purchases AS 
                        SELECT 
                            id,
                            user_id,
                            project_id,
                            item as name,
                            quantity,
                            CASE 
                                WHEN status = '–ö—É–ø–ª–µ–Ω–æ' THEN true 
                                ELSE false 
                            END as completed,
                            created_at,
                            NULL::DECIMAL as price,
                            'other'::TEXT as category
                        FROM shopping;
                    """)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                    cur.execute("ALTER TABLE purchases ADD PRIMARY KEY (id);")
                    cur.execute("ALTER TABLE purchases ALTER COLUMN name SET NOT NULL;")
                    cur.execute("ALTER TABLE purchases ALTER COLUMN quantity SET NOT NULL;")
                    cur.execute("ALTER TABLE purchases ALTER COLUMN completed SET DEFAULT false;")
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ purchases —Å–æ–∑–¥–∞–Ω–∞")
                
                # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ events
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'events' AND column_name = 'type';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE events ADD COLUMN type TEXT DEFAULT 'other';")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ type –≤ events")
                
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'events' AND column_name = 'participants';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE events ADD COLUMN participants TEXT;")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ participants –≤ events")
                
                # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ tasks
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'tasks' AND column_name = 'category';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE tasks ADD COLUMN category TEXT DEFAULT 'general';")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ category –≤ tasks")
                
                # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                cur.execute("CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_purchases_completed ON purchases(completed);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_events_user_id ON events(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_events_start_at ON events(start_at);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_completed ON tasks(completed);")
                print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
                
                # 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                cur.execute("""
                    SELECT DISTINCT u.telegram_id 
                    FROM users u 
                    LEFT JOIN user_settings us ON u.telegram_id = us.user_id AND us.key = 'theme'
                    WHERE us.user_id IS NULL;
                """)
                users_without_theme = cur.fetchall()
                
                for user in users_without_theme:
                    user_id = user['telegram_id']
                    
                    cur.execute("""
                        INSERT INTO user_settings (user_id, key, value) 
                        VALUES (%s, 'theme', 'auto')
                        ON CONFLICT (user_id, key) DO NOTHING;
                    """, (user_id,))
                    
                    cur.execute("""
                        INSERT INTO user_settings (user_id, key, value) 
                        VALUES (%s, 'email_notifications', 'false')
                        ON CONFLICT (user_id, key) DO NOTHING;
                    """, (user_id,))
                    
                    cur.execute("""
                        INSERT INTO user_settings (user_id, key, value) 
                        VALUES (%s, 'task_reminders', 'true')
                        ON CONFLICT (user_id, key) DO NOTHING;
                    """, (user_id,))
                
                if users_without_theme:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {len(users_without_theme)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                conn.commit()
                print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        with get_conn() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
    status = check_migration_needed()
    
    if 'error' in status:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {status['error']}")
        sys.exit(1)
    
    if not status['migration_needed']:
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        print(f"   - –¢–∞–±–ª–∏—Ü–∞ purchases: {'‚úÖ' if status['purchases_table'] else '‚ùå'}")
        print(f"   - –ü–æ–ª–µ events.type: {'‚úÖ' if status['events_type_field'] else '‚ùå'}")
        print(f"   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if status['user_settings'] else '‚ùå'}")
        return
    
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞")
    print(f"   - –¢–∞–±–ª–∏—Ü–∞ purchases: {'‚úÖ' if status['purchases_table'] else '‚ùå —Ç—Ä–µ–±—É–µ—Ç—Å—è'}")
    print(f"   - –ü–æ–ª–µ events.type: {'‚úÖ' if status['events_type_field'] else '‚ùå —Ç—Ä–µ–±—É–µ—Ç—Å—è'}")
    print(f"   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if status['user_settings'] else '‚ùå —Ç—Ä–µ–±—É–µ—Ç—Å—è'}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = run_migration()
    
    if success:
        print("üéâ –î–µ–ø–ª–æ–π –≥–æ—Ç–æ–≤! Dashboard –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω.")
        sys.exit(0)
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

if __name__ == "__main__":
    main()