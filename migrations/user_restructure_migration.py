#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î!
"""

import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db import get_conn

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                cur.execute("CREATE SCHEMA IF NOT EXISTS backup")
                
                # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                tables = [
                    'users', 'events', 'notes', 'project_members', 'projects',
                    'purchases', 'reminder_logs', 'shopping', 'shopping_lists',
                    'tasks', 'user_settings'
                ]
                
                for table in tables:
                    cur.execute(f"""
                        CREATE TABLE backup.{table}_backup AS 
                        SELECT * FROM {table}
                    """)
                    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {table}")
                
                conn.commit()
                print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def run_migration_step(step_number, migration_file):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print(f"\\nüîÑ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ {step_number}...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        module_name = migration_file.replace('.py', '')
        module = __import__(f'scripts.{module_name}', fromlist=[''])
        
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
                module.upgrade(cur)
                conn.commit()
                
                print(f"‚úÖ –≠—Ç–∞–ø {step_number} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {step_number}: {e}")
        return False

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É users
                cur.execute("""
                    SELECT column_name, data_type, is_nullable 
                    FROM information_schema.columns 
                    WHERE table_name = 'users' 
                    ORDER BY ordinal_position
                """)
                users_columns = cur.fetchall()
                
                print("üìä –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
                for col in users_columns:
                    print(f"   - {col['column_name']} ({col['data_type']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("SELECT COUNT(*) as count FROM users")
                users_count = cur.fetchone()["count"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
                cur.execute("""
                    SELECT COUNT(*) as count
                    FROM tasks t
                    JOIN users u ON t.user_id = u.id
                """)
                linked_tasks = cur.fetchone()["count"]
                
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
                print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
                print(f"   - –ó–∞–¥–∞—á —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {linked_tasks}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
                cur.execute("""
                    SELECT 
                        tc.constraint_name,
                        tc.table_name,
                        kcu.column_name
                    FROM information_schema.table_constraints tc
                    JOIN information_schema.key_column_usage kcu 
                        ON tc.constraint_name = kcu.constraint_name
                    WHERE tc.constraint_type = 'FOREIGN KEY'
                    AND kcu.column_name IN ('user_id', 'owner_id')
                """)
                foreign_keys = cur.fetchall()
                
                print("üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
                for fk in foreign_keys:
                    print(f"   - {fk['table_name']}.{fk['column_name']} -> {fk['constraint_name']}")
                
                print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 60)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = input("‚ö†Ô∏è  –≠—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if not create_backup():
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –≠—Ç–∞–ø—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    migration_steps = [
        (1, "20250118_140000_user_restructure_step1_add_id.py"),
        (2, "20250118_141000_user_restructure_step2_temp_columns.py"),
        (3, "20250118_142000_user_restructure_step3_switch_columns.py"),
        (4, "20250118_143000_user_restructure_step4_finalize.py")
    ]
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
    for step_num, migration_file in migration_steps:
        if not run_migration_step(step_num, migration_file):
            print(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ {step_num}")
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if verify_migration():
        print("\\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìã –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        print("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")

if __name__ == "__main__":
    main()