#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î!
"""

import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db import get_conn

def print_rollback_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –æ—Ç–∫–∞—Ç–∞"""
    print("=" * 80)
    print("üîÑ –û–¢–ö–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò –†–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    print("üìÖ –î–∞—Ç–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("üéØ –¶–µ–ª—å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!")
    print("=" * 80)

def confirm_rollback():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞"""
    print("\n‚ùì –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞—Ç–∞:")
    print("1. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("2. –ü–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
    print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
    print("4. –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    print("\nüìã –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    print("2. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
    print("3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    response = input("\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç? –í–≤–µ–¥–∏—Ç–µ 'ROLLBACK' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    return response == 'ROLLBACK'

def check_backup_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É backup
                cur.execute("""
                    SELECT COUNT(*) as count
                    FROM information_schema.schemata 
                    WHERE schema_name = 'backup'
                """)
                schema_exists = cur.fetchone()["count"] > 0
                
                if not schema_exists:
                    print("‚ùå –°—Ö–µ–º–∞ backup –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                    SELECT table_name
                    FROM information_schema.tables 
                    WHERE table_schema = 'backup'
                    AND table_name LIKE '%_backup'
                """)
                backup_tables = cur.fetchall()
                
                if len(backup_tables) == 0:
                    print("‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    return False
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(backup_tables)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
                for table in backup_tables:
                    print(f"   - {table['table_name']}")
                
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def rollback_tables():
    """–û—Ç–∫–∞—Ç —Ç–∞–±–ª–∏—Ü –∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—è–º"""
    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    tables = [
        'users', 'events', 'notes', 'project_members', 'projects',
        'purchases', 'reminder_logs', 'shopping', 'shopping_lists',
        'tasks', 'user_settings'
    ]
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                for table in tables:
                    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                    cur.execute("""
                        SELECT COUNT(*) as count
                        FROM information_schema.tables 
                        WHERE table_schema = 'backup'
                        AND table_name = %s
                    """, (f"{table}_backup",))
                    
                    if cur.fetchone()["count"] == 0:
                        print(f"‚ö†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {table}_backup –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                        continue
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É
                    cur.execute(f"DROP TABLE IF EXISTS {table} CASCADE")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                    cur.execute(f"""
                        CREATE TABLE {table} AS 
                        SELECT * FROM backup.{table}_backup
                    """)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è users
                    if table == 'users':
                        cur.execute("""
                            ALTER TABLE users 
                            ADD CONSTRAINT users_pkey PRIMARY KEY (user_id)
                        """)
                    
                    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                
                conn.commit()
                print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def verify_rollback():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–∫–∞—Ç–∞...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É users
                cur.execute("""
                    SELECT column_name, data_type
                    FROM information_schema.columns 
                    WHERE table_name = 'users'
                    ORDER BY ordinal_position
                """)
                columns = cur.fetchall()
                
                print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞:")
                for col in columns:
                    print(f"   - {col['column_name']} ({col['data_type']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –∫–∞–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
                column_names = [col['column_name'] for col in columns]
                if "user_id" in column_names and "id" not in column_names:
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ users –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ users –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
                cur.execute("SELECT COUNT(*) as count FROM users")
                users_count = cur.fetchone()["count"]
                
                cur.execute("SELECT COUNT(*) as count FROM tasks")
                tasks_count = cur.fetchone()["count"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
                cur.execute("""
                    SELECT COUNT(*) as count
                    FROM tasks t
                    JOIN users u ON t.user_id = u.user_id
                """)
                linked_tasks = cur.fetchone()["count"]
                
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞:")
                print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
                print(f"   - –ó–∞–¥–∞—á: {tasks_count}")
                print(f"   - –ó–∞–¥–∞—á —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {linked_tasks}")
                
                if linked_tasks == tasks_count:
                    print("‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏")
                
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–∞—Ç–∞: {e}")
        return False

def cleanup_backup_schema():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ö–µ–º—ã backup –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞"""
    response = input("\n‚ùì –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã? (y/n): ")
    if response.lower() != 'y':
        print("‚ÑπÔ∏è  –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("DROP SCHEMA IF EXISTS backup CASCADE")
                conn.commit()
                print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {e}")

def restore_code():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞"""
    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    backup_file = "/Users/d.dubenetskiy/Documents/tg_project/db.py.backup"
    main_file = "/Users/d.dubenetskiy/Documents/tg_project/db.py"
    
    try:
        if os.path.exists(backup_file):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            os.rename(main_file, f"{main_file}.after_migration")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            os.rename(backup_file, main_file)
            
            print("‚úÖ –ö–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            print(f"‚ÑπÔ∏è  –¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ db.py.after_migration")
        else:
            print("‚ö†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞"""
    print_rollback_banner()
    
    if not confirm_rollback():
        print("‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    if not check_backup_tables():
        print("‚ùå –û—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω - –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        return
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    if not rollback_tables():
        print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not verify_rollback():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
    restore_code()
    
    print("\n" + "=" * 80)
    print("‚úÖ –û–¢–ö–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 80)
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("2. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("3. ‚úÖ –£–≤–µ–¥–æ–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")
    print("4. ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞—Ç–∞")
    print("5. ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    cleanup_backup_schema()
    
    print("\nüéØ –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

if __name__ == "__main__":
    main()