#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
–î–∞—Ç–∞: 2025-01-19 12:00:00
–û–ø–∏—Å–∞–Ω–∏–µ: –£–ø—Ä–æ—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É navigation_items –¥–æ 7 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
"""

import psycopg2
import os
from datetime import datetime

def up(cursor):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    
    # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS navigation_items_new (
            id SERIAL PRIMARY KEY,
            title VARCHAR(100) NOT NULL,                    -- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
            url VARCHAR(255) NOT NULL,                      -- –°—Å—ã–ª–∫–∞
            platform VARCHAR(20) NOT NULL DEFAULT 'webapp', -- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: dashboard –∏–ª–∏ webapp
            sort_order INTEGER DEFAULT 0,                  -- –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            parent_id INTEGER DEFAULT NULL,                -- –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–Ω–∞ –±—É–¥—É—â–µ–µ)
            is_active BOOLEAN DEFAULT TRUE,                 -- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç)
            
            -- –ò–Ω–¥–µ–∫—Å—ã
            FOREIGN KEY (parent_id) REFERENCES navigation_items_new(id) ON DELETE CASCADE
        );
    """)
    
    # 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_navigation_new_platform ON navigation_items_new(platform);
        CREATE INDEX IF NOT EXISTS idx_navigation_new_sort_order ON navigation_items_new(sort_order);
        CREATE INDEX IF NOT EXISTS idx_navigation_new_active ON navigation_items_new(is_active);
        CREATE INDEX IF NOT EXISTS idx_navigation_new_parent ON navigation_items_new(parent_id);
    """)
    
    # 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    cursor.execute("""
        INSERT INTO navigation_items_new (id, title, url, platform, sort_order, parent_id, is_active)
        SELECT 
            id,
            title,
            url,
            CASE 
                WHEN url LIKE '/dashboard/%' THEN 'dashboard'
                ELSE 'webapp'
            END as platform,
            sort_order,
            parent_id,
            is_active
        FROM navigation_items
        WHERE is_active = true
        ORDER BY sort_order;
    """)
    
    # 4. –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute("SELECT MAX(id) AS max_id FROM navigation_items_new;")
    row = cursor.fetchone()
    max_id = row['max_id'] if isinstance(row, dict) else (row[0] if row else None)
    if max_id:
        cursor.execute(f"SELECT setval('navigation_items_new_id_seq', {int(max_id)});")
    
    # 5. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("DROP TABLE IF EXISTS navigation_items_old;")
    cursor.execute("ALTER TABLE navigation_items RENAME TO navigation_items_old;")
    cursor.execute("ALTER TABLE navigation_items_new RENAME TO navigation_items;")
    
    # 6. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT 1 FROM pg_class WHERE relkind = 'S' AND relname = 'navigation_items_new_id_seq'
            ) THEN
                ALTER SEQUENCE navigation_items_new_id_seq RENAME TO navigation_items_id_seq;
            END IF;
        END $$;
    """)
    
    # 7. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    cursor.execute("""
        COMMENT ON TABLE navigation_items IS '–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è dashboard –∏ webapp';
        COMMENT ON COLUMN navigation_items.platform IS '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: dashboard –∏–ª–∏ webapp';
        COMMENT ON COLUMN navigation_items.sort_order IS '–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ)';
        COMMENT ON COLUMN navigation_items.parent_id IS 'ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏';
        COMMENT ON COLUMN navigation_items.is_active IS '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç)';
    """)
    
    # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (RealDictCursor —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    cursor.execute("SELECT COUNT(*) AS cnt FROM navigation_items;")
    row = cursor.fetchone()
    total_count = row['cnt'] if isinstance(row, dict) else (row[0] if row else 0)
    
    cursor.execute("SELECT COUNT(*) AS cnt FROM navigation_items WHERE platform = 'dashboard';")
    row = cursor.fetchone()
    dashboard_count = row['cnt'] if isinstance(row, dict) else (row[0] if row else 0)
    
    cursor.execute("SELECT COUNT(*) AS cnt FROM navigation_items WHERE platform = 'webapp';")
    row = cursor.fetchone()
    webapp_count = row['cnt'] if isinstance(row, dict) else (row[0] if row else 0)
    
    print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {total_count}")
    print(f"üñ•Ô∏è  Dashboard —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {dashboard_count}")
    print(f"üì± WebApp —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {webapp_count}")
    
    return True

def down(cursor):
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —É–ø—Ä–æ—â–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("DROP TABLE IF EXISTS navigation_items;")
    cursor.execute("ALTER TABLE navigation_items_old RENAME TO navigation_items;")
    
    print("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

if __name__ == "__main__":
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Docker)
        conn = psycopg2.connect(
            host="localhost",
            database="telegram_app", 
            user="postgres",
            password="postgres",
            port=5432
        )
        
        cursor = conn.cursor()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        if run_migration(cursor):
            conn.commit()
            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            conn.rollback()
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        if 'conn' in locals():
            conn.rollback()
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()