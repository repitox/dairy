"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
–≠—Ç–∞–ø 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
"""

def upgrade(cursor):
    print("üîÑ –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º user_id –≤ telegram_id, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –µ—â—ë –µ—Å—Ç—å
    cursor.execute(
        """
        DO $$
        BEGIN
            IF EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'user_id'
            ) THEN
                ALTER TABLE users RENAME COLUMN user_id TO telegram_id;
            END IF;
        END $$;
        """
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    cursor.execute("""
        DO $$
        BEGIN
            IF EXISTS (
                SELECT 1 FROM pg_constraint c
                JOIN pg_class t ON c.conrelid = t.oid
                WHERE t.relname = 'users' AND c.conname = 'users_pkey'
            ) THEN
                ALTER TABLE users DROP CONSTRAINT users_pkey;
            END IF;
        END $$;
    """)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    cursor.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_constraint c
                JOIN pg_class t ON c.conrelid = t.oid
                WHERE t.relname = 'users' AND c.conname = 'users_pkey'
            ) THEN
                ALTER TABLE users ADD CONSTRAINT users_pkey PRIMARY KEY (id);
            END IF;
        END $$;
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è telegram_id
    cursor.execute("""
        DROP INDEX IF EXISTS idx_users_telegram_id
    """)
    cursor.execute("""
        CREATE UNIQUE INDEX idx_users_telegram_id 
        ON users(telegram_id)
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    foreign_keys = [
        ('events', 'user_id', 'fk_events_user_id'),
        ('notes', 'user_id', 'fk_notes_user_id'),
        ('project_members', 'user_id', 'fk_project_members_user_id'),
        ('projects', 'owner_id', 'fk_projects_owner_id'),
        ('purchases', 'user_id', 'fk_purchases_user_id'),
        ('reminder_logs', 'user_id', 'fk_reminder_logs_user_id'),
        ('shopping', 'user_id', 'fk_shopping_user_id'),
        ('shopping_lists', 'user_id', 'fk_shopping_lists_user_id'),
        ('tasks', 'user_id', 'fk_tasks_user_id'),
        ('user_settings', 'user_id', 'fk_user_settings_user_id')
    ]
    
    for table_name, column_name, constraint_name in foreign_keys:
        cursor.execute(f"""
            ALTER TABLE {table_name} 
            ADD CONSTRAINT {constraint_name} 
            FOREIGN KEY ({column_name}) 
            REFERENCES users(id) 
            ON DELETE CASCADE
        """)
        print(f"‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {table_name}.{column_name}")
    
    print("‚úÖ –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìä –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print("   - users.id (PRIMARY KEY, SERIAL)")
    print("   - users.telegram_id (UNIQUE, bigint)")
    print("   - –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–µ—Ä—å —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ users.id")

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MigrationManager

def up(cursor):
    return upgrade(cursor)


def down(cursor):
    return downgrade(cursor)


def downgrade(cursor):
    print("üîÑ –û—Ç–∫–∞—Ç: –£–¥–∞–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    
    # –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    foreign_keys = [
        ('events', 'fk_events_user_id'),
        ('notes', 'fk_notes_user_id'),
        ('project_members', 'fk_project_members_user_id'),
        ('projects', 'fk_projects_owner_id'),
        ('purchases', 'fk_purchases_user_id'),
        ('reminder_logs', 'fk_reminder_logs_user_id'),
        ('shopping', 'fk_shopping_user_id'),
        ('shopping_lists', 'fk_shopping_lists_user_id'),
        ('tasks', 'fk_tasks_user_id'),
        ('user_settings', 'fk_user_settings_user_id')
    ]
    
    for table_name, constraint_name in foreign_keys:
        cursor.execute(f"ALTER TABLE {table_name} DROP CONSTRAINT IF EXISTS {constraint_name}")
    
    print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")