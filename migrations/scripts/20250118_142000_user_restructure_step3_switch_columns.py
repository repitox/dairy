"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
–≠—Ç–∞–ø 3: –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–≤—ã–µ
"""

def upgrade(cursor):
    print("üîÑ –≠—Ç–∞–ø 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    tables_to_update = [
        ('events', 'user_id'),
        ('notes', 'user_id'),
        ('project_members', 'user_id'),
        ('projects', 'owner_id'),
        ('purchases', 'user_id'),
        ('reminder_logs', 'user_id'),
        ('shopping', 'user_id'),
        ('shopping_lists', 'user_id'),
        ('tasks', 'user_id'),
        ('user_settings', 'user_id')
    ]
    
    for table_name, column_name in tables_to_update:
        # –ï—Å–ª–∏ –µ—Å—Ç—å temp_user_id, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –∏ –Ω–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–ª—é
        cursor.execute("SELECT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='user_id') AS exists")
        user_id_exists = bool(cursor.fetchone()['exists'])
        cursor.execute("SELECT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='telegram_id') AS exists")
        telegram_id_exists = bool(cursor.fetchone()['exists'])
        cursor.execute("SELECT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name=%s AND column_name='temp_user_id') AS exists", (table_name,))
        temp_exists = bool(cursor.fetchone()['exists'])
        join_field = 'user_id' if user_id_exists else ('telegram_id' if telegram_id_exists else None)
        if temp_exists and join_field:
            cursor.execute(f"""
                UPDATE {table_name} t
                SET temp_user_id = u.id
                FROM users u
                WHERE t.temp_user_id IS NULL
                  AND t.{column_name} = u.{join_field}
            """)

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute(f"""
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = '{table_name}' AND column_name = '{column_name}'
                ) THEN
                    ALTER TABLE {table_name} DROP COLUMN {column_name};
                END IF;
            END $$;
        """)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ –Ω–µ—Ç
        cursor.execute(f"""
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = '{table_name}' AND column_name = 'temp_user_id'
                ) AND NOT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = '{table_name}' AND column_name = '{column_name}'
                ) THEN
                    ALTER TABLE {table_name} RENAME COLUMN temp_user_id TO {column_name};
                END IF;
            END $$;
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º NOT NULL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç NULL-–∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute(f"SELECT COUNT(*) AS cnt FROM {table_name} WHERE {column_name} IS NULL")
        row = cursor.fetchone()
        nulls = row['cnt'] if isinstance(row, dict) else (row[0] if row else 0)
        if nulls == 0:
            cursor.execute(f"ALTER TABLE {table_name} ALTER COLUMN {column_name} SET NOT NULL")
        
        print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
    
    print("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MigrationManager

def up(cursor):
    return upgrade(cursor)


def down(cursor):
    return downgrade(cursor)

def downgrade(cursor):
    print("üîÑ –û—Ç–∫–∞—Ç: –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—ã–º –∫–æ–ª–æ–Ω–∫–∞–º")
    
    # –û—Ç–∫–∞—Ç —Å–ª–æ–∂–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    print("‚ö†Ô∏è  –û—Ç–∫–∞—Ç —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")