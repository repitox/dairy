#!/usr/bin/env python3
"""
üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ø—Ä–æ–¥–∞–∫—à–Ω
"""

import os
import sys
import importlib.util
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime
from typing import List, Dict, Any
import glob

class MigrationManager:
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.migrations_dir = os.path.join(os.path.dirname(__file__), 'scripts')
        self.ensure_migrations_table()
    
    def get_conn(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        return psycopg2.connect(self.database_url, cursor_factory=RealDictCursor)
    
    def ensure_migrations_table(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            with self.get_conn() as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        CREATE TABLE IF NOT EXISTS schema_migrations (
                            id SERIAL PRIMARY KEY,
                            version VARCHAR(255) UNIQUE NOT NULL,
                            name TEXT NOT NULL,
                            executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            checksum TEXT
                        );
                    """)
                    conn.commit()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            raise
    
    def get_executed_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            with self.get_conn() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT version FROM schema_migrations ORDER BY version")
                    return [row['version'] for row in cur.fetchall()]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return []
    
    def get_available_migrations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        migrations = []
        pattern = os.path.join(self.migrations_dir, "*.py")
        
        for file_path in sorted(glob.glob(pattern)):
            filename = os.path.basename(file_path)
            if filename.startswith('__'):
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYYMMDD_HHMMSS_name.py)
            version = filename.split('_')[0] + '_' + filename.split('_')[1]
            name = '_'.join(filename.split('_')[2:]).replace('.py', '')
            
            migrations.append({
                'version': version,
                'name': name,
                'filename': filename,
                'path': file_path
            })
        
        return migrations
    
    def get_pending_migrations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        executed = set(self.get_executed_migrations())
        available = self.get_available_migrations()
        
        return [m for m in available if m['version'] not in executed]
    
    def execute_migration(self, migration: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é"""
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: {migration['version']} - {migration['name']}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
            spec = importlib.util.spec_from_file_location(
                f"migration_{migration['version']}", 
                migration['path']
            )
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            if hasattr(module, 'up'):
                with self.get_conn() as conn:
                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        with conn.cursor() as cur:
                            module.up(cur)
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
                            cur.execute("""
                                INSERT INTO schema_migrations (version, name)
                                VALUES (%s, %s)
                            """, (migration['version'], migration['name']))
                            
                        conn.commit()
                        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration['version']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        return True
                        
                    except Exception as e:
                        conn.rollback()
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}: {e}")
                        return False
            else:
                print(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è {migration['version']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é up()")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}: {e}")
            return False
    
    def rollback_migration(self, migration: Dict[str, Any]) -> bool:
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        print(f"üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: {migration['version']} - {migration['name']}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
            spec = importlib.util.spec_from_file_location(
                f"migration_{migration['version']}", 
                migration['path']
            )
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            if hasattr(module, 'down'):
                with self.get_conn() as conn:
                    try:
                        with conn.cursor() as cur:
                            module.down(cur)
                            
                            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
                            cur.execute("""
                                DELETE FROM schema_migrations 
                                WHERE version = %s
                            """, (migration['version'],))
                            
                        conn.commit()
                        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration['version']} –æ—Ç–∫–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        return True
                        
                    except Exception as e:
                        conn.rollback()
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}: {e}")
                        return False
            else:
                print(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è {migration['version']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é down()")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}: {e}")
            return False
    
    def migrate(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        pending = self.get_pending_migrations()
        
        if not pending:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return True
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending)} –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π:")
        for migration in pending:
            print(f"   - {migration['version']}: {migration['name']}")
        
        success_count = 0
        for migration in pending:
            if self.execute_migration(migration):
                success_count += 1
            else:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}")
                break
        
        if success_count == len(pending):
            print(f"üéâ –í—Å–µ {success_count} –º–∏–≥—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count} –∏–∑ {len(pending)} –º–∏–≥—Ä–∞—Ü–∏–π")
            return False
    
    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        executed = set(self.get_executed_migrations())
        available = self.get_available_migrations()
        pending = self.get_pending_migrations()
        
        print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available)}")
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(executed)}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(pending)}")
        
        if pending:
            print("\nüìã –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in pending:
                print(f"   ‚ùå {migration['version']}: {migration['name']}")
        
        if available:
            print("\nüìã –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in available:
                status = "‚úÖ" if migration['version'] in executed else "‚ùå"
                print(f"   {status} {migration['version']}: {migration['name']}")
    
    def create_schema_dump(self, output_file: str = None):
        """–°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø —Å—Ö–µ–º—ã –ë–î"""
        if not output_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"schema_dump_{timestamp}.sql"
        
        try:
            with self.get_conn() as conn:
                with conn.cursor() as cur:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    cur.execute("""
                        SELECT table_name 
                        FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        ORDER BY table_name
                    """)
                    tables = [row['table_name'] for row in cur.fetchall()]
                    
                    schema_sql = []
                    schema_sql.append("-- –î–∞–º–ø —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    schema_sql.append(f"-- –°–æ–∑–¥–∞–Ω: {datetime.now().isoformat()}")
                    schema_sql.append("")
                    
                    for table in tables:
                        # –ü–æ–ª—É—á–∞–µ–º DDL –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
                        cur.execute(f"""
                            SELECT column_name, data_type, is_nullable, column_default
                            FROM information_schema.columns
                            WHERE table_name = '{table}'
                            ORDER BY ordinal_position
                        """)
                        columns = cur.fetchall()
                        
                        schema_sql.append(f"-- –¢–∞–±–ª–∏—Ü–∞: {table}")
                        schema_sql.append(f"CREATE TABLE IF NOT EXISTS {table} (")
                        
                        column_defs = []
                        for col in columns:
                            col_def = f"    {col['column_name']} {col['data_type']}"
                            if col['is_nullable'] == 'NO':
                                col_def += " NOT NULL"
                            if col['column_default']:
                                col_def += f" DEFAULT {col['column_default']}"
                            column_defs.append(col_def)
                        
                        schema_sql.append(",\n".join(column_defs))
                        schema_sql.append(");")
                        schema_sql.append("")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("\n".join(schema_sql))
            
            print(f"‚úÖ –î–∞–º–ø —Å—Ö–µ–º—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_file}")
            return output_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ —Å—Ö–µ–º—ã: {e}")
            return None


def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python migration_manager.py migrate    - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("  python migration_manager.py status     - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  python migration_manager.py dump       - —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø —Å—Ö–µ–º—ã")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        sys.exit(1)
    
    manager = MigrationManager(database_url)
    command = sys.argv[1]
    
    if command == "migrate":
        success = manager.migrate()
        sys.exit(0 if success else 1)
    elif command == "status":
        manager.status()
    elif command == "dump":
        manager.create_schema_dump()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)


if __name__ == "__main__":
    main()