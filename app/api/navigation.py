"""
API –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""
from fastapi import APIRouter, HTTPException
from app.database.repositories.user_repository import user_repository

router = APIRouter()


@router.get("/navigation")
async def get_navigation(category: str = "main", user_id: int = None):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if category == "main":
            navigation = [
                {
                    "id": "dashboard",
                    "title": "–ì–ª–∞–≤–Ω–∞—è",
                    "icon": "üè†",
                    "url": "/dashboard/main.html",
                    "active": True
                },
                {
                    "id": "tasks",
                    "title": "–ó–∞–¥–∞—á–∏",
                    "icon": "‚úÖ",
                    "url": "/dashboard/tasks.html",
                    "active": False
                },
                {
                    "id": "events",
                    "title": "–°–æ–±—ã—Ç–∏—è",
                    "icon": "üìÖ",
                    "url": "/dashboard/events.html",
                    "active": False
                },
                {
                    "id": "shopping",
                    "title": "–ü–æ–∫—É–ø–∫–∏",
                    "icon": "üõí",
                    "url": "/dashboard/shopping.html",
                    "active": False
                },
                {
                    "id": "projects",
                    "title": "–ü—Ä–æ–µ–∫—Ç—ã",
                    "icon": "üìÅ",
                    "url": "/dashboard/projects.html",
                    "active": False
                },
                {
                    "id": "notes",
                    "title": "–ó–∞–º–µ—Ç–∫–∏",
                    "icon": "üìù",
                    "url": "/dashboard/notes.html",
                    "active": False
                }
            ]
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if user_id:
                db_user_id = user_repository.resolve_user_id(user_id)
                if db_user_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ (–ø–æ–∫–∞ 0)
                    for item in navigation:
                        if item["id"] in ["tasks", "events", "shopping"]:
                            item["count"] = 0
            
            return navigation
        
        # –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        elif category == "settings":
            return [
                {
                    "id": "profile",
                    "title": "–ü—Ä–æ—Ñ–∏–ª—å",
                    "icon": "üë§",
                    "url": "/dashboard/profile.html"
                },
                {
                    "id": "notifications",
                    "title": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "icon": "üîî",
                    "url": "/dashboard/notifications.html"
                },
                {
                    "id": "theme",
                    "title": "–¢–µ–º–∞",
                    "icon": "üé®",
                    "url": "/dashboard/theme.html"
                }
            ]
        
        else:
            return []
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching navigation: {str(e)}")


@router.get("/user/validate")
async def validate_user(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db_user_id = user_repository.resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        settings = user_repository.get_user_settings(db_user_id)
        
        return {
            "valid": True,
            "user_id": user_id,
            "db_id": db_user_id,
            "settings": settings,
            "status": "active"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error validating user: {str(e)}")


@router.get("/dashboard/stats")
async def get_dashboard_stats(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        db_user_id = user_repository.resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ–∫–∞ –±–µ–∑ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        return {
            "tasks": {
                "total": 0,
                "active": 0,
                "completed": 0
            },
            "events": {
                "total": 0,
                "upcoming": 0
            },
            "shopping": {
                "total": 0,
                "pending": 0
            },
            "user": {
                "id": user_id,
                "db_id": db_user_id,
                "status": "active"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching dashboard stats: {str(e)}")