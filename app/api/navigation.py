"""
API –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""
from fastapi import APIRouter, HTTPException
from app.database.repositories.user_repository import user_repository

router = APIRouter()


@router.get("/navigation")
async def get_navigation(category: str = "main", user_id: int = None):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ë–î (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ c platform)."""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–æ–≤–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
        from app.database.connection import get_db_cursor

        # –ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã dashboard
        with get_db_cursor() as cur:
            cur.execute(
                """
                SELECT id, title, url, platform, sort_order, parent_id, is_active
                FROM navigation_items
                WHERE platform = 'dashboard' AND is_active = TRUE
                ORDER BY sort_order ASC, title ASC
                """
            )
            rows = cur.fetchall()

        # –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ (—Ç–∞–∫ –∫–∞–∫ –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–µ—Ç –ø–æ–ª—è icon)
        def pick_icon(title: str) -> str:
            t = (title or '').lower()
            if '–≥–ª–∞–≤–Ω' in t or 'home' in t: return 'üè†'
            if '–∑–∞–¥–∞—á' in t or 'task' in t: return '‚úÖ'
            if '–≤—Å—Ç—Ä–µ—á' in t or '—Å–æ–±—ã—Ç' in t or 'event' in t: return 'üìÖ'
            if '–¥–Ω' in t and '—Ä–æ–∂–¥–µ–Ω' in t: return 'üéÇ'
            if '–ø–æ–∫—É–ø' in t or 'shop' in t: return 'üõí'
            if '–ø—Ä–æ–µ–∫—Ç' in t or 'project' in t: return 'üìÅ'
            if '–∑–∞–º–µ—Ç' in t or 'note' in t: return 'üìù'
            if '–Ω–∞—Å—Ç—Ä–æ–π' in t or 'settings' in t: return '‚öôÔ∏è'
            if 'ui' in t or 'kit' in t: return 'üé®'
            return '‚Ä¢'

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–æ–º
        items = []
        by_parent = {}
        for r in rows:
            item = {
                "id": r["id"],
                "title": r["title"],
                "url": r["url"],
                "icon": pick_icon(r["title"]),
                "sort_order": r["sort_order"],
                "parent_id": r["parent_id"],
            }
            items.append(item)
            if r["parent_id"]:
                by_parent.setdefault(r["parent_id"], []).append(item)

        # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
        top_level = []
        for it in items:
            if it["parent_id"] is None:
                it["children"] = by_parent.get(it["id"], [])
                top_level.append(it)

        return top_level
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching navigation: {str(e)}")


@router.get("/user/validate")
async def validate_user(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db_user_id = user_repository.resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        settings = user_repository.get_user_settings(db_user_id)
        
        return {
            "valid": True,
            "user_id": user_id,
            "db_id": db_user_id,
            "settings": settings,
            "status": "active"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error validating user: {str(e)}")


@router.get("/dashboard/stats")
async def get_dashboard_stats(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        db_user_id = user_repository.resolve_user_id(user_id)
        if not db_user_id:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ–∫–∞ –±–µ–∑ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        return {
            "tasks": {
                "total": 0,
                "active": 0,
                "completed": 0
            },
            "events": {
                "total": 0,
                "upcoming": 0
            },
            "shopping": {
                "total": 0,
                "pending": 0
            },
            "user": {
                "id": user_id,
                "db_id": db_user_id,
                "status": "active"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching dashboard stats: {str(e)}")
