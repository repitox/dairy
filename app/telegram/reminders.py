"""
–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
"""
import asyncio
from datetime import datetime, timedelta
from telegram import Bot

from app.core.config import settings
from app.database.connection import get_db_cursor
from app.database.repositories.user_repository import user_repository
from app.utils.datetime_utils import format_datetime_for_user


async def reminder_loop():
    """–¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
    while True:
        now = datetime.utcnow()
        check_time = now + timedelta(minutes=60)
        now_iso = now.isoformat()
        check_iso = check_time.isoformat()

        with get_db_cursor() as cur:
            # –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—Ç—É—é—Ç —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç (–ø–ª—é—Å/–º–∏–Ω—É—Å 1 –º–∏–Ω—É—Ç–∞)
            cur.execute("""
                SELECT id, title, location, start_at
                FROM events
                WHERE active = TRUE
                AND start_at BETWEEN %s AND %s
            """, (now_iso, check_iso))
            events = cur.fetchall()

            cur.execute("SELECT telegram_id FROM users")
            users = [u["telegram_id"] for u in cur.fetchall()]

        if not users:
            _log_event("info", "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        if not events:
            _log_event("info", "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

        bot = Bot(token=settings.BOT_TOKEN)

        for event in events:
            for user_id in users:
                if _has_reminder_been_sent(user_id, event["id"]):
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_tz_offset = user_repository.get_user_setting(user_id, "timezone") or "0"
                
                # –ü–∞—Ä—Å–∏–º UTC –¥–∞—Ç—É –∏–∑ –ë–î
                try:
                    utc_start = datetime.fromisoformat(event["start_at"].replace('Z', ''))
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    formatted_time = format_datetime_for_user(utc_start, user_tz_offset, "full")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è {event['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
                    try:
                        start = datetime.fromisoformat(event["start_at"])
                        offset_hours = int(user_tz_offset) if user_tz_offset.isdigit() or user_tz_offset.startswith('-') else 0
                        user_time = start + timedelta(hours=offset_hours)
                        formatted_time = user_time.strftime("%d.%m.%y %H:%M")
                    except Exception:
                        formatted_time = event["start_at"]

                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                            f"üìÖ –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
                            f"¬´{event['title']}¬ª\n"
                            f"üïí {formatted_time}\n"
                            f"üìç {event['location']}"
                        )
                    )
                    _log_event("reminder", f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Å–æ–±—ã—Ç–∏–∏ '{event['title']}'")
                    _record_reminder_sent(user_id, event["id"])
                except Exception as e:
                    _log_event("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {type(e).__name__} ‚Äî {e}")
        
        await asyncio.sleep(60)


def _has_reminder_been_sent(user_id: int, event_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    with get_db_cursor() as cur:
        cur.execute("""
            SELECT COUNT(*) as count FROM reminder_logs 
            WHERE user_id = %s AND event_id = %s
        """, (user_id, event_id))
        result = cur.fetchone()
        return result['count'] > 0


def _record_reminder_sent(user_id: int, event_id: int):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    with get_db_cursor() as cur:
        cur.execute("""
            INSERT INTO reminder_logs (user_id, event_id, sent_at)
            VALUES (%s, %s, %s)
        """, (user_id, event_id, datetime.utcnow().isoformat()))


def _log_event(event_type: str, message: str):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥"""
    with get_db_cursor() as cur:
        cur.execute("""
            INSERT INTO logs (type, message, created_at)
            VALUES (%s, %s, %s)
        """, (event_type, message, datetime.utcnow().isoformat()))"""
–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
"""
import asyncio
from datetime import datetime, timedelta
from telegram import Bot

from app.core.config import settings
from app.database.connection import get_db_cursor
from app.database.repositories.user_repository import user_repository


async def reminder_loop():
    """–¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
    while True:
        now = datetime.utcnow()
        check_time = now + timedelta(minutes=60)
        now_iso = now.isoformat()
        check_iso = check_time.isoformat()

        with get_db_cursor() as cur:
            # –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—Ç—É—é—Ç —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç (–ø–ª—é—Å/–º–∏–Ω—É—Å 1 –º–∏–Ω—É—Ç–∞)
            cur.execute("""
                SELECT id, title, location, start_at
                FROM events
                WHERE active = TRUE
                AND start_at BETWEEN %s AND %s
            """, (now_iso, check_iso))
            events = cur.fetchall()

            cur.execute("SELECT telegram_id FROM users")
            users = [u["telegram_id"] for u in cur.fetchall()]

        if not users:
            _log_event("info", "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        if not events:
            _log_event("info", "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

        bot = Bot(token=settings.BOT_TOKEN)

        for event in events:
            for user_id in users:
                if _has_reminder_been_sent(user_id, event["id"]):
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_tz_offset = user_repository.get_user_setting(user_id, "timezone") or "0"
                
                # –ü–∞—Ä—Å–∏–º UTC –¥–∞—Ç—É –∏–∑ –ë–î
                try:
                    utc_start = datetime.fromisoformat(event["start_at"].replace('Z', ''))
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    formatted_time = format_datetime_for_user(utc_start, user_tz_offset, "full")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è {event['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
                    try:
                        start = datetime.fromisoformat(event["start_at"])
                        offset_hours = int(user_tz_offset) if user_tz_offset.isdigit() or user_tz_offset.startswith('-') else 0
                        user_time = start + timedelta(hours=offset_hours)
                        formatted_time = user_time.strftime("%d.%m.%y %H:%M")
                    except Exception:
                        formatted_time = event["start_at"]

                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                            f"üìÖ –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
                            f"¬´{event['title']}¬ª\n"
                            f"üïí {formatted_time}\n"
                            f"üìç {event['location']}"
                        )
                    )
                    _log_event("reminder", f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Å–æ–±—ã—Ç–∏–∏ '{event['title']}'")
                    _record_reminder_sent(user_id, event["id"])
                except Exception as e:
                    _log_event("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {type(e).__name__} ‚Äî {e}")
        
        await asyncio.sleep(60)


def _has_reminder_been_sent(user_id: int, event_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    with get_db_cursor() as cur:
        cur.execute("""
            SELECT COUNT(*) as count FROM reminder_logs 
            WHERE user_id = %s AND event_id = %s
        """, (user_id, event_id))
        result = cur.fetchone()
        return result['count'] > 0


def _record_reminder_sent(user_id: int, event_id: int):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    with get_db_cursor() as cur:
        cur.execute("""
            INSERT INTO reminder_logs (user_id, event_id, sent_at)
            VALUES (%s, %s, %s)
        """, (user_id, event_id, datetime.utcnow().isoformat()))


def _log_event(event_type: str, message: str):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥"""
    with get_db_cursor() as cur:
        cur.execute("""
            INSERT INTO logs (type, message, created_at)
            VALUES (%s, %s, %s)
        """, (event_type, message, datetime.utcnow().isoformat()))