"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –∫–æ–º–∞–Ω–¥
"""
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes

from app.core.config import settings
from app.database.repositories.user_repository import user_repository


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    with open("/tmp/webhook_debug.log", "a") as f:
        f.write(f"‚ö°Ô∏è START HANDLER CALLED {datetime.utcnow().isoformat()}\n")
    
    print("‚ö°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω")
    user = update.effective_user
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user.id, user.username)
    
    with open("/tmp/webhook_debug.log", "a") as f:
        f.write(f"üë§ User: ID={user.id}, username={user.username}, first_name={user.first_name}\n")
    
    try:
        result = user_repository.add_user(
            telegram_id=user.id,
            first_name=user.first_name or "",
            username=user.username or ""
        )
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"‚úÖ add_user result: {result}\n")
            
    except Exception as e:
        with open("/tmp/webhook_debug.log", "a") as f:
            f.write(f"‚ùå add_user error: {e}\n")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    keyboard = [[
        InlineKeyboardButton(
            "–û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=f"{settings.DOMAIN}/webapp")
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)
    
    with open("/tmp/webhook_debug.log", "a") as f:
        f.write(f"‚úÖ START HANDLER COMPLETED\n\n")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    if query.data == 'show_hello':
        await query.edit_message_text("Hello, World!")


async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üì© test_notify –≤—ã–∑–≤–∞–Ω –æ—Ç:", update.effective_user.id)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


def setup_handlers(telegram_app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CallbackQueryHandler(button_handler))
    telegram_app.add_handler(CommandHandler("test_notify", test_notify))