"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
from typing import Optional, Dict
from datetime import datetime
import psycopg2.extras

from app.database.connection import get_db_cursor
from app.database.models.user import User, UserSetting


class UserRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def add_user(self, telegram_id: int, first_name: str, username: str) -> Optional[int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏.
        telegram_id - —ç—Ç–æ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        print(f"üóÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}, {first_name}, {username}")
        
        with get_db_cursor() as cur:
            try:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                cur.execute("""
                    INSERT INTO users (telegram_id, first_name, username, registered_at)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (telegram_id) DO NOTHING
                    RETURNING id;
                """, (telegram_id, first_name, username, datetime.utcnow().isoformat()))
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–≤—ã–π –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
                result = cur.fetchone()
                if result:
                    internal_user_id = result['id']
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={internal_user_id}")
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                    cur.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
                    internal_user_id = cur.fetchone()['id']
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å id={internal_user_id}")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
                self._create_personal_project_if_not_exists(cur, internal_user_id)
                
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                return internal_user_id
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)
                return None
    
    def _create_personal_project_if_not_exists(self, cur, internal_user_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
        cur.execute("SELECT id FROM projects WHERE owner_id = %s AND name = '–õ–∏—á–Ω–æ–µ'", (internal_user_id,))
        existing_project = cur.fetchone()
        
        if existing_project:
            personal_project_id = existing_project['id']
            print(f"‚úÖ –õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {personal_project_id}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            cur.execute("""
                INSERT INTO projects (name, owner_id, color, created_at, active)
                VALUES ('–õ–∏—á–Ω–æ–µ', %s, '#6366f1', %s, TRUE)
                RETURNING id;
            """, (internal_user_id, datetime.utcnow().isoformat()))
            
            project_result = cur.fetchone()
            personal_project_id = project_result['id']
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å ID {personal_project_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        cur.execute("""
            INSERT INTO project_members (project_id, user_id, joined_at)
            VALUES (%s, %s, %s)
            ON CONFLICT (project_id, user_id) DO NOTHING;
        """, (personal_project_id, internal_user_id, datetime.utcnow().isoformat()))
    
    def get_user_personal_project_id(self, internal_user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with get_db_cursor() as cur:
            # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (projects.owner_id = users.id)
            cur.execute("""
                SELECT id FROM projects 
                WHERE owner_id = %s AND name = '–õ–∏—á–Ω–æ–µ' AND active = TRUE
                LIMIT 1
            """, (internal_user_id,))
            result = cur.fetchone()
            return result['id'] if result else None
    
    def get_user_db_id(self, telegram_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id"""
        with get_db_cursor() as cur:
            cur.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
            result = cur.fetchone()
            return result['id'] if result else None
    
    def resolve_user_id(self, user_id: int) -> Optional[int]:
        """
        –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_id —É–∂–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID (–º–∞–ª–æ–µ —á–∏—Å–ª–æ),
        –µ—Å–ª–∏ –Ω–µ—Ç - –∏—â–µ—Ç –ø–æ telegram_id (–±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ).
        """
        with get_db_cursor() as cur:
            # –ï—Å–ª–∏ user_id –º–∞–ª–µ–Ω—å–∫–∏–π (< 1000000), –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É–∂–µ ID –∏–∑ –ë–î
            if user_id < 1000000:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
                cur.execute("SELECT id FROM users WHERE id = %s", (user_id,))
                result = cur.fetchone()
                if result:
                    return result['id']
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–∞–∫ ID –∏–∑ –ë–î –∏–ª–∏ user_id –±–æ–ª—å—à–æ–π, –∏—â–µ–º –ø–æ telegram_id
            cur.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
            result = cur.fetchone()
            return result['id'] if result else None
    
    def update_user_setting(self, user_id: int, key: str, value: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î."""
        db_user_id = self.resolve_user_id(user_id)
        if not db_user_id:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        with get_db_cursor() as cur:
            cur.execute("""
                INSERT INTO user_settings (user_id, key, value)
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id, key) DO UPDATE SET value = EXCLUDED.value;
            """, (db_user_id, key, value))
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key}={value} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
    
    def get_user_settings(self, user_id: int) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db_user_id = self.resolve_user_id(user_id)
        if not db_user_id:
            return {}
            
        with get_db_cursor() as cur:
            cur.execute("SELECT key, value FROM user_settings WHERE user_id = %s", (db_user_id,))
            results = cur.fetchall()
            return {row['key']: row['value'] for row in results}
    
    def get_user_setting(self, user_id: int, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É"""
        db_user_id = self.resolve_user_id(user_id)
        if not db_user_id:
            return None
            
        with get_db_cursor() as cur:
            cur.execute("SELECT value FROM user_settings WHERE user_id = %s AND key = %s", (db_user_id, key))
            result = cur.fetchone()
            return result['value'] if result else None


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
user_repository = UserRepository()