#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î –Ω–∞ NetAngels
"""

import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î NetAngels
DB_CONFIG = {
    'host': 'postgres.c107597.h2',
    'database': 'c107597_rptx_na4u_ru',
    'user': 'c107597_rptx_na4u_ru',
    'password': 'ZiKceXoydixol93',
    'port': 5432
}

def main():
    try:
        conn = psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)
        
        with conn.cursor() as cur:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î —É—Å–ø–µ—à–Ω–æ!")
            print()
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            cur.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name
            """)
            tables = cur.fetchall()
            print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î ({len(tables)} —à—Ç.):")
            for table in tables:
                print(f"   - {table['table_name']}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
            cur.execute("SELECT version, name, executed_at FROM schema_migrations ORDER BY executed_at")
            migrations = cur.fetchall()
            print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ({len(migrations)} —à—Ç.):")
            for m in migrations:
                print(f"   ‚úÖ {m['version']}: {m['name']} ({m['executed_at']})")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã tasks
            cur.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns
                WHERE table_name = 'tasks'
                ORDER BY ordinal_position
            """)
            columns = cur.fetchall()
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tasks ({len(columns)} –ø–æ–ª–µ–π):")
            for col in columns:
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
                print(f"   - {col['column_name']}: {col['data_type']} {nullable}{default}")
            print()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            tables_to_check = ['users', 'projects', 'tasks', 'events', 'shopping', 'purchases', 'user_settings', 'project_members', 'logs', 'reminder_logs']
            print("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
            total_records = 0
            for table in tables_to_check:
                try:
                    cur.execute(f"SELECT COUNT(*) as count FROM {table}")
                    count = cur.fetchone()['count']
                    total_records += count
                    print(f"   - {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"   - {table}: –æ—à–∏–±–∫–∞ ({e})")
            
            print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_records}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
            cur.execute("SELECT id, title, completed, created_at FROM tasks ORDER BY id DESC LIMIT 5")
            recent_tasks = cur.fetchall()
            if recent_tasks:
                print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ ({len(recent_tasks)} —à—Ç.):")
                for task in recent_tasks:
                    status = "‚úÖ" if task['completed'] else "‚ùå"
                    print(f"   {status} #{task['id']}: {task['title']} ({task['created_at']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            cur.execute("SELECT id, title, start_at FROM events ORDER BY id DESC LIMIT 3")
            recent_events = cur.fetchall()
            if recent_events:
                print(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ({len(recent_events)} —à—Ç.):")
                for event in recent_events:
                    print(f"   üìÖ #{event['id']}: {event['title']} ({event['start_at']})")
        
        conn.close()
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

if __name__ == "__main__":
    main()