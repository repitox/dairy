#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è id –≤ —Ç–∞–±–ª–∏—Ü–µ projects (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞)
"""

import psycopg2
import psycopg2.extras
import os
from datetime import datetime

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ª–æ–∫–∞–ª—å–Ω–∞—è —ç—Ç–æ —Å—Ä–µ–¥–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∫—à–Ω
    if os.path.exists('/.dockerenv'):
        # Docker —Å—Ä–µ–¥–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
        return psycopg2.connect(
            host="db",
            database="telegram_app",
            user="postgres",
            password="postgres",
            port=5432
        )
    else:
        # –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–∞ NetAngels
        return psycopg2.connect(
            host='postgres.c107597.h2',
            database='c107597_rptx_na4u_ru',
            user='c107597_rptx_na4u_ru',
            password='ZiKceXoydixol93',
            port=5432
        )

def fix_projects_id(conn):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ id –≤ —Ç–∞–±–ª–∏—Ü–µ projects"""
    with conn.cursor() as cur:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ id –≤ —Ç–∞–±–ª–∏—Ü–µ projects...")
        
        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print("üìä –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å projects_id_seq...")
        cur.execute("CREATE SEQUENCE IF NOT EXISTS projects_id_seq")
        
        # 2. –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID (–∏—Å–∫–ª—é—á–∞—è NULL)
        cur.execute("SELECT COALESCE(MAX(id), 0) FROM projects WHERE id IS NOT NULL")
        max_id = cur.fetchone()[0]
        print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID: {max_id}")
        
        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if max_id > 0:
            cur.execute(f"SELECT setval('projects_id_seq', {max_id})")
            print(f"üî¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {max_id}")
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å NULL id
        cur.execute("SELECT COUNT(*) FROM projects WHERE id IS NULL")
        null_count = cur.fetchone()[0]
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å NULL id: {null_count}")
        
        if null_count > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º NULL –∑–∞–ø–∏—Å–∏, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—è –∏–º –Ω–æ–≤—ã–µ ID –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cur.execute("""
                UPDATE projects 
                SET id = nextval('projects_id_seq') 
                WHERE id IS NULL
            """)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {null_count} –∑–∞–ø–∏—Å–µ–π —Å NULL id")
        
        # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º default –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è id
        cur.execute("""
            ALTER TABLE projects 
            ALTER COLUMN id SET DEFAULT nextval('projects_id_seq')
        """)
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ default –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è id")
        
        # 6. –î–µ–ª–∞–µ–º –ø–æ–ª–µ id NOT NULL
        cur.execute("ALTER TABLE projects ALTER COLUMN id SET NOT NULL")
        print("‚úÖ –ü–æ–ª–µ id —Ç–µ–ø–µ—Ä—å NOT NULL")
        
        # 7. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            cur.execute("ALTER TABLE projects ADD PRIMARY KEY (id)")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á")
        except psycopg2.errors.DuplicateObject:
            print("‚ÑπÔ∏è –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: {e}")
        
        conn.commit()
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è id –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è id –≤ —Ç–∞–±–ª–∏—Ü–µ projects")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().isoformat()}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = get_db_connection()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—è id:")
        with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
            cur.execute("""
                SELECT column_name, data_type, column_default, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'projects' AND column_name = 'id'
            """)
            row = cur.fetchone()
            if row:
                print(f"  - {row['column_name']}: {row['data_type']} (default: {row['column_default']}, nullable: {row['is_nullable']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å NULL id
            cur.execute("SELECT COUNT(*) as total, COUNT(id) as with_id FROM projects")
            counts = cur.fetchone()
            print(f"  - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {counts['total']}, —Å ID: {counts['with_id']}, –±–µ–∑ ID: {counts['total'] - counts['with_id']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        print("\nüîß –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
        fix_projects_id(conn)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—è id:")
        with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
            cur.execute("""
                SELECT column_name, data_type, column_default, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'projects' AND column_name = 'id'
            """)
            row = cur.fetchone()
            if row:
                print(f"  - {row['column_name']}: {row['data_type']} (default: {row['column_default']}, nullable: {row['is_nullable']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            cur.execute("SELECT COUNT(*) as total, COUNT(id) as with_id FROM projects")
            counts = cur.fetchone()
            print(f"  - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {counts['total']}, —Å ID: {counts['with_id']}, –±–µ–∑ ID: {counts['total'] - counts['with_id']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            cur.execute("SELECT id, name, owner_id FROM projects LIMIT 5")
            print("\nüìä –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
            for row in cur.fetchall():
                print(f"  - ID: {row['id']}, Name: {row['name']}, Owner: {row['owner_id']}")
        
        conn.close()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)