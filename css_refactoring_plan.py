#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ CSS —Ñ–∞–π–ª–æ–≤ Dashboard
–¶–µ–ª—å: –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ —Å—Ç–∏–ª–∏ –≤ ui-components.css –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π UI –∫–∏—Ç
"""

import os
import re
from typing import Dict, List, Set

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DASHBOARD_DIR = "/Users/d.dubenetskiy/Documents/tg_project/dashboard"

# –¢–µ–∫—É—â–∏–µ CSS —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
CSS_FILES = {
    'ui-components.css': 'UI –∫–∏—Ç - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª',
    'dashboard-styles.css': '–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ dashboard',
    'navigation-api-simple.css': '–°—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
    'unified-page-styles.css': '–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü'
}

# HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
HTML_PAGES = [
    'main.html', 'tasks.html', 'meetings.html', 'projects.html',
    'shopping.html', 'notes.html', 'settings.html'
]

def analyze_css_file(file_path: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSS —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∞—Å—Å—ã"""
    
    if not os.path.exists(file_path):
        return {'classes': set(), 'variables': set(), 'content': ''}
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º CSS –∫–ª–∞—Å—Å—ã
        class_pattern = r'\.([a-zA-Z][a-zA-Z0-9_-]*)\s*\{'
        classes = set(re.findall(class_pattern, content))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        var_pattern = r'--([a-zA-Z][a-zA-Z0-9_-]*)'
        variables = set(re.findall(var_pattern, content))
        
        return {
            'classes': classes,
            'variables': variables,
            'content': content,
            'size': len(content)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
        return {'classes': set(), 'variables': set(), 'content': ''}

def find_duplicate_classes(css_files_data: Dict) -> Dict:
    """–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏"""
    
    all_classes = {}
    duplicates = {}
    
    for file_name, data in css_files_data.items():
        for class_name in data['classes']:
            if class_name not in all_classes:
                all_classes[class_name] = []
            all_classes[class_name].append(file_name)
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    for class_name, files in all_classes.items():
        if len(files) > 1:
            duplicates[class_name] = files
    
    return duplicates

def categorize_styles() -> Dict:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é"""
    
    return {
        'navigation': {
            'description': '–°—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (navbar, sidebar, dropdown)',
            'classes': [
                'api-navbar', 'api-sidebar', 'api-nav-item', 'api-user-dropdown',
                'api-navbar-user', 'api-navbar-brand', 'api-menu-item'
            ],
            'source_file': 'navigation-api-simple.css'
        },
        'page_layout': {
            'description': '–°—Ç–∏–ª–∏ –º–∞–∫–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∑–∞–≥–æ–ª–æ–≤–∫–∏)',
            'classes': [
                'unified-page-container', 'unified-page-header', 'unified-page-title',
                'unified-action-btn', 'unified-secondary-btn'
            ],
            'source_file': 'unified-page-styles.css'
        },
        'components': {
            'description': 'UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏, –∫–∞—Ä—Ç–æ—á–∫–∏, —Ñ–æ—Ä–º—ã)',
            'classes': [
                'btn', 'btn-primary', 'btn-secondary', 'card', 'glass-container',
                'form-group', 'form-input', 'modal'
            ],
            'source_file': 'dashboard-styles.css + ui-components.css'
        },
        'specific': {
            'description': '–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü',
            'classes': [
                'dashboard-grid', 'tasks-container', 'meetings-header',
                'shopping-header', 'notes-content'
            ],
            'source_file': 'inline styles –≤ HTML'
        }
    }

def create_refactoring_plan() -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    return {
        'step1': {
            'title': '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤',
            'actions': [
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ CSS —Ñ–∞–π–ª—ã',
                '–ù–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã',
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å—Ç–∏–ª—è–º–∏'
            ]
        },
        'step2': {
            'title': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ ui-components.css',
            'actions': [
                '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ dashboard-styles.css',
                '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ navigation-api-simple.css',
                '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å unified-page-styles.css',
                '–£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–∏–ª–∏'
            ]
        },
        'step3': {
            'title': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
            'actions': [
                '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏',
                '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
                '–£–±—Ä–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏'
            ]
        },
        'step4': {
            'title': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü',
            'actions': [
                '–ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ 4 CSS —Ñ–∞–π–ª–æ–≤ –Ω–∞ 1',
                '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å—ã –≤ HTML –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏',
                '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                '–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø—ã'
            ]
        }
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ CSS —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ CSS —Ñ–∞–π–ª—ã
    css_data = {}
    total_size = 0
    
    for file_name, description in CSS_FILES.items():
        file_path = os.path.join(DASHBOARD_DIR, file_name)
        data = analyze_css_file(file_path)
        css_data[file_name] = data
        total_size += data['size']
        
        print(f"\nüìÅ {file_name}")
        print(f"   üìù {description}")
        print(f"   üìä –ö–ª–∞—Å—Å–æ–≤: {len(data['classes'])}")
        print(f"   üé® –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(data['variables'])}")
        print(f"   üìè –†–∞–∑–º–µ—Ä: {data['size']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if len(data['classes']) > 0:
            print(f"   üè∑Ô∏è  –ü—Ä–∏–º–µ—Ä—ã –∫–ª–∞—Å—Å–æ–≤: {', '.join(list(data['classes'])[:5])}")
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üìÅ –§–∞–π–ª–æ–≤: {len(CSS_FILES)}")
    print(f"   üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = find_duplicate_classes(css_data)
    if duplicates:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã:")
        for class_name, files in duplicates.items():
            print(f"   üîÑ .{class_name} –≤ —Ñ–∞–π–ª–∞—Ö: {', '.join(files)}")
    else:
        print(f"\n‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    plan = create_refactoring_plan()
    print(f"\nüéØ –ü–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
    
    for step_key, step_data in plan.items():
        print(f"\n{step_key.upper()}: {step_data['title']}")
        for action in step_data['actions']:
            print(f"   ‚Ä¢ {action}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π
    categories = categorize_styles()
    print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
    
    for cat_key, cat_data in categories.items():
        print(f"\nüè∑Ô∏è  {cat_key.upper()}: {cat_data['description']}")
        print(f"   üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {cat_data['source_file']}")
        print(f"   üé® –ü—Ä–∏–º–µ—Ä—ã: {', '.join(cat_data['classes'][:3])}")
    
    print(f"\nüéØ –¶–µ–ª—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
    print(f"   ‚ùå –ë—ã–ª–æ: 4 CSS —Ñ–∞–π–ª–∞ ({total_size} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"   ‚úÖ –ë—É–¥–µ—Ç: 1 CSS —Ñ–∞–π–ª (ui-components.css)")
    print(f"   üìà –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print(f"      ‚Ä¢ –ú–µ–Ω—å—à–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"      ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏")
    print(f"      ‚Ä¢ –õ–µ–≥—á–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    print(f"      ‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    main()