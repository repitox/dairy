import os
from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
if not os.getenv("DATABASE_URL"):
    load_dotenv()
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime
from datetime_utils import (
    parse_datetime_string, format_datetime_for_user, 
    is_today, is_tomorrow, is_overdue, utc_to_user_timezone
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ NetAngels –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    # –î–ª—è NetAngels dialist.ru
    DATABASE_URL = "postgresql://c107597_dialist_ru:ZoXboBiphobem19@postgres.c107597.h2:5432/c107597_dialist_ru"
    os.environ["DATABASE_URL"] = DATABASE_URL
    print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DATABASE_URL –¥–ª—è NetAngels: {DATABASE_URL[:50]}...")

def get_conn():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
def init_db():
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    first_name TEXT,
                    username TEXT,
                    registered_at TEXT,
                    theme TEXT DEFAULT 'auto'
                );
            """)

            # –ü—Ä–æ–µ–∫—Ç—ã
            cur.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    id SERIAL PRIMARY KEY,
                    name TEXT NOT NULL,
                    owner_id INTEGER NOT NULL REFERENCES users(id),
                    color TEXT,
                    created_at TEXT,
                    active BOOLEAN DEFAULT TRUE
                );
            """)

            # –ü–æ–∫—É–ø–∫–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS shopping (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER,
                    project_id INTEGER REFERENCES projects(id),
                    item TEXT NOT NULL,
                    quantity INTEGER NOT NULL,
                    status TEXT DEFAULT '–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å',
                    created_at TEXT
                );
            """)

            # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            cur.execute("""
                CREATE TABLE IF NOT EXISTS events (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER,
                    project_id INTEGER REFERENCES projects(id),
                    title TEXT NOT NULL,
                    location TEXT NOT NULL,
                    start_at TEXT NOT NULL,
                    end_at TEXT NOT NULL,
                    active BOOLEAN DEFAULT TRUE,
                    created_at TEXT,
                    description TEXT
                );
            """)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ description –≤ events –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                cur.execute("ALTER TABLE events ADD COLUMN IF NOT EXISTS description TEXT;")
            except Exception as e:
                print(f"–ú–∏–≥—Ä–∞—Ü–∏—è description –¥–ª—è events: {e}")

            # –õ–æ–≥–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS logs (
                    id SERIAL PRIMARY KEY,
                    type TEXT NOT NULL,
                    message TEXT NOT NULL,
                    created_at TEXT
                );
            """)

            # –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            cur.execute("""
                CREATE TABLE IF NOT EXISTS reminder_logs (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL,
                    event_id INTEGER NOT NULL,
                    sent_at TEXT
                );
            """)

            # –ó–∞–¥–∞—á–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS tasks (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL,
                    project_id INTEGER REFERENCES projects(id),
                    title TEXT NOT NULL,
                    description TEXT,
                    due_date TEXT,
                    priority TEXT DEFAULT '–æ–±—ã—á–Ω–∞—è',
                    completed BOOLEAN DEFAULT FALSE,
                    created_at TEXT,
                    completed_at TEXT
                );
            """)

            # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("""
                CREATE TABLE IF NOT EXISTS project_members (
                    id SERIAL PRIMARY KEY,
                    project_id INTEGER REFERENCES projects(id),
                    user_id INTEGER NOT NULL,
                    joined_at TEXT,
                    UNIQUE (project_id, user_id)
                );
            """)

            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_settings (
                    user_id INTEGER NOT NULL,
                    key TEXT NOT NULL,
                    value TEXT,
                    PRIMARY KEY (user_id, key)
                );
            """)

            # –ó–∞–º–µ—Ç–∫–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS notes (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id),
                    title TEXT NOT NULL,
                    content TEXT DEFAULT '',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)

            # –ü–æ–∫—É–ø–∫–∏ (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS purchases (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id),
                    project_id INTEGER REFERENCES projects(id),
                    name TEXT NOT NULL,
                    quantity INTEGER NOT NULL DEFAULT 1,
                    price DECIMAL(10,2),
                    category TEXT DEFAULT 'other',
                    completed BOOLEAN DEFAULT FALSE,
                    created_at TEXT,
                    shopping_list_id INTEGER,
                    url TEXT,
                    comment TEXT
                );
            """)

            # –°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫
            cur.execute("""
                CREATE TABLE IF NOT EXISTS shopping_lists (
                    id SERIAL PRIMARY KEY,
                    name TEXT NOT NULL,
                    project_id INTEGER NOT NULL REFERENCES projects(id),
                    user_id INTEGER NOT NULL REFERENCES users(id),
                    created_at TEXT,
                    active BOOLEAN DEFAULT TRUE
                );
            """)

            # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS project_members (
                    project_id INTEGER NOT NULL REFERENCES projects(id),
                    user_id INTEGER NOT NULL REFERENCES users(id),
                    joined_at TEXT,
                    PRIMARY KEY (project_id, user_id)
                );
            """)

            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cur.execute("CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id);")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_purchases_completed ON purchases(completed);")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_purchases_shopping_list_id ON purchases(shopping_list_id);")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_user_id ON shopping_lists(user_id);")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_project_members_project_id ON project_members(project_id);")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_project_members_user_id ON project_members(user_id);")

            conn.commit()

# ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
def add_user(user_id: int, first_name: str, username: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏.
    user_id - —ç—Ç–æ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    print(f"üóÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {first_name}, {username}")
    with get_conn() as conn:
        with conn.cursor() as cur:
            try:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                cur.execute("""
                    INSERT INTO users (telegram_id, first_name, username, registered_at)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (telegram_id) DO NOTHING
                    RETURNING id;
                """, (user_id, first_name, username, datetime.utcnow().isoformat()))
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–≤—ã–π –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
                result = cur.fetchone()
                if result:
                    internal_user_id = result['id']
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={internal_user_id}")
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                    cur.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
                    internal_user_id = cur.fetchone()['id']
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å id={internal_user_id}")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
                cur.execute("SELECT id FROM projects WHERE owner_id = %s AND name = '–õ–∏—á–Ω–æ–µ'", (internal_user_id,))
                existing_project = cur.fetchone()
                
                if existing_project:
                    personal_project_id = existing_project['id']
                    print(f"‚úÖ –õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {personal_project_id}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                    cur.execute("""
                        INSERT INTO projects (name, owner_id, color, created_at, active)
                        VALUES ('–õ–∏—á–Ω–æ–µ', %s, '#6366f1', %s, TRUE)
                        RETURNING id;
                    """, (internal_user_id, datetime.utcnow().isoformat()))
                    
                    project_result = cur.fetchone()
                    personal_project_id = project_result['id']
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å ID {personal_project_id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                cur.execute("""
                    INSERT INTO project_members (project_id, user_id, joined_at)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (project_id, user_id) DO NOTHING;
                """, (personal_project_id, internal_user_id, datetime.utcnow().isoformat()))
                
                conn.commit()
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                return internal_user_id
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)
                return None

def get_user_personal_project_id(internal_user_id: int) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å ID –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (projects.owner_id = users.id)
            cur.execute("""
                SELECT id FROM projects 
                WHERE owner_id = %s AND name = '–õ–∏—á–Ω–æ–µ' AND active = TRUE
                LIMIT 1
            """, (internal_user_id,))
            result = cur.fetchone()
            if result:
                return result['id']
            else:
                return None

def get_user_db_id(telegram_id: int) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    """
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
            result = cur.fetchone()
            return result['id'] if result else None

def resolve_user_id(user_id: int) -> int:
    """
    –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_id —É–∂–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID (–º–∞–ª–æ–µ —á–∏—Å–ª–æ),
    –µ—Å–ª–∏ –Ω–µ—Ç - –∏—â–µ—Ç –ø–æ telegram_id (–±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ).
    """
    with get_conn() as conn:
        with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
            # –ï—Å–ª–∏ user_id –º–∞–ª–µ–Ω—å–∫–∏–π (< 1000000), –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É–∂–µ ID –∏–∑ –ë–î
            if user_id < 1000000:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
                cur.execute("SELECT id FROM users WHERE id = %s", (user_id,))
                result = cur.fetchone()
                if result:
                    return result['id']
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–∞–∫ ID –∏–∑ –ë–î –∏–ª–∏ user_id –±–æ–ª—å—à–æ–π, –∏—â–µ–º –ø–æ telegram_id
            cur.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
            result = cur.fetchone()
            return result['id'] if result else None

def get_personal_project_id(user_id: int) -> int:
    """
    –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_user_personal_project_id()
    –ü–æ–ª—É—á–∏—Ç—å ID –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return get_user_personal_project_id(user_id)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_setting(user_id: int, key: str, value: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_settings (user_id, key, value)
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id, key) DO UPDATE SET value = EXCLUDED.value
            """, (db_user_id, key, value))
            conn.commit()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        return {}
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT key, value FROM user_settings WHERE user_id = %s
            """, (db_user_id,))
            rows = cur.fetchall()
            return {row["key"]: row["value"] for row in rows}

# –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É
def get_user_setting(user_id: int, key: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT value FROM user_settings
                WHERE user_id = %s AND key = %s
            """, (db_user_id, key))
            row = cur.fetchone()
            return row["value"] if row else None

# ‚úÖ –ü–æ–∫—É–ø–∫–∏
def add_purchase(user_id: int, project_id: int, item: str, quantity: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO shopping (user_id, project_id, item, quantity, status, created_at)
                VALUES (%s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (db_user_id, project_id, item, quantity, '–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å', datetime.utcnow().isoformat()))
            purchase_id = cur.fetchone()['id']
            conn.commit()
            print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {purchase_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return purchase_id

def get_purchases_by_status(status: str, project_id: int):
    with get_conn() as conn:
        with conn.cursor() as cur:
            if status == "–í—Å–µ":
                cur.execute("""
                    SELECT id, item, quantity, status, created_at
                    FROM shopping
                    WHERE project_id = %s
                    ORDER BY created_at DESC
                """, (project_id,))
            else:
                cur.execute("""
                    SELECT id, item, quantity, status, created_at
                    FROM shopping
                    WHERE status = %s AND project_id = %s
                    ORDER BY created_at DESC
                """, (status, project_id))
            return cur.fetchall()


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É
def get_recent_purchases(user_id: int, limit: int = 5):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    p.id, 
                    p.name as item, 
                    p.name as title,
                    p.quantity, 
                  CASE WHEN p.completed THEN '–ö—É–ø–ª–µ–Ω–æ' ELSE '–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å' END as status,
                    p.completed as is_done,
                    p.created_at,
                    p.price,
                      p.category
                FROM purchases p
                WHERE p.completed = FALSE
                  AND p.user_id = %s
                ORDER BY p.created_at DESC
                LIMIT %s
            """, (db_user_id, limit))
            return cur.fetchall()


def update_purchase_status(purchase_id: int, new_status: str):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE shopping SET status = %s WHERE id = %s
            """, (new_status, purchase_id))
            conn.commit()

# ‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def add_event(user_id: int, project_id: int, title: str, location: str, start_at: str = None, end_at: str = None, description: str = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO events (user_id, project_id, title, location, start_at, end_at, created_at, description)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (db_user_id, project_id, title, location, start_at, end_at, datetime.utcnow().isoformat(), description))
            event_id = cur.fetchone()['id']
            conn.commit()
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID {event_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return event_id

def update_event(event_id: int, user_id: int, title: str, location: str, start_at: str, end_at: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE events
                SET user_id = %s,
                    title = %s,
                    location = %s,
                    start_at = %s,
                    end_at = %s
                WHERE id = %s
            """, (db_user_id, title, location, start_at, end_at, event_id))
            conn.commit()
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return True

def deactivate_event(event_id: int):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE events
                SET active = FALSE
                WHERE id = %s
            """, (event_id,))
            conn.commit()

def get_events_by_filter(user_id: int, filter: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            now = datetime.utcnow().isoformat()

            if filter == "–í—Å–µ":
                cur.execute("""
                    SELECT id, title, location, start_at, end_at, active
                    FROM events
                    WHERE (user_id = %s AND project_id IS NULL)
                       OR project_id IN (
                           SELECT project_id FROM project_members WHERE user_id = %s
                       )
                    ORDER BY start_at ASC
                """, (db_user_id, db_user_id))
            elif filter == "–ü—Ä–æ—à–µ–¥—à–∏–µ":
                cur.execute("""
                    SELECT id, title, location, start_at, end_at, active
                    FROM events
                    WHERE active = TRUE AND end_at < %s
                      AND (
                        (user_id = %s AND project_id IS NULL)
                        OR project_id IN (
                            SELECT project_id FROM project_members WHERE user_id = %s
                        )
                      )
                    ORDER BY start_at ASC
                """, (now, db_user_id, db_user_id))
            else:
                cur.execute("""
                    SELECT id, title, location, start_at, end_at, active
                    FROM events
                    WHERE active = TRUE AND end_at >= %s
                      AND (
                        (user_id = %s AND project_id IS NULL)
                        OR project_id IN (
                            SELECT project_id FROM project_members WHERE user_id = %s
                        )
                      )
                    ORDER BY start_at ASC
                """, (now, db_user_id, db_user_id))

            return cur.fetchall()

def get_today_events(user_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    from datetime import datetime, date
    
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                SELECT events.id, events.title, events.location, events.start_at, events.end_at, events.active,
                       projects.name AS project_name, projects.color AS project_color
                FROM events
                LEFT JOIN projects ON events.project_id = projects.id
                WHERE events.active = TRUE
                  AND events.start_at IS NOT NULL
                  AND (
                      (events.user_id = %s AND events.project_id IS NULL)
                      OR events.project_id IN (
                          SELECT project_id FROM project_members WHERE user_id = %s
                      )
                  )
                ORDER BY events.start_at ASC
            """, (db_user_id, db_user_id))
            all_events = cur.fetchall()
            
            today = date.today()
            today_events = []
            
            for event in all_events:
                start_at_str = event['start_at']
                
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                    if 'T' in start_at_str:
                        # ISO —Ñ–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                        if start_at_str.endswith('Z'):
                            event_date = datetime.fromisoformat(start_at_str[:-1]).date()
                        else:
                            event_date = datetime.fromisoformat(start_at_str).date()
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                        event_date = datetime.strptime(start_at_str, '%Y-%m-%d').date()
                    
                    if event_date == today:
                        today_events.append(event)
                        
                except (ValueError, TypeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è {start_at_str}: {e}")
                    continue
                    
            return today_events

def log_event(type: str, message: str):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO logs (type, message, created_at)
                VALUES (%s, %s, %s)
            """, (type, message, datetime.utcnow().isoformat()))
            conn.commit()


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def has_reminder_been_sent(user_id: int, event_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 1 FROM reminder_logs
                WHERE user_id = %s AND event_id = %s
                LIMIT 1;
            """, (db_user_id, event_id))
            return cur.fetchone() is not None

def record_reminder_sent(user_id: int, event_id: int):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO reminder_logs (user_id, event_id, sent_at)
                VALUES (%s, %s, %s)
            """, (db_user_id, event_id, datetime.utcnow().isoformat()))
            conn.commit()
            print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}, —Å–æ–±—ã—Ç–∏–µ {event_id}")
            return True

# --- –ó–∞–¥–∞—á–∏ ---
def add_task(user_id: int, project_id: int, title: str, due_date: str, priority: str, description: str = ""):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO tasks (user_id, project_id, title, description, due_date, priority, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (db_user_id, project_id, title, description, due_date, priority, datetime.utcnow().isoformat()))
            task_id = cur.fetchone()['id']
            conn.commit()
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return task_id

from typing import Optional

def get_tasks(user_id: int, project_id: Optional[int] = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            if project_id is not None:
                cur.execute("""
                    SELECT t.id, t.title, t.description, t.due_date, t.priority,
                           t.completed, t.created_at, t.completed_at, t.project_id, p.name AS project_name, p.color AS project_color
                    FROM tasks t
                    LEFT JOIN projects p ON t.project_id = p.id
                    WHERE t.project_id = %s
                    ORDER BY
                        t.completed ASC,
                        t.due_date IS NULL, t.due_date ASC,
                        CASE WHEN t.priority = '–≤–∞–∂–Ω–∞—è' THEN 0 ELSE 1 END
                """, (project_id,))
            else:
                cur.execute("""
                    SELECT t.id, t.title, t.description, t.due_date, t.priority,
                           t.completed, t.created_at, t.completed_at, t.project_id, p.name AS project_name, p.color AS project_color
                    FROM tasks t
                    LEFT JOIN projects p ON t.project_id = p.id
                    WHERE t.user_id = %s OR t.project_id IN (
                        SELECT p2.id FROM projects p2 
                        WHERE p2.owner_id = %s OR p2.id IN (
                            SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                        )
                    )
                    ORDER BY
                        t.completed ASC,
                        t.due_date IS NULL, t.due_date ASC,
                        CASE WHEN t.priority = '–≤–∞–∂–Ω–∞—è' THEN 0 ELSE 1 END
                """, (db_user_id, db_user_id, db_user_id))
            return cur.fetchall()

def get_today_tasks(user_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    from datetime import datetime, date
    
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"overdue": [], "today": []}
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                SELECT tasks.id, tasks.title, tasks.description, tasks.due_date, tasks.priority,
                       tasks.completed, tasks.created_at, tasks.project_id,
                       projects.name AS project_name, projects.color AS project_color
                FROM tasks
                LEFT JOIN projects ON tasks.project_id = projects.id
                WHERE tasks.completed = FALSE
                  AND tasks.due_date IS NOT NULL
                  AND (
                      (tasks.user_id = %s AND tasks.project_id IS NULL)
                      OR tasks.project_id IN (
                          SELECT project_id FROM project_members WHERE user_id = %s
                      )
                  )
                ORDER BY
                    tasks.due_date ASC,
                    CASE WHEN tasks.priority = '–≤–∞–∂–Ω–∞—è' THEN 0 ELSE 1 END
            """, (db_user_id, db_user_id))
            all_tasks = cur.fetchall()
            
            today = date.today()
            overdue = []
            today_tasks = []
            
            for task in all_tasks:
                due_date_str = task['due_date']
                
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                    if 'T' in due_date_str:
                        # ISO —Ñ–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                        if due_date_str.endswith('Z'):
                            task_date = datetime.fromisoformat(due_date_str[:-1]).date()
                        else:
                            task_date = datetime.fromisoformat(due_date_str).date()
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                        task_date = datetime.strptime(due_date_str, '%Y-%m-%d').date()
                    
                    if task_date < today:
                        overdue.append(task)
                    elif task_date == today:
                        today_tasks.append(task)
                        
                except (ValueError, TypeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {due_date_str}: {e}")
                    continue

            return {"overdue": overdue, "today": today_tasks}

def complete_task(task_id: int):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE tasks SET completed = TRUE WHERE id = %s
            """, (task_id,))
            conn.commit()

def delete_task(task_id: int):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM tasks WHERE id = %s", (task_id,))
            conn.commit()

def update_task(task_id: int, title: str, description: str, due_date: str, priority: str):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE tasks
                SET title = %s,
                    description = %s,
                    due_date = %s,
                    priority = %s
                WHERE id = %s
            """, (title, description, due_date, priority, task_id))
            conn.commit()

# --- –ü—Ä–æ–µ–∫—Ç—ã ---
def create_project(name: str, owner_id: int, color: str):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO projects (name, owner_id, color, created_at)
                VALUES (%s, %s, %s, %s)
                RETURNING id;
            """, (name, owner_id, color, datetime.utcnow().isoformat()))
            project_id = cur.fetchone()["id"]
            conn.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            with conn.cursor() as cur2:
                cur2.execute("""
                    INSERT INTO project_members (project_id, user_id, joined_at)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (project_id, user_id) DO NOTHING
                """, (project_id, owner_id, datetime.utcnow().isoformat()))
                conn.commit()
            
            return project_id

def update_project(project_id: int, name: str, color: str, owner_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å)"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE projects 
                SET name = %s, color = %s
                WHERE id = %s AND owner_id = %s
                RETURNING id;
            """, (name, color, project_id, owner_id))
            result = cur.fetchone()
            conn.commit()
            return result is not None

def delete_project(project_id: int, user_id: int):
    """
    –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å). user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            cur.execute("""
                SELECT id FROM projects 
                WHERE id = %s AND owner_id = %s
            """, (project_id, db_user_id))
            
            if not cur.fetchone():
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            # 1. –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("DELETE FROM project_members WHERE project_id = %s", (project_id,))
            
            # 2. –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("DELETE FROM tasks WHERE project_id = %s", (project_id,))
            
            # 3. –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("DELETE FROM events WHERE project_id = %s", (project_id,))
            
            # 4. –£–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("DELETE FROM purchases WHERE project_id = %s", (project_id,))
            
            # 5. –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("DELETE FROM shopping_lists WHERE project_id = %s", (project_id,))
            
            # 6. –ù–∞–∫–æ–Ω–µ—Ü, —É–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
            cur.execute("DELETE FROM projects WHERE id = %s", (project_id,))
            
            conn.commit()
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {db_user_id}")
            return True

# --- –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ---
# –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ

def get_project(project_id: int, user_id: int = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ ID. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    with get_conn() as conn:
        with conn.cursor() as cur:
            if user_id:
                db_user_id = resolve_user_id(user_id)
                if not db_user_id:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç—É
                cur.execute("""
                    SELECT p.id, p.name, p.color, p.owner_id, p.created_at
                    FROM projects p
                    WHERE p.id = %s AND p.active = TRUE
                    AND (p.owner_id = %s OR p.id IN (
                        SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                    ))
                """, (project_id, db_user_id, db_user_id))
            else:
                cur.execute("""
                    SELECT p.id, p.name, p.color, p.owner_id, p.created_at
                    FROM projects p
                    WHERE p.id = %s AND p.active = TRUE
                """, (project_id,))
            return cur.fetchone()

# --- –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_projects(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT p.id, p.name, p.color, p.created_at
                FROM projects p
                WHERE (p.owner_id = %s OR p.id IN (
                    SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                )) AND p.active = TRUE
                ORDER BY p.created_at DESC
            """, (db_user_id, db_user_id))
            return cur.fetchall()

def deactivate_project(project_id: int, user_id: int):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("""
                UPDATE projects 
                SET active = FALSE 
                WHERE id = %s AND owner_id = %s AND active = TRUE
                RETURNING id
            """, (project_id, user_id))
            result = cur.fetchone()
            conn.commit()
            return result is not None

def get_project_members(project_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç—É
            cur.execute("""
                SELECT 1 FROM projects p
                WHERE p.id = %s AND p.active = TRUE
                AND (p.owner_id = %s OR p.id IN (
                    SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                ))
            """, (project_id, user_id, user_id))
            
            if not cur.fetchone():
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("""
                SELECT 
                    pm.user_id,
                    u.first_name,
                    u.username,
                    CASE 
                        WHEN p.owner_id = pm.user_id THEN 'owner'
                        ELSE 'member'
                    END as role,
                    pm.joined_at
                FROM project_members pm
                JOIN users u ON u.id = pm.user_id
                JOIN projects p ON p.id = pm.project_id
                WHERE pm.project_id = %s
                ORDER BY 
                    CASE WHEN p.owner_id = pm.user_id THEN 0 ELSE 1 END,
                    pm.joined_at
            """, (project_id,))
            return cur.fetchall()

def add_project_member(project_id: int, user_id: int, member_user_id: int):
    """
    –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç. 
    user_id - –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ db_user_id)
    member_user_id - –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ db_user_id)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∏–∑ –ë–î –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
    owner_db_user_id = resolve_user_id(user_id)
    if not owner_db_user_id:
        print(f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∏–∑ –ë–î –¥–ª—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    member_db_user_id = resolve_user_id(member_user_id)
    if not member_db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å ID {member_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("""
                SELECT 1 FROM projects 
                WHERE id = %s AND owner_id = %s AND active = TRUE
            """, (project_id, owner_db_user_id))
            
            if not cur.fetchone():
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {owner_db_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            try:
                cur.execute("""
                    INSERT INTO project_members (project_id, user_id, joined_at)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (project_id, user_id) DO NOTHING
                """, (project_id, member_db_user_id, datetime.utcnow().isoformat()))
                conn.commit()
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_db_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç {project_id}")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
                return False

def remove_project_member(project_id: int, user_id: int, member_user_id: int):
    """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞
            cur.execute("""
                SELECT owner_id FROM projects 
                WHERE id = %s AND owner_id = %s AND active = TRUE
            """, (project_id, user_id))
            
            if not cur.fetchone():
                return False
            
            # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
            cur.execute("""
                SELECT 1 FROM projects 
                WHERE id = %s AND owner_id = %s
            """, (project_id, member_user_id))
            
            if cur.fetchone():
                return False  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
            
            # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            cur.execute("""
                DELETE FROM project_members 
                WHERE project_id = %s AND user_id = %s
            """, (project_id, member_user_id))
            conn.commit()
            return True

# --- –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ) ---
def get_user_events(user_id: int, filter: str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegram_id –≤ ID –∏–∑ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            now = datetime.utcnow().isoformat()

            if filter == "–í—Å–µ":
                cur.execute("""
                    SELECT e.id, e.title, e.location, e.start_at, e.end_at, e.active,
                           e.description, e.created_at,
                           p.name as project_name, p.color as project_color
                    FROM events e
                    LEFT JOIN projects p ON e.project_id = p.id
                    WHERE e.active = TRUE
                      AND (
                          e.user_id = %s OR e.project_id IN (
                              SELECT p2.id FROM projects p2 
                              WHERE p2.owner_id = %s OR p2.id IN (
                                  SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                              )
                          )
                      )
                    ORDER BY e.start_at ASC
                """, (db_user_id, db_user_id, db_user_id))
            elif filter == "–ü—Ä–æ—à–µ–¥—à–∏–µ":
                cur.execute("""
                    SELECT e.id, e.title, e.location, e.start_at, e.end_at, e.active,
                           e.description, e.created_at,
                           p.name as project_name, p.color as project_color
                    FROM events e
                    LEFT JOIN projects p ON e.project_id = p.id
                    WHERE e.active = TRUE AND e.end_at < %s
                      AND (
                          e.user_id = %s OR e.project_id IN (
                              SELECT p2.id FROM projects p2 
                              WHERE p2.owner_id = %s OR p2.id IN (
                                  SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                              )
                          )
                      )
                    ORDER BY e.start_at ASC
                """, (now, db_user_id, db_user_id, db_user_id))
            else:  # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ
                cur.execute("""
                    SELECT e.id, e.title, e.location, e.start_at, e.end_at, e.active,
                           e.description, e.created_at,
                           p.name as project_name, p.color as project_color
                    FROM events e
                    LEFT JOIN projects p ON e.project_id = p.id
                    WHERE e.active = TRUE AND e.end_at >= %s
                      AND (
                          e.user_id = %s OR e.project_id IN (
                              SELECT p2.id FROM projects p2 
                              WHERE p2.owner_id = %s OR p2.id IN (
                                  SELECT pm.project_id FROM project_members pm WHERE pm.user_id = %s
                              )
                          )
                      )
                    ORDER BY e.start_at ASC
                """, (now, db_user_id, db_user_id, db_user_id))

            rows = cur.fetchall()
            print("EVENTS:", rows)
            return rows

# === –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Dashboard ===

def get_shopping_items(user_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, name, quantity, price, category, completed, created_at, 
                       shopping_list_id, url, comment
                FROM purchases 
                WHERE user_id = %s 
                ORDER BY completed ASC, created_at DESC
            """, (db_user_id,))
            return cur.fetchall()

def add_shopping_item(user_id: int, name: str, quantity: int = 1, price: float = None, category: str = 'other', shopping_list_id: int = None, url: str = None, comment: str = None):
    """
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO purchases (user_id, name, quantity, price, category, completed, created_at, shopping_list_id, url, comment)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (db_user_id, name, quantity, price, category, False, datetime.utcnow().isoformat(), shopping_list_id, url, comment))
            result = cur.fetchone()
            conn.commit()
            print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {result['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return result['id'] if result else None

def toggle_shopping_item(item_id: int, user_id: int):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE purchases 
                SET completed = NOT completed 
                WHERE id = %s AND user_id = %s
                RETURNING completed
            """, (item_id, user_id))
            result = cur.fetchone()
            conn.commit()
            return result['completed'] if result else None

def update_shopping_item(item_id: int, user_id: int, name: str, quantity: int = 1, price: float = None, category: str = 'other', shopping_list_id: int = None, url: str = None, comment: str = None):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE purchases 
                SET name = %s, quantity = %s, price = %s, category = %s, shopping_list_id = %s, url = %s, comment = %s
                WHERE id = %s AND user_id = %s
                RETURNING id
            """, (name, quantity, price, category, shopping_list_id, url, comment, item_id, user_id))
            result = cur.fetchone()
            conn.commit()
            return result is not None

def delete_shopping_item(item_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM purchases WHERE id = %s", (item_id,))
            conn.commit()
            return cur.rowcount > 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫ ---

def get_user_shopping_lists(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT sl.id, sl.name, sl.project_id, p.name as project_name, p.color as project_color,
                       sl.created_at,
                       COUNT(pu.id) as total_items,
                       COUNT(CASE WHEN pu.completed = true THEN 1 END) as completed_items
                FROM shopping_lists sl
                LEFT JOIN projects p ON sl.project_id = p.id
                LEFT JOIN purchases pu ON sl.id = pu.shopping_list_id
                WHERE sl.user_id = %s
                GROUP BY sl.id, sl.name, sl.project_id, p.name, p.color, sl.created_at
                ORDER BY sl.created_at DESC
            """, (user_id,))
            return cur.fetchall()

def create_shopping_list(user_id: int, name: str, project_id: int):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
            cur.execute("""
                SELECT 1 FROM projects p
                WHERE p.id = %s AND (
                    p.owner_id = %s OR 
                    EXISTS (SELECT 1 FROM project_members pm WHERE pm.project_id = %s AND pm.user_id = %s)
                )
            """, (project_id, db_user_id, project_id, db_user_id))
            
            if not cur.fetchone():
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É {project_id}")
                return None
            
            cur.execute("""
                INSERT INTO shopping_lists (name, project_id, user_id, created_at)
                VALUES (%s, %s, %s, %s)
                RETURNING id
            """, (name, project_id, db_user_id, datetime.utcnow().isoformat()))
            result = cur.fetchone()
            conn.commit()
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å–æ–∑–¥–∞–Ω —Å ID {result['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return result['id'] if result else None

def get_shopping_list(list_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT sl.id, sl.name, sl.project_id, p.name as project_name, p.color as project_color
                FROM shopping_lists sl
                LEFT JOIN projects p ON sl.project_id = p.id
                WHERE sl.id = %s AND sl.user_id = %s
            """, (list_id, user_id))
            return cur.fetchone()

def update_shopping_list(list_id: int, user_id: int, name: str, project_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
            cur.execute("""
                SELECT 1 FROM projects p
                WHERE p.id = %s AND (
                    p.owner_id = %s OR 
                    EXISTS (SELECT 1 FROM project_members pm WHERE pm.project_id = %s AND pm.user_id = %s)
                )
            """, (project_id, user_id, project_id, user_id))
            
            if not cur.fetchone():
                raise ValueError("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É")
            
            cur.execute("""
                UPDATE shopping_lists 
                SET name = %s, project_id = %s
                WHERE id = %s AND user_id = %s
                RETURNING id
            """, (name, project_id, list_id, user_id))
            result = cur.fetchone()
            conn.commit()
            return result is not None

def delete_shopping_list(list_id: int, user_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            cur.execute("DELETE FROM purchases WHERE shopping_list_id = %s", (list_id,))
            
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Å–ø–∏—Å–æ–∫
            cur.execute("DELETE FROM shopping_lists WHERE id = %s AND user_id = %s", (list_id, user_id))
            conn.commit()
            return cur.rowcount > 0

def get_shopping_items_by_lists(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫–∞–º"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    sl.id as list_id, sl.name as list_name, sl.project_id,
                    p.name as project_name, p.color as project_color,
                    pu.id, pu.name, pu.quantity, pu.price, pu.category, 
                    pu.completed, pu.created_at, pu.url, pu.comment
                FROM shopping_lists sl
                LEFT JOIN projects p ON sl.project_id = p.id
                LEFT JOIN purchases pu ON sl.id = pu.shopping_list_id
                WHERE sl.user_id = %s
                ORDER BY sl.created_at DESC, pu.completed ASC, pu.created_at DESC
            """, (user_id,))
            return cur.fetchall()

def get_user_stats(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è dashboard"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            stats = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
            cur.execute("SELECT COUNT(*) as total FROM tasks WHERE user_id = %s", (user_id,))
            stats['tasks_total'] = cur.fetchone()['total']
            
            cur.execute("SELECT COUNT(*) as completed FROM tasks WHERE user_id = %s AND completed = true", (user_id,))
            stats['tasks_completed'] = cur.fetchone()['completed']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
            cur.execute("SELECT COUNT(*) as total FROM events WHERE user_id = %s", (user_id,))
            stats['events_total'] = cur.fetchone()['total']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
            cur.execute("SELECT COUNT(*) as total FROM purchases WHERE user_id = %s", (user_id,))
            stats['shopping_total'] = cur.fetchone()['total']
            
            return stats

def get_dashboard_counters(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ dashboard"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            counters = {}
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            cur.execute("SELECT COUNT(*) as count FROM tasks WHERE user_id = %s AND completed = false", (user_id,))
            counters['tasks'] = cur.fetchone()['count']
            
            # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è (—Å–µ–≥–æ–¥–Ω—è –∏ –≤ –±—É–¥—É—â–µ–º)
            cur.execute("""
                SELECT COUNT(*) as count FROM events 
                WHERE user_id = %s AND start_at >= CURRENT_DATE::text AND active = true
            """, (user_id,))
            counters['events'] = cur.fetchone()['count']
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            cur.execute("SELECT COUNT(*) as count FROM purchases WHERE user_id = %s AND completed = false", (user_id,))
            counters['shopping'] = cur.fetchone()['count']
            
            return counters

def toggle_task_status(task_id: int, user_id: int):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
    from datetime import datetime
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            cur.execute("SELECT completed FROM tasks WHERE id = %s AND user_id = %s", (task_id, user_id))
            current_task = cur.fetchone()
            
            if not current_task:
                return None
                
            new_completed = not current_task['completed']
            current_time = datetime.utcnow().isoformat()
            
            if new_completed:
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at
                cur.execute("""
                    UPDATE tasks 
                    SET completed = TRUE, completed_at = %s
                    WHERE id = %s AND user_id = %s
                    RETURNING completed
                """, (current_time, task_id, user_id))
            else:
                # –ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—Ç—É - –æ—á–∏—â–∞–µ–º completed_at
                cur.execute("""
                    UPDATE tasks 
                    SET completed = FALSE, completed_at = NULL
                    WHERE id = %s AND user_id = %s
                    RETURNING completed
                """, (task_id, user_id))
            
            result = cur.fetchone()
            conn.commit()
            return result['completed'] if result else None

def delete_event_by_id(event_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM events WHERE id = %s", (event_id,))
            conn.commit()
            return cur.rowcount > 0

def clear_user_data(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("DELETE FROM tasks WHERE user_id = %s", (user_id,))
            cur.execute("DELETE FROM events WHERE user_id = %s", (user_id,))
            cur.execute("DELETE FROM purchases WHERE user_id = %s", (user_id,))
            cur.execute("DELETE FROM projects WHERE user_id = %s", (user_id,))
            cur.execute("DELETE FROM notes WHERE user_id = %s", (user_id,))
            
            conn.commit()
            return True

# === Notes Functions ===

def add_note(user_id: int, title: str, content: str):
    """
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É. user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ ID –∏–∑ –ë–î.
    """
    db_user_id = resolve_user_id(user_id)
    if not db_user_id:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
        
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO notes (user_id, title, content, created_at, updated_at)
                VALUES (%s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                RETURNING id
            """, (db_user_id, title, content))
            
            note_id = cur.fetchone()['id']
            conn.commit()
            print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {note_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user_id}")
            return note_id

def get_user_notes(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, title, content, created_at, updated_at
                FROM notes
                WHERE user_id = %s
                ORDER BY created_at DESC
            """, (user_id,))
            
            return [dict(row) for row in cur.fetchall()]

def get_note_by_id(note_id: int, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, title, content, created_at, updated_at
                FROM notes
                WHERE id = %s AND user_id = %s
            """, (note_id, user_id))
            
            row = cur.fetchone()
            return dict(row) if row else None

def update_note(note_id: int, user_id: int, title: str, content: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE notes
                SET title = %s, content = %s, updated_at = CURRENT_TIMESTAMP
                WHERE id = %s AND user_id = %s
            """, (title, content, note_id, user_id))
            
            conn.commit()
            return cur.rowcount > 0

def delete_note(note_id: int, user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                DELETE FROM notes
                WHERE id = %s AND user_id = %s
            """, (note_id, user_id))
            
            conn.commit()
            return cur.rowcount > 0

__all__ = [
    "init_db",
    "add_user",
    "update_user_setting",
    "get_user_settings",
    "get_user_setting",
    "add_purchase",
    "get_purchases_by_status",
    "update_purchase_status",
    "add_event",
    "update_event",
    "deactivate_event",
    "get_events_by_filter",
    "get_today_events",
    "log_event",
    "has_reminder_been_sent",
    "record_reminder_sent",
    "add_task",
    "get_tasks",
    "get_today_tasks",
    "complete_task",
    "delete_task",
    "update_task",
    "get_recent_purchases",
    "create_project",
    "add_project_member",
    "get_project",
    "get_user_projects",
    "get_user_events",
    # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Dashboard
    "get_shopping_items",
    "add_shopping_item",
    "toggle_shopping_item",
    "delete_shopping_item",
    "get_user_stats",
    "get_dashboard_counters",
    "toggle_task_status",
    "delete_event_by_id",
    "clear_user_data",
    # Notes functions
    "add_note",
    "get_user_notes",
    "get_note_by_id",
    "update_note",
    "delete_note",
]