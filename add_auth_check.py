#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã WebApp
"""
import os
import re

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (–∏—Å–∫–ª—é—á–∞–µ–º admin –∏ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã)
PAGES_TO_UPDATE = [
    'events.html',
    'project.html', 
    'task.html',
    'project_create.html',
    'task_add.html',
    'shopping.html',
    'event_create.html',
    'project_select.html',
    'task_edit.html',
    'settings.html',
    'timezone-settings.html'
]

STATIC_DIR = '/app/static'

def add_auth_script(file_path):
    """–î–æ–±–∞–≤–∏—Ç—å auth-check.js –≤ HTML —Ñ–∞–π–ª"""
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ auth-check.js
    if 'auth-check.js' in content:
        print(f"‚úÖ {os.path.basename(file_path)} - auth-check.js —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        return False
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ—Å–ª–µ telegram-web-app.js)
    pattern = r'(<script src="https://telegram\.org/js/telegram-web-app\.js"></script>)'
    replacement = r'\1\n    <script src="auth-check.js"></script>'
    
    new_content = re.sub(pattern, replacement, content)
    
    if new_content != content:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"‚úÖ {os.path.basename(file_path)} - –¥–æ–±–∞–≤–ª–µ–Ω auth-check.js")
        return True
    else:
        print(f"‚ö†Ô∏è {os.path.basename(file_path)} - –Ω–µ –Ω–∞–π–¥–µ–Ω telegram-web-app.js")
        return False

def wrap_dom_content_loaded(file_path):
    """–û–±–µ—Ä–Ω—É—Ç—å DOMContentLoaded –≤ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ AuthCheck.initAuthCheck
    if 'AuthCheck.initAuthCheck' in content:
        print(f"‚úÖ {os.path.basename(file_path)} - AuthCheck —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        return False
    
    # –ò—â–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ DOMContentLoaded
    patterns = [
        # –°–ª—É—á–∞–π 1: document.addEventListener('DOMContentLoaded', function() { ... });
        (
            r"document\.addEventListener\('DOMContentLoaded',\s*function\(\)\s*\{\s*\n(.*?)\n\s*\}\);",
            lambda m: f"""document.addEventListener('DOMContentLoaded', function() {{
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      AuthCheck.initAuthCheck(
        // Callback –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        (userId) => {{
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
{m.group(1)}
        }},
        // Callback –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        () => {{
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        }}
      );
    }});"""
        ),
        # –°–ª—É—á–∞–π 2: document.addEventListener("DOMContentLoaded", () => { ... });
        (
            r"document\.addEventListener\(\"DOMContentLoaded\",\s*\(\)\s*=>\s*\{\s*\n(.*?)\n\s*\}\);",
            lambda m: f"""document.addEventListener("DOMContentLoaded", () => {{
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      AuthCheck.initAuthCheck(
        // Callback –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        (userId) => {{
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
{m.group(1)}
        }},
        // Callback –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        () => {{
          console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        }}
      );
    }});"""
        )
    ]
    
    modified = False
    for pattern, replacement_func in patterns:
        match = re.search(pattern, content, re.DOTALL)
        if match:
            new_content = re.sub(pattern, replacement_func(match), content, flags=re.DOTALL)
            if new_content != content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                print(f"‚úÖ {os.path.basename(file_path)} - –æ–±–Ω–æ–≤–ª–µ–Ω DOMContentLoaded")
                modified = True
                break
    
    if not modified:
        print(f"‚ö†Ô∏è {os.path.basename(file_path)} - –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π DOMContentLoaded")
    
    return modified

def main():
    print("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ WebApp —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    updated_files = []
    
    for page in PAGES_TO_UPDATE:
        file_path = os.path.join(STATIC_DIR, page)
        
        if not os.path.exists(file_path):
            print(f"‚ùå {page} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {page}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç auth-check.js
        script_added = add_auth_script(file_path)
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º DOMContentLoaded
        dom_updated = wrap_dom_content_loaded(file_path)
        
        if script_added or dom_updated:
            updated_files.append(page)
    
    print(f"\n‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(updated_files)}")
    for file in updated_files:
        print(f"  - {file}")
    
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã WebApp!")

if __name__ == "__main__":
    main()