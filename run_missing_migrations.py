#!/usr/bin/env python3
"""
üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ë–î
DB_CONFIG = {
    'host': 'postgres.c107597.h2',
    'database': 'c107597_rptx_na4u_ru',
    'user': 'c107597_rptx_na4u_ru',
    'password': 'ZiKceXoydixol93',
    'port': 5432
}

def run_migration_20241220_120005(cursor):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ—Ç–æ–∫"""
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 20241220_120005_create_notes_table...")
    
    # –ó–∞–º–µ—Ç–∫–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS notes (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_notes_user_id ON notes(user_id);
    """)
    
    # –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_notes_created_at ON notes(created_at DESC);
    """)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("""
        INSERT INTO schema_migrations (version, name, executed_at) 
        VALUES (%s, %s, %s);
    """, ('20241220_120005', 'create_notes_table', datetime.now().isoformat()))
    
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 20241220_120005 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

def run_migration_20241220_120006(cursor):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã shopping_lists"""
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 20241220_120006_create_shopping_lists_table...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shopping_lists (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            project_id INTEGER NOT NULL,
            user_id BIGINT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
        );
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_user_id ON shopping_lists(user_id);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_project_id ON shopping_lists(project_id);")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü shopping_list_id –≤ —Ç–∞–±–ª–∏—Ü–µ purchases
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'purchases' AND column_name = 'shopping_list_id';
    """)
    column_exists = cursor.fetchone()
    
    if not column_exists:
        print("üîó –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—É purchases...")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫
        cursor.execute("""
            ALTER TABLE purchases 
            ADD COLUMN shopping_list_id INTEGER,
            ADD COLUMN url TEXT,
            ADD COLUMN comment TEXT;
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
        cursor.execute("""
            ALTER TABLE purchases 
            ADD CONSTRAINT fk_purchases_shopping_list 
            FOREIGN KEY (shopping_list_id) REFERENCES shopping_lists(id) ON DELETE SET NULL;
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_shopping_list_id ON purchases(shopping_list_id);")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
    print("üìù –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    cursor.execute("""
        INSERT INTO shopping_lists (name, project_id, user_id, created_at)
        SELECT DISTINCT 
            '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫' as name,
            COALESCE(p.project_id, (
                SELECT id FROM projects 
                WHERE owner_id = p.user_id 
                ORDER BY created_at ASC 
                LIMIT 1
            )) as project_id,
            p.user_id,
            CURRENT_TIMESTAMP
        FROM purchases p
        WHERE NOT EXISTS (
            SELECT 1 FROM shopping_lists sl 
            WHERE sl.user_id = p.user_id
        )
        AND p.user_id IS NOT NULL;
    """)
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    cursor.execute("""
        UPDATE purchases 
        SET shopping_list_id = (
            SELECT sl.id 
            FROM shopping_lists sl 
            WHERE sl.user_id = purchases.user_id 
            AND sl.name = '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫'
            LIMIT 1
        )
        WHERE shopping_list_id IS NULL;
    """)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("""
        INSERT INTO schema_migrations (version, name, executed_at) 
        VALUES (%s, %s, %s);
    """, ('20241220_120006', 'create_shopping_lists_table', datetime.now().isoformat()))
    
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 20241220_120006 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

def run_missing_migrations():
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ë–î...")
        conn = psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)
        cur = conn.cursor()
        
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        cur.execute('SELECT version FROM schema_migrations ORDER BY version;')
        executed_migrations = [row['version'] for row in cur.fetchall()]
        
        print(f'üìã –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {executed_migrations}')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        if '20241220_120005' not in executed_migrations:
            run_migration_20241220_120005(cur)
            conn.commit()
        else:
            print('‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è 20241220_120005 —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
        
        if '20241220_120006' not in executed_migrations:
            run_migration_20241220_120006(cur)
            conn.commit()
        else:
            print('‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è 20241220_120006 —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print('\nüîç –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–î:')
        print('=' * 50)
        
        cur.execute('SELECT table_name FROM information_schema.tables WHERE table_schema = \'public\' ORDER BY table_name;')
        tables = cur.fetchall()
        
        print('üìã –¢–∞–±–ª–∏—Ü—ã:')
        for table in tables:
            print(f'  - {table["table_name"]}')
        
        print('\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏–∏:')
        cur.execute('SELECT version, name, executed_at FROM schema_migrations ORDER BY version;')
        migrations = cur.fetchall()
        for migration in migrations:
            print(f'  ‚úÖ {migration["version"]} - {migration["name"]} ({migration["executed_at"]})')
        
        cur.close()
        conn.close()
        print('\n‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        if 'conn' in locals():
            conn.rollback()

if __name__ == '__main__':
    run_missing_migrations()