#!/usr/bin/env python3
"""
üîç –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –Ω–∞ NetAngels —á–µ—Ä–µ–∑ Docker
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î
"""

import os
import sys
import subprocess
import tempfile
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î NetAngels
DB_CONFIG = {
    'host': 'postgres.c107597.h2',
    'database': 'c107597_rptx_na4u_ru',
    'user': 'c107597_rptx_na4u_ru',
    'password': 'ZiKceXoydixol93',
    'port': 5432
}

def run_docker_command(python_script, timeout=120):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —á–µ—Ä–µ–∑ docker-compose"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_file = f'temp_check_{int(time.time())}.py'
        
        with open(temp_file, 'w') as f:
            f.write(python_script)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —á–µ—Ä–µ–∑ docker-compose
        exec_result = subprocess.run(
            ['docker-compose', 'exec', 'app', 'python', temp_file],
            capture_output=True, text=True, timeout=timeout
        )
        
        return exec_result.returncode == 0, exec_result.stdout, exec_result.stderr
        
    except subprocess.TimeoutExpired:
        return False, "", f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (>{timeout}s)"
    except Exception as e:
        return False, "", str(e)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'temp_file' in locals():
            try:
                os.unlink(temp_file)
            except:
                pass

def check_db_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î NetAngels...")
    
    script = f'''
import psycopg2
import sys

try:
    conn = psycopg2.connect(
        host='{DB_CONFIG["host"]}',
        database='{DB_CONFIG["database"]}',
        user='{DB_CONFIG["user"]}',
        password='{DB_CONFIG["password"]}',
        port={DB_CONFIG["port"]},
        connect_timeout=10
    )
    cursor = conn.cursor()
    cursor.execute("SELECT version();")
    version = cursor.fetchone()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î NetAngels —É—Å–ø–µ—à–Ω–æ")
    print(f"PostgreSQL –≤–µ—Ä—Å–∏—è: {{version[0]}}")
    
    cursor.execute("SELECT current_database();")
    db_name = cursor.fetchone()
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {{db_name[0]}}")
    
    cursor.close()
    conn.close()
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {{e}}")
    sys.exit(1)
'''
    
    success, stdout, stderr = run_docker_command(script)
    if success:
        print(stdout)
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
        return False

def get_table_structure():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –ë–î"""
    print("\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...")
    
    script = f'''
import psycopg2
from psycopg2.extras import RealDictCursor

try:
    conn = psycopg2.connect(
        host='{DB_CONFIG["host"]}',
        database='{DB_CONFIG["database"]}',
        user='{DB_CONFIG["user"]}',
        password='{DB_CONFIG["password"]}',
        port={DB_CONFIG["port"]},
        cursor_factory=RealDictCursor
    )
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name;
    """)
    tables = cursor.fetchall()
    
    print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
    for table in tables:
        print(f"  - {{table['table_name']}}")
    
    print(f"\\n–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {{len(tables)}}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for table in tables:
        table_name = table['table_name']
        print(f"\\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã '{{table_name}}':")
        
        cursor.execute("""
            SELECT 
                column_name, 
                data_type, 
                is_nullable, 
                column_default,
                character_maximum_length
            FROM information_schema.columns 
            WHERE table_name = %s 
            ORDER BY ordinal_position;
        """, (table_name,))
        
        columns = cursor.fetchall()
        for col in columns:
            nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
            default = f" DEFAULT {{col['column_default']}}" if col['column_default'] else ""
            length = f"({{col['character_maximum_length']}})" if col['character_maximum_length'] else ""
            print(f"  {{col['column_name']}}: {{col['data_type']}}{{length}} {{nullable}}{{default}}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute(f"SELECT COUNT(*) FROM {{table_name}};")
        count = cursor.fetchone()['count']
        print(f"  üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {{count}}")
    
    cursor.close()
    conn.close()
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {{e}}")
    import traceback
    traceback.print_exc()
'''
    
    success, stdout, stderr = run_docker_command(script)
    if success:
        print(stdout)
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
        return False

def check_migrations_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    script = f'''
import psycopg2
from psycopg2.extras import RealDictCursor

try:
    conn = psycopg2.connect(
        host='{DB_CONFIG["host"]}',
        database='{DB_CONFIG["database"]}',
        user='{DB_CONFIG["user"]}',
        password='{DB_CONFIG["password"]}',
        port={DB_CONFIG["port"]},
        cursor_factory=RealDictCursor
    )
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'schema_migrations'
        );
    """)
    
    migrations_table_exists = cursor.fetchone()['exists']
    
    if migrations_table_exists:
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ schema_migrations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
        cursor.execute("""
            SELECT version, name, executed_at 
            FROM schema_migrations 
            ORDER BY version;
        """)
        
        migrations = cursor.fetchall()
        if migrations:
            print(f"\\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ({{len(migrations)}}):")
            for migration in migrations:
                print(f"  {{migration['version']}}: {{migration['name']}}")
                print(f"    –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {{migration['executed_at']}}")
        else:
            print("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ schema_migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å")
    
    cursor.close()
    conn.close()
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {{e}}")
'''
    
    success, stdout, stderr = run_docker_command(script)
    if success:
        print(stdout)
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
        return False

def check_indexes():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –ë–î"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
    
    script = f'''
import psycopg2
from psycopg2.extras import RealDictCursor

try:
    conn = psycopg2.connect(
        host='{DB_CONFIG["host"]}',
        database='{DB_CONFIG["database"]}',
        user='{DB_CONFIG["user"]}',
        password='{DB_CONFIG["password"]}',
        port={DB_CONFIG["port"]},
        cursor_factory=RealDictCursor
    )
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
    cursor.execute("""
        SELECT 
            schemaname,
            tablename,
            indexname,
            indexdef
        FROM pg_indexes 
        WHERE schemaname = 'public'
        ORDER BY tablename, indexname;
    """)
    
    indexes = cursor.fetchall()
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã ({{len(indexes)}}):")
    current_table = None
    
    for idx in indexes:
        if current_table != idx['tablename']:
            current_table = idx['tablename']
            print(f"\\nüîç –¢–∞–±–ª–∏—Ü–∞: {{current_table}}")
        
        print(f"  - {{idx['indexname']}}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø –∏–Ω–¥–µ–∫—Å–∞, –Ω–µ –≤—Å—é –∫–æ–º–∞–Ω–¥—É CREATE
        if 'UNIQUE' in idx['indexdef']:
            print(f"    –¢–∏–ø: UNIQUE")
        elif 'PRIMARY KEY' in idx['indexdef']:
            print(f"    –¢–∏–ø: PRIMARY KEY")
        else:
            print(f"    –¢–∏–ø: INDEX")
    
    cursor.close()
    conn.close()
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {{e}}")
'''
    
    success, stdout, stderr = run_docker_command(script)
    if success:
        print(stdout)
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
        return False

def compare_with_local():
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    print("\nüîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
    
    script = f'''
import psycopg2
from psycopg2.extras import RealDictCursor

def get_tables(config):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü"""
    conn = psycopg2.connect(**config, cursor_factory=RealDictCursor)
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name;
    """)
    tables = [row['table_name'] for row in cursor.fetchall()]
    
    cursor.close()
    conn.close()
    return tables

try:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î
    remote_config = {{
        'host': '{DB_CONFIG["host"]}',
        'database': '{DB_CONFIG["database"]}',
        'user': '{DB_CONFIG["user"]}',
        'password': '{DB_CONFIG["password"]}',
        'port': {DB_CONFIG["port"]}
    }}
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    local_config = {{
        'host': 'db',
        'database': 'telegram_app',
        'user': 'postgres',
        'password': 'password',
        'port': 5432
    }}
    
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü...")
    remote_tables = get_tables(remote_config)
    local_tables = get_tables(local_config)
    
    print(f"\\nüìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü:")
    print(f"  –£–¥–∞–ª–µ–Ω–Ω–∞—è –ë–î: {{len(remote_tables)}} —Ç–∞–±–ª–∏—Ü")
    print(f"  –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î: {{len(local_tables)}} —Ç–∞–±–ª–∏—Ü")
    
    # –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î
    remote_only = set(remote_tables) - set(local_tables)
    if remote_only:
        print(f"\\nüî¥ –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î:")
        for table in sorted(remote_only):
            print(f"  - {{table}}")
    
    # –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    local_only = set(local_tables) - set(remote_tables)
    if local_only:
        print(f"\\nüü° –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î:")
        for table in sorted(local_only):
            print(f"  - {{table}}")
    
    # –û–±—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    common = set(remote_tables) & set(local_tables)
    if common:
        print(f"\\nüü¢ –û–±—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã ({{len(common)}}):")
        for table in sorted(common):
            print(f"  - {{table}}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {{e}}")
    import traceback
    traceback.print_exc()
'''
    
    success, stdout, stderr = run_docker_command(script)
    if success:
        print(stdout)
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –Ω–∞ NetAngels —á–µ—Ä–µ–∑ Docker")
    print(f"üîó –£–¥–∞–ª–µ–Ω–Ω–∞—è –ë–î: {DB_CONFIG['host']}:{DB_CONFIG['port']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
    try:
        subprocess.run(['docker', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker")
        sys.exit(1)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not check_db_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            sys.exit(1)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        if not get_table_structure():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü")
            sys.exit(1)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
        if not check_migrations_status():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
            sys.exit(1)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        if not check_indexes():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã")
            sys.exit(1)
        
        # 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        if not compare_with_local():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
            sys.exit(1)
        
        print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()