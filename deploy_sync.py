#!/usr/bin/env python3
"""
üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ø—Ä–æ–¥–∞–∫—à–Ω
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î
"""

import os
import sys
import argparse
from dotenv import load_dotenv
from migrations.migration_manager import MigrationManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_local_database_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (Docker)"""
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
    if os.getenv("DATABASE_URL"):
        return os.getenv("DATABASE_URL")
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–∞—Ä—É–∂–∏ Docker, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
    return "postgresql://postgres:password@localhost:5432/telegram_app"

def get_production_database_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î (NetAngels)"""
    return "postgresql://c107597_rptx_na4u_ru:ZiKceXoydixol93@postgres.c107597.h2:5432/c107597_rptx_na4u_ru"

def sync_local_to_production():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å –ø—Ä–æ–¥–∞–∫—à–Ω"""
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —Å –ø—Ä–æ–¥–∞–∫—à–Ω...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î:")
    local_manager = MigrationManager(get_local_database_url())
    local_manager.status()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    local_pending = local_manager.get_pending_migrations()
    if local_pending:
        print(f"\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º {len(local_pending)} –º–∏–≥—Ä–∞—Ü–∏–π –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        if not local_manager.migrate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
            return False
    
    # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î:")
    prod_manager = MigrationManager(get_production_database_url())
    prod_manager.status()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
    prod_pending = prod_manager.get_pending_migrations()
    if prod_pending:
        print(f"\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º {len(prod_pending)} –º–∏–≥—Ä–∞—Ü–∏–π –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î...")
        if not prod_manager.migrate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î")
            return False
    else:
        print("‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –ë–î —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    print("\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True

def check_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±–µ–∏—Ö –ë–î"""
    print("üìä –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (Docker):")
    try:
        local_manager = MigrationManager(get_local_database_url())
        local_manager.status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
    
    print("\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î (NetAngels):")
    try:
        prod_manager = MigrationManager(get_production_database_url())
        prod_manager.status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î: {e}")

def create_migration_template(name: str):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    from datetime import datetime
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{timestamp}_{name}.py"
    filepath = os.path.join("migrations", "scripts", filename)
    
    template = f'''"""
{name.replace('_', ' ').title()}
"""

def up(cursor):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
    
    # –í–∞—à –∫–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # cursor.execute("ALTER TABLE users ADD COLUMN new_field TEXT;")
    
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {name} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")


def down(cursor):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
    
    # –ö–æ–¥ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # cursor.execute("ALTER TABLE users DROP COLUMN new_field;")
    
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {name} –æ—Ç–∫–∞—á–µ–Ω–∞")
'''
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(template)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏: {filepath}")
    print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–î")

def dump_schemas():
    """–°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø—ã —Å—Ö–µ–º –æ–±–µ–∏—Ö –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–æ–≤ —Å—Ö–µ–º...")
    
    try:
        local_manager = MigrationManager(get_local_database_url())
        local_dump = local_manager.create_schema_dump("local_schema.sql")
        if local_dump:
            print(f"‚úÖ –î–∞–º–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {local_dump}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
    
    try:
        prod_manager = MigrationManager(get_production_database_url())
        prod_dump = prod_manager.create_schema_dump("production_schema.sql")
        if prod_dump:
            print(f"‚úÖ –î–∞–º–ø –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î: {prod_dump}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î: {e}")

def main():
    parser = argparse.ArgumentParser(description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ë–î –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ø—Ä–æ–¥–∞–∫—à–Ω")
    parser.add_argument('command', choices=['sync', 'status', 'create', 'dump'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--name', help='–ò–º—è –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã create)')
    
    args = parser.parse_args()
    
    if args.command == 'sync':
        success = sync_local_to_production()
        sys.exit(0 if success else 1)
    
    elif args.command == 'status':
        check_status()
    
    elif args.command == 'create':
        if not args.name:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: --name my_migration_name")
            sys.exit(1)
        create_migration_template(args.name)
    
    elif args.command == 'dump':
        dump_schemas()

if __name__ == "__main__":
    main()