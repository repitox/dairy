"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os
from datetime import datetime

def get_database_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_url = os.getenv('DATABASE_URL')
    if not db_url:
        raise Exception("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return psycopg2.connect(db_url, cursor_factory=RealDictCursor)

def table_exists(cursor, table_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞"""
    cursor.execute("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name = %s
        );
    """, (table_name,))
    result = cursor.fetchone()
    return result['exists'] if result else False

def column_exists(cursor, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    cursor.execute("""
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = %s AND column_name = %s
        );
    """, (table_name, column_name))
    result = cursor.fetchone()
    return result['exists'] if result else False

def create_purchases_table(cursor):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É purchases –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping"""
    if not table_exists(cursor, 'purchases'):
        print("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping
        cursor.execute("""
            CREATE TABLE purchases AS 
            SELECT 
                id,
                user_id,
                project_id,
                item as name,
                quantity,
                CASE 
                    WHEN status = '–ö—É–ø–ª–µ–Ω–æ' THEN true 
                    ELSE false 
                END as completed,
                created_at,
                NULL::DECIMAL as price,
                'other'::TEXT as category,
                NULL::INTEGER as shopping_list_id,
                NULL::TEXT as url,
                NULL::TEXT as comment
            FROM shopping;
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        cursor.execute("ALTER TABLE purchases ADD PRIMARY KEY (id);")
        cursor.execute("ALTER TABLE purchases ALTER COLUMN name SET NOT NULL;")
        cursor.execute("ALTER TABLE purchases ALTER COLUMN quantity SET NOT NULL;")
        cursor.execute("ALTER TABLE purchases ALTER COLUMN completed SET DEFAULT false;")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_completed ON purchases(completed);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_category ON purchases(category);")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ purchases —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ purchases —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        if not column_exists(cursor, 'purchases', 'shopping_list_id'):
            cursor.execute("ALTER TABLE purchases ADD COLUMN shopping_list_id INTEGER")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ shopping_list_id")
        
        if not column_exists(cursor, 'purchases', 'url'):
            cursor.execute("ALTER TABLE purchases ADD COLUMN url TEXT")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ url")
            
        if not column_exists(cursor, 'purchases', 'comment'):
            cursor.execute("ALTER TABLE purchases ADD COLUMN comment TEXT")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ comment")

def create_shopping_lists_table(cursor):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É shopping_lists"""
    if not table_exists(cursor, 'shopping_lists'):
        print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É shopping_lists...")
        
        cursor.execute("""
            CREATE TABLE shopping_lists (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                project_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_user_id ON shopping_lists(user_id);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_project_id ON shopping_lists(project_id);")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ shopping_lists —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ shopping_lists —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def create_notes_table(cursor):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É notes, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    if not table_exists(cursor, 'notes'):
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notes...")
        
        cursor.execute("""
            CREATE TABLE notes (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                content TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_notes_user_id ON notes(user_id);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_notes_created_at ON notes(created_at);")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ notes —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ notes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def create_events_table(cursor):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É events, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    if not table_exists(cursor, 'events'):
        print("üìÖ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É events...")
        
        cursor.execute("""
            CREATE TABLE events (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                project_id INTEGER,
                title TEXT NOT NULL,
                location TEXT,
                start_at TEXT,
                end_at TEXT,
                active BOOLEAN DEFAULT TRUE,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                description TEXT
            );
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_user_id ON events(user_id);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_start_at ON events(start_at);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_active ON events(active);")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ events —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def initialize_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - {datetime.now().isoformat()}")
        
        with get_database_connection() as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                create_purchases_table(cur)
                create_shopping_lists_table(cur)
                create_notes_table(cur)
                create_events_table(cur)
                
                conn.commit()
                print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == "__main__":
    initialize_database()