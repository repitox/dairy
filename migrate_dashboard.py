#!/usr/bin/env python3
"""
üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Dashboard –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
from dotenv import load_dotenv
load_dotenv()
import psycopg2
from psycopg2.extras import RealDictCursor

DATABASE_URL = os.getenv("DATABASE_URL")

def get_conn():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def migrate_database():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Dashboard...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                
                # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç) –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º shopping
                print("üì¶ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫—É–ø–æ–∫...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ purchases
                cur.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'purchases'
                    );
                """)
                result = cur.fetchone()
                purchases_exists = result['exists'] if result else False
                
                if not purchases_exists:
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping
                    cur.execute("""
                        CREATE TABLE purchases AS 
                        SELECT 
                            id,
                            user_id,
                            project_id,
                            item as name,
                            quantity,
                            CASE 
                                WHEN status = '–ö—É–ø–ª–µ–Ω–æ' THEN true 
                                ELSE false 
                            END as completed,
                            created_at,
                            NULL::DECIMAL as price,
                            'other'::TEXT as category
                        FROM shopping;
                    """)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                    cur.execute("ALTER TABLE purchases ADD PRIMARY KEY (id);")
                    cur.execute("ALTER TABLE purchases ALTER COLUMN name SET NOT NULL;")
                    cur.execute("ALTER TABLE purchases ALTER COLUMN quantity SET NOT NULL;")
                    cur.execute("ALTER TABLE purchases ALTER COLUMN completed SET DEFAULT false;")
                    
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ purchases —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping")
                else:
                    print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ purchases —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ purchases (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
                print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ purchases...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è price
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'purchases' AND column_name = 'price';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE purchases ADD COLUMN price DECIMAL(10,2);")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ price")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è category
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'purchases' AND column_name = 'category';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE purchases ADD COLUMN category TEXT DEFAULT 'other';")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ category")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è completed
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'purchases' AND column_name = 'completed';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE purchases ADD COLUMN completed BOOLEAN DEFAULT false;")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ completed")
                
                # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É events –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å—Ç—Ä–µ—á
                print("üìÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ type –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'events' AND column_name = 'type';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE events ADD COLUMN type TEXT DEFAULT 'other';")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ type –≤ events")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ participants –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'events' AND column_name = 'participants';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE events ADD COLUMN participants TEXT;")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ participants –≤ events")
                
                # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É tasks –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                print("üìã –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞—á...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ priority –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'tasks' AND column_name = 'priority';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE tasks ADD COLUMN priority TEXT DEFAULT 'medium';")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ priority –≤ tasks")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'tasks' AND column_name = 'category';
                """)
                if not cur.fetchone():
                    cur.execute("ALTER TABLE tasks ADD COLUMN category TEXT DEFAULT 'general';")
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ category –≤ tasks")
                
                # 5. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                print("üöÄ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
                
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cur.execute("""
                    CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id);
                """)
                cur.execute("""
                    CREATE INDEX IF NOT EXISTS idx_events_user_id ON events(user_id);
                """)
                cur.execute("""
                    CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);
                """)
                
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                cur.execute("""
                    CREATE INDEX IF NOT EXISTS idx_purchases_completed ON purchases(completed);
                """)
                cur.execute("""
                    CREATE INDEX IF NOT EXISTS idx_tasks_completed ON tasks(completed);
                """)
                cur.execute("""
                    CREATE INDEX IF NOT EXISTS idx_events_start_at ON events(start_at);
                """)
                
                print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                
                # 6. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                print("‚öôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã
                cur.execute("""
                    SELECT DISTINCT u.telegram_id 
                    FROM users u 
                    LEFT JOIN user_settings us ON u.telegram_id = us.user_id AND us.key = 'theme'
                    WHERE us.user_id IS NULL;
                """)
                users_without_theme = cur.fetchall()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                for user in users_without_theme:
                    user_id = user['user_id']
                    
                    # –¢–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    cur.execute("""
                        INSERT INTO user_settings (user_id, key, value) 
                        VALUES (%s, 'theme', 'auto')
                        ON CONFLICT (user_id, key) DO NOTHING;
                    """, (user_id,))
                    
                    # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    cur.execute("""
                        INSERT INTO user_settings (user_id, key, value) 
                        VALUES (%s, 'email_notifications', 'false')
                        ON CONFLICT (user_id, key) DO NOTHING;
                    """, (user_id,))
                    
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    cur.execute("""
                        INSERT INTO user_settings (user_id, key, value) 
                        VALUES (%s, 'task_reminders', 'true')
                        ON CONFLICT (user_id, key) DO NOTHING;
                    """, (user_id,))
                
                if users_without_theme:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {len(users_without_theme)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    print("‚ÑπÔ∏è –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                
                # 7. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                print("üëÅÔ∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞...")
                
                # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                cur.execute("""
                    CREATE OR REPLACE VIEW active_tasks AS
                    SELECT * FROM tasks WHERE completed = false;
                """)
                
                # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                cur.execute("""
                    CREATE OR REPLACE VIEW upcoming_events AS
                    SELECT * FROM events 
                    WHERE start_at >= CURRENT_DATE::text AND active = true
                    ORDER BY start_at;
                """)
                
                # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
                cur.execute("""
                    CREATE OR REPLACE VIEW active_purchases AS
                    SELECT * FROM purchases WHERE completed = false;
                """)
                
                print("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
                
                conn.commit()
                print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise

def check_migration_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                    SELECT table_name FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name;
                """)
                tables = [row['table_name'] for row in cur.fetchall()]
                print(f"üìä –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {', '.join(tables)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ purchases
                if 'purchases' in tables:
                    cur.execute("""
                        SELECT column_name, data_type, is_nullable, column_default
                        FROM information_schema.columns 
                        WHERE table_name = 'purchases'
                        ORDER BY ordinal_position;
                    """)
                    columns = cur.fetchall()
                    print("üì¶ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ purchases:")
                    for col in columns:
                        print(f"   - {col['column_name']}: {col['data_type']} (nullable: {col['is_nullable']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("""
                    SELECT key, COUNT(*) as count 
                    FROM user_settings 
                    GROUP BY key 
                    ORDER BY key;
                """)
                settings = cur.fetchall()
                print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for setting in settings:
                    print(f"   - {setting['key']}: {setting['count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è Dashboard –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    check_migration_status()
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    migrate_database()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
    check_migration_status()
    
    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! Dashboard –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")