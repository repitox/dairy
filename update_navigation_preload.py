#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è preload –∏ skeleton CSS 
–≤–æ –≤—Å–µ HTML —Ñ–∞–π–ª—ã dashboard –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è "–ø—Ä—ã–≥–∞–Ω–∏—è" –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import os
import re
from pathlib import Path

def update_html_file(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—è preload –∏ skeleton CSS"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ preload –∏ skeleton CSS
    if 'navigation-skeleton.css' in content and 'preload' in content:
        print(f"‚úÖ {file_path.name} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ò—â–µ–º –±–ª–æ–∫ head –∏ —Ç–µ–≥ title
    title_pattern = r'(<title>.*?</title>)'
    title_match = re.search(title_pattern, content, re.IGNORECASE | re.DOTALL)
    
    if not title_match:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ title –≤ {file_path.name}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ preload –∏ skeleton CSS
    preload_block = '''
    <!-- Preload –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ -->
    <link rel="preload" href="navigation-component.html" as="fetch" crossorigin>
    <link rel="preload" href="navigation.css" as="style">
    <link rel="preload" href="navigation-skeleton.css" as="style">'''
    
    # –ò—â–µ–º –≥–¥–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è navigation.css
    nav_css_pattern = r'(<link[^>]*href="navigation\.css"[^>]*>)'
    nav_css_match = re.search(nav_css_pattern, content, re.IGNORECASE)
    
    if nav_css_match:
        # –î–æ–±–∞–≤–ª—è–µ–º skeleton CSS –ø–æ—Å–ª–µ navigation.css
        skeleton_css = '\n    <link rel="stylesheet" href="navigation-skeleton.css">'
        content = content.replace(nav_css_match.group(1), nav_css_match.group(1) + skeleton_css)
        
        # –î–æ–±–∞–≤–ª—è–µ–º preload –±–ª–æ–∫ –ø–æ—Å–ª–µ title
        content = content.replace(title_match.group(1), title_match.group(1) + preload_block)
        
    else:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω navigation.css –≤ {file_path.name}")
        return False
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {file_path.name}")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤"""
    
    dashboard_dir = Path('/Users/d.dubenetskiy/Documents/tg_project/dashboard')
    
    if not dashboard_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã —Å navigation-loader.js
    html_files = []
    for html_file in dashboard_dir.glob('*.html'):
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'navigation-loader.js' in content:
                    html_files.append(html_file)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {html_file.name}: {e}")
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π:")
    for file in html_files:
        print(f"  - {file.name}")
    
    print("\nüîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    updated_count = 0
    for html_file in html_files:
        try:
            if update_html_file(html_file):
                updated_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {html_file.name}: {e}")
    
    print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∏–∑ {len(html_files)} —Ñ–∞–π–ª–æ–≤")
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
    print("  ‚úÖ Preload –¥–ª—è navigation-component.html")
    print("  ‚úÖ Preload –¥–ª—è navigation.css –∏ navigation-skeleton.css")
    print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ navigation-skeleton.css")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±–µ–∑ '–ø—Ä—ã–≥–∞–Ω–∏—è'!")

if __name__ == "__main__":
    main()