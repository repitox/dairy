#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import requests
import json
import psycopg2
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
PROD_API_URL = "https://rptx.na4u.ru"
DB_CONFIG = {
    "host": "postgres.c107597.h2",
    "database": "c107597_rptx_na4u_ru",
    "user": "c107597_rptx_na4u_ru",
    "password": "ZiKceXoydixol93"
}

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT tablename 
            FROM pg_tables 
            WHERE schemaname = 'public' 
            ORDER BY tablename;
        """)
        
        tables = cursor.fetchall()
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        expected_tables = ['users', 'projects', 'tasks', 'events', 'purchases', 'notes', 'settings']
        existing_tables = [table[0] for table in tables]
        
        for table in expected_tables:
            if table in existing_tables:
                print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        for table in expected_tables:
            if table in existing_tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table};")
                count = cursor.fetchone()[0]
                print(f"   üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã purchases
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'purchases' 
            ORDER BY ordinal_position;
        """)
        
        purchases_columns = cursor.fetchall()
        print(f"   üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ purchases:")
        for col in purchases_columns:
            print(f"      - {col[0]}: {col[1]} ({'NULL' if col[2] == 'YES' else 'NOT NULL'})")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
    
    test_user_id = 1
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    endpoints_to_check = [
        ("GET", "/api/projects", {"user_id": test_user_id}, "–ü—Ä–æ–µ–∫—Ç—ã"),
        ("GET", "/api/tasks", {"user_id": test_user_id}, "–ó–∞–¥–∞—á–∏"),
        ("GET", "/api/tasks/today", {"user_id": test_user_id}, "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        ("GET", "/api/events", {"user_id": test_user_id}, "–°–æ–±—ã—Ç–∏—è"),
        ("GET", "/api/shopping", {"user_id": test_user_id}, "–ü–æ–∫—É–ø–∫–∏"),
        ("GET", "/api/notes", {"user_id": test_user_id}, "–ó–∞–º–µ—Ç–∫–∏"),
        ("GET", "/api/settings", {"user_id": test_user_id}, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]
    
    success_count = 0
    total_count = len(endpoints_to_check)
    
    for method, endpoint, params, description in endpoints_to_check:
        try:
            url = f"{PROD_API_URL}{endpoint}"
            response = requests.get(url, params=params, headers=headers, timeout=10)
            
            if response.status_code == 200:
                print(f"   ‚úÖ {description}: {response.status_code}")
                success_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
                try:
                    data = response.json()
                    if isinstance(data, list):
                        print(f"      üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    elif isinstance(data, dict) and "id" in data:
                        print(f"      üÜî ID: {data['id']}")
                except:
                    pass
                    
            else:
                print(f"   ‚ùå {description}: {response.status_code}")
                if response.text:
                    print(f"      Error: {response.text[:100]}...")
                    
        except Exception as e:
            print(f"   ‚ùå {description}: {str(e)}")
    
    print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç")
    return success_count / total_count

def test_crud_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    test_user_id = 1
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    print("   üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏...")
    note_data = {
        "title": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ {datetime.now().strftime('%H:%M:%S')}",
        "content": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "user_id": test_user_id
    }
    
    try:
        response = requests.post(
            f"{PROD_API_URL}/api/notes",
            json=note_data,
            headers=headers,
            timeout=10
        )
        
        if response.status_code in [200, 201]:
            print(f"   ‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {response.status_code}")
            note_id = response.json().get("id")
            print(f"      üÜî ID: {note_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
            if note_id:
                get_response = requests.get(
                    f"{PROD_API_URL}/api/notes/{note_id}",
                    params={"user_id": test_user_id},
                    headers=headers,
                    timeout=10
                )
                
                if get_response.status_code == 200:
                    print(f"   ‚úÖ –ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {get_response.status_code}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {get_response.status_code}")
            
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {response.status_code}")
            print(f"      Error: {response.text[:100]}...")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    print("   üõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏...")
    shopping_data = {
        "name": f"–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ {datetime.now().strftime('%H:%M:%S')}",
        "quantity": 1,
        "price": 99.99,
        "user_id": test_user_id
    }
    
    try:
        response = requests.post(
            f"{PROD_API_URL}/api/shopping",
            json=shopping_data,
            headers=headers,
            timeout=10
        )
        
        if response.status_code in [200, 201]:
            print(f"   ‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {response.status_code}")
            shopping_id = response.json().get("id")
            print(f"      üÜî ID: {shopping_id}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: {response.status_code}")
            print(f"      Error: {response.text[:100]}...")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {e}")

def check_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API...")
    
    docs_endpoints = [
        "/docs",
        "/redoc",
        "/openapi.json"
    ]
    
    for endpoint in docs_endpoints:
        try:
            response = requests.get(f"{PROD_API_URL}{endpoint}", timeout=10)
            if response.status_code == 200:
                print(f"   ‚úÖ {endpoint}: –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ùå {endpoint}: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {endpoint}: {str(e)}")

def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_ok = check_database_connection()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    api_success_rate = check_api_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD
    test_crud_operations()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    check_documentation()
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    print("üìä –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if db_ok:
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –≤ –ø–æ—Ä—è–¥–∫–µ")
    else:
        print("   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    if api_success_rate > 0.8:
        print(f"   ‚úÖ API: –≤ –ø–æ—Ä—è–¥–∫–µ ({api_success_rate:.1%} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç)")
    elif api_success_rate > 0.5:
        print(f"   ‚ö†Ô∏è  API: —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ({api_success_rate:.1%} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç)")
    else:
        print(f"   ‚ùå API: –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ({api_success_rate:.1%} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if not db_ok:
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç fix_production_db.sql")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    if api_success_rate < 0.8:
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    print("\nüîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:")
    print("ssh c107597@h60.netangels.ru")
    print()
    print("# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î:")
    print("psql -h postgres.c107597.h2 -U c107597_rptx_na4u_ru -d c107597_rptx_na4u_ru -f fix_production_db.sql")
    print()
    print("# –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
    print("python check_production_status.py")

if __name__ == "__main__":
    main()