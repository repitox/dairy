#!/usr/bin/env python3
"""
üñ•Ô∏è –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ NetAngels
–≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–º
"""

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î NetAngels
DB_CONFIG = {
    'host': 'postgres.c107597.h2',
    'database': 'c107597_rptx_na4u_ru',
    'user': 'c107597_rptx_na4u_ru',
    'password': 'ZiKceXoydixol93',
    'port': 5432
}

def get_conn():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)

def ensure_migrations_table():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS schema_migrations (
                        id SERIAL PRIMARY KEY,
                        version VARCHAR(255) UNIQUE NOT NULL,
                        name TEXT NOT NULL,
                        executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        checksum TEXT
                    );
                """)
                conn.commit()
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        raise

def get_executed_migrations():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT version FROM schema_migrations ORDER BY version")
                return [row['version'] for row in cur.fetchall()]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return []

def execute_migration(version, name, migration_func):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é"""
    print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: {version} - {name}")
    
    try:
        with get_conn() as conn:
            try:
                with conn.cursor() as cur:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
                    migration_func(cur)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
                    cur.execute("""
                        INSERT INTO schema_migrations (version, name)
                        VALUES (%s, %s)
                    """, (version, name))
                    
                conn.commit()
                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                conn.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
        return False

# === –ú–ò–ì–†–ê–¶–ò–ò ===

def migration_20241220_120000_initial_schema(cursor):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º—ã –ë–î"""
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            first_name TEXT,
            username TEXT,
            registered_at TEXT
        );
    """)

    # –ü—Ä–æ–µ–∫—Ç—ã
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS projects (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            owner_id BIGINT NOT NULL REFERENCES users(user_id),
            color TEXT,
            created_at TEXT
        );
    """)

    # –ü–æ–∫—É–ø–∫–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shopping (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            project_id INTEGER REFERENCES projects(id),
            item TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            status TEXT DEFAULT '–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å',
            created_at TEXT
        );
    """)

    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS events (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            project_id INTEGER REFERENCES projects(id),
            title TEXT NOT NULL,
            location TEXT NOT NULL,
            start_at TEXT NOT NULL,
            end_at TEXT NOT NULL,
            active BOOLEAN DEFAULT TRUE,
            created_at TEXT,
            description TEXT
        );
    """)

    # –õ–æ–≥–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS logs (
            id SERIAL PRIMARY KEY,
            type TEXT NOT NULL,
            message TEXT NOT NULL,
            created_at TEXT
        );
    """)

    # –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reminder_logs (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            event_id INTEGER NOT NULL,
            sent_at TEXT
        );
    """)

    # –ó–∞–¥–∞—á–∏
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            project_id INTEGER REFERENCES projects(id),
            title TEXT NOT NULL,
            description TEXT,
            due_date TEXT,
            priority TEXT DEFAULT '–æ–±—ã—á–Ω–∞—è',
            completed BOOLEAN DEFAULT FALSE,
            created_at TEXT,
            completed_at TEXT
        );
    """)

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS project_members (
            id SERIAL PRIMARY KEY,
            project_id INTEGER REFERENCES projects(id),
            user_id BIGINT NOT NULL,
            joined_at TEXT,
            UNIQUE (project_id, user_id)
        );
    """)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id BIGINT NOT NULL,
            key TEXT NOT NULL,
            value TEXT,
            PRIMARY KEY (user_id, key)
        );
    """)

    print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")

def migration_20241220_120001_add_extended_fields(cursor):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ events
    cursor.execute("""
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'events' AND column_name = 'type';
    """)
    if not cursor.fetchone():
        cursor.execute("ALTER TABLE events ADD COLUMN type TEXT DEFAULT 'other';")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ type –≤ events")
    
    cursor.execute("""
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'events' AND column_name = 'participants';
    """)
    if not cursor.fetchone():
        cursor.execute("ALTER TABLE events ADD COLUMN participants TEXT;")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ participants –≤ events")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ tasks
    cursor.execute("""
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'tasks' AND column_name = 'category';
    """)
    if not cursor.fetchone():
        cursor.execute("ALTER TABLE tasks ADD COLUMN category TEXT DEFAULT 'general';")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ category –≤ tasks")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_user_id ON events(user_id);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_start_at ON events(start_at);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_tasks_completed ON tasks(completed);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_user_id ON shopping(user_id);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_status ON shopping(status);")
    
    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

def migration_20241220_120002_create_purchases_table(cursor):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã purchases –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ purchases
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'purchases'
        );
    """)
    result = cursor.fetchone()
    # result –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    if hasattr(result, 'keys'):  # RealDictCursor
        purchases_exists = result['exists'] if result else False
    else:  # –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        purchases_exists = result[0] if result else False
    
    if not purchases_exists:
        print("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É purchases –Ω–∞ –æ—Å–Ω–æ–≤–µ shopping
        cursor.execute("""
            CREATE TABLE purchases AS 
            SELECT 
                id,
                user_id,
                project_id,
                item as name,
                quantity,
                CASE 
                    WHEN status = '–ö—É–ø–ª–µ–Ω–æ' THEN true 
                    ELSE false 
                END as completed,
                created_at,
                NULL::DECIMAL as price,
                'other'::TEXT as category
            FROM shopping;
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        cursor.execute("ALTER TABLE purchases ADD PRIMARY KEY (id);")
        cursor.execute("ALTER TABLE purchases ALTER COLUMN name SET NOT NULL;")
        cursor.execute("ALTER TABLE purchases ALTER COLUMN quantity SET NOT NULL;")
        cursor.execute("ALTER TABLE purchases ALTER COLUMN completed SET DEFAULT false;")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_completed ON purchases(completed);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_category ON purchases(category);")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ purchases —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ purchases —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def migration_20241220_120003_default_user_settings(cursor):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã
    cursor.execute("""
        SELECT DISTINCT u.user_id 
        FROM users u 
        LEFT JOIN user_settings us ON u.user_id = us.user_id AND us.key = 'theme'
        WHERE us.user_id IS NULL;
    """)
    users_without_theme = cursor.fetchall()
    
    for user in users_without_theme:
        # user –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
        if hasattr(user, 'keys'):  # RealDictCursor
            user_id = user['user_id']
        else:  # –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä
            user_id = user[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute("""
            INSERT INTO user_settings (user_id, key, value) 
            VALUES (%s, 'theme', 'auto')
            ON CONFLICT (user_id, key) DO NOTHING;
        """, (user_id,))
        
        cursor.execute("""
            INSERT INTO user_settings (user_id, key, value) 
            VALUES (%s, 'email_notifications', 'false')
            ON CONFLICT (user_id, key) DO NOTHING;
        """, (user_id,))
        
        cursor.execute("""
            INSERT INTO user_settings (user_id, key, value) 
            VALUES (%s, 'task_reminders', 'true')
            ON CONFLICT (user_id, key) DO NOTHING;
        """, (user_id,))
        
        cursor.execute("""
            INSERT INTO user_settings (user_id, key, value) 
            VALUES (%s, 'timezone', 'Europe/Moscow')
            ON CONFLICT (user_id, key) DO NOTHING;
        """, (user_id,))
    
    if users_without_theme:
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {len(users_without_theme)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print("‚ÑπÔ∏è –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

def migration_20241220_120004_add_completed_at_field(cursor):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è completed_at –≤ —Ç–∞–±–ª–∏—Ü—É tasks"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ completed_at
    cursor.execute("""
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'tasks' AND column_name = 'completed_at';
    """)
    if not cursor.fetchone():
        cursor.execute("ALTER TABLE tasks ADD COLUMN completed_at TEXT;")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ completed_at –≤ tasks")
    else:
        print("‚ÑπÔ∏è –ü–æ–ª–µ completed_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def migration_20241220_120006_create_shopping_lists_table(cursor):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã shopping_lists –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã purchases"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
    print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É shopping_lists...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shopping_lists (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            project_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_user_id ON shopping_lists(user_id);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_shopping_lists_project_id ON shopping_lists(project_id);")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü shopping_list_id –≤ —Ç–∞–±–ª–∏—Ü–µ purchases
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'purchases' AND column_name = 'shopping_list_id';
    """)
    column_exists = cursor.fetchone()
    
    if not column_exists:
        print("üîó –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—É purchases...")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫
        cursor.execute("""
            ALTER TABLE purchases 
            ADD COLUMN shopping_list_id INTEGER,
            ADD COLUMN url TEXT,
            ADD COLUMN comment TEXT;
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
        cursor.execute("""
            ALTER TABLE purchases 
            ADD CONSTRAINT fk_purchases_shopping_list 
            FOREIGN KEY (shopping_list_id) REFERENCES shopping_lists(id) ON DELETE SET NULL;
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_purchases_shopping_list_id ON purchases(shopping_list_id);")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
    print("üìù –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    cursor.execute("""
        INSERT INTO shopping_lists (name, project_id, user_id, created_at)
        SELECT DISTINCT 
            '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫' as name,
            COALESCE(p.project_id, (
                SELECT id FROM projects 
                WHERE owner_id = p.user_id 
                ORDER BY created_at ASC 
                LIMIT 1
            )) as project_id,
            p.user_id,
            CURRENT_TIMESTAMP
        FROM purchases p
        WHERE NOT EXISTS (
            SELECT 1 FROM shopping_lists sl 
            WHERE sl.user_id = p.user_id
        )
        AND p.user_id IS NOT NULL;
    """)
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    cursor.execute("""
        UPDATE purchases 
        SET shopping_list_id = (
            SELECT sl.id 
            FROM shopping_lists sl 
            WHERE sl.user_id = purchases.user_id 
            AND sl.name = '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫'
            LIMIT 1
        )
        WHERE shopping_list_id IS NULL;
    """)
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ shopping_lists —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

# === –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===

MIGRATIONS = [
    ('20241220_120000', 'initial_schema', migration_20241220_120000_initial_schema),
    ('20241220_120001', 'add_extended_fields', migration_20241220_120001_add_extended_fields),
    ('20241220_120002', 'create_purchases_table', migration_20241220_120002_create_purchases_table),
    ('20241220_120003', 'default_user_settings', migration_20241220_120003_default_user_settings),
    ('20241220_120004', 'add_completed_at_field', migration_20241220_120004_add_completed_at_field),
    ('20241220_120006', 'create_shopping_lists_table', migration_20241220_120006_create_shopping_lists_table),
]

def run_migrations():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ NetAngels...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        with get_conn() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    ensure_migrations_table()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    executed = set(get_executed_migrations())
    print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(executed)}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    success_count = 0
    for version, name, migration_func in MIGRATIONS:
        if version not in executed:
            if execute_migration(version, name, migration_func):
                success_count += 1
            else:
                print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {version}")
                return False
        else:
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    total_pending = len([m for m in MIGRATIONS if m[0] not in executed])
    
    if total_pending == 0:
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    else:
        print(f"üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π!")
    
    return True

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
    
    try:
        executed = set(get_executed_migrations())
        print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(MIGRATIONS)}")
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(executed)}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(MIGRATIONS) - len(executed)}")
        
        print("\nüìã –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        for version, name, _ in MIGRATIONS:
            status = "‚úÖ" if version in executed else "‚ùå"
            print(f"   {status} {version}: {name}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python server_migrate.py migrate  - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("  python server_migrate.py status   - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "migrate":
        success = run_migrations()
        if success:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        sys.exit(0 if success else 1)
    elif command == "status":
        show_status()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()