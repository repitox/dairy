#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∫ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
"""

from db import get_conn
from datetime import datetime

def complete_db_migration():
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ë–î –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
    1. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è id, telegram_id –≤ users
    2. –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ
    3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    4. –°–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    """
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ë–î...")
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            try:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É users
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'id'
                """)
                has_id_column = cur.fetchone()
                
                if not has_id_column:
                    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ id –≤ —Ç–∞–±–ª–∏—Ü—É users...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                    cur.execute("ALTER TABLE users ADD COLUMN id SERIAL PRIMARY KEY")
                    cur.execute("ALTER TABLE users ADD COLUMN telegram_id BIGINT")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_id –≤ telegram_id
                    cur.execute("UPDATE users SET telegram_id = user_id")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    cur.execute("CREATE UNIQUE INDEX IF NOT EXISTS users_telegram_id_unique ON users(telegram_id)")
                    
                    conn.commit()
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ users –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É–∂–µ –∏–º–µ–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ telegram_id -> internal_id
                cur.execute("SELECT telegram_id, id FROM users")
                user_mapping = {row['telegram_id']: row['id'] for row in cur.fetchall()}
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(user_mapping)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º projects.owner_id (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
                cur.execute("SELECT id, owner_id FROM projects WHERE owner_id > 1000000")  # telegram_id –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                projects_to_update = cur.fetchall()
                
                for project in projects_to_update:
                    old_owner_id = project['owner_id']
                    if old_owner_id in user_mapping:
                        new_owner_id = user_mapping[old_owner_id]
                        cur.execute("UPDATE projects SET owner_id = %s WHERE id = %s", 
                                  (new_owner_id, project['id']))
                        print(f"  üìÅ –ü—Ä–æ–µ–∫—Ç {project['id']}: owner_id {old_owner_id} -> {new_owner_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º tasks.user_id
                cur.execute("SELECT id, user_id FROM tasks WHERE user_id > 1000000")
                tasks_to_update = cur.fetchall()
                
                for task in tasks_to_update:
                    old_user_id = task['user_id']
                    if old_user_id in user_mapping:
                        new_user_id = user_mapping[old_user_id]
                        cur.execute("UPDATE tasks SET user_id = %s WHERE id = %s", 
                                  (new_user_id, task['id']))
                        print(f"  üìã –ó–∞–¥–∞—á–∞ {task['id']}: user_id {old_user_id} -> {new_user_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º events.user_id
                cur.execute("SELECT id, user_id FROM events WHERE user_id > 1000000")
                events_to_update = cur.fetchall()
                
                for event in events_to_update:
                    old_user_id = event['user_id']
                    if old_user_id in user_mapping:
                        new_user_id = user_mapping[old_user_id]
                        cur.execute("UPDATE events SET user_id = %s WHERE id = %s", 
                                  (new_user_id, event['id']))
                        print(f"  üìÖ –°–æ–±—ã—Ç–∏–µ {event['id']}: user_id {old_user_id} -> {new_user_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...
                tables_to_update = [
                    'shopping', 'purchases', 'shopping_lists', 'notes', 
                    'user_settings', 'project_members'
                ]
                
                for table in tables_to_update:
                    try:
                        cur.execute(f"SELECT id, user_id FROM {table} WHERE user_id > 1000000 LIMIT 5")
                        records = cur.fetchall()
                        
                        if records:
                            for record in records:
                                old_user_id = record['user_id']
                                if old_user_id in user_mapping:
                                    new_user_id = user_mapping[old_user_id]
                                    cur.execute(f"UPDATE {table} SET user_id = %s WHERE id = %s", 
                                              (new_user_id, record['id']))
                            print(f"  üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: {len(records)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table}: {e}")
                
                conn.commit()
                print("‚úÖ –°–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
                # 3. –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                print("üìù –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã...")
                
                cur.execute("SELECT id, telegram_id, first_name FROM users")
                users = cur.fetchall()
                
                created_count = 0
                existing_count = 0
                
                for user in users:
                    internal_id = user['id']
                    telegram_id = user['telegram_id']
                    first_name = user['first_name']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
                    cur.execute("""
                        SELECT id FROM projects 
                        WHERE owner_id = %s AND name = '–õ–∏—á–Ω–æ–µ' AND active = TRUE
                    """, (internal_id,))
                    
                    if cur.fetchone():
                        existing_count += 1
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
                    cur.execute("""
                        INSERT INTO projects (name, owner_id, color, created_at, active)
                        VALUES ('–õ–∏—á–Ω–æ–µ', %s, '#6366f1', %s, TRUE)
                        RETURNING id;
                    """, (internal_id, datetime.utcnow().isoformat()))
                    
                    project_result = cur.fetchone()
                    personal_project_id = project_result['id']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ project_members
                    cur.execute("""
                        INSERT INTO project_members (project_id, user_id, joined_at)
                        VALUES (%s, %s, %s)
                        ON CONFLICT (project_id, user_id) DO NOTHING;
                    """, (personal_project_id, internal_id, datetime.utcnow().isoformat()))
                    
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è {first_name} (ID: {internal_id})")
                    created_count += 1
                
                conn.commit()
                
                print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –õ–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {created_count}")
                print(f"üìä –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {existing_count}")
                print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                conn.rollback()
                raise

if __name__ == "__main__":
    complete_db_migration()#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∫ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
"""

from db import get_conn
from datetime import datetime

def complete_db_migration():
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –ë–î –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
    1. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è id, telegram_id –≤ users
    2. –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ
    3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    4. –°–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    """
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ë–î...")
    
    with get_conn() as conn:
        with conn.cursor() as cur:
            try:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É users
                cur.execute("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'id'
                """)
                has_id_column = cur.fetchone()
                
                if not has_id_column:
                    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ id –≤ —Ç–∞–±–ª–∏—Ü—É users...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                    cur.execute("ALTER TABLE users ADD COLUMN id SERIAL PRIMARY KEY")
                    cur.execute("ALTER TABLE users ADD COLUMN telegram_id BIGINT")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_id –≤ telegram_id
                    cur.execute("UPDATE users SET telegram_id = user_id")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    cur.execute("CREATE UNIQUE INDEX IF NOT EXISTS users_telegram_id_unique ON users(telegram_id)")
                    
                    conn.commit()
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ users –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É–∂–µ –∏–º–µ–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ telegram_id -> internal_id
                cur.execute("SELECT telegram_id, id FROM users")
                user_mapping = {row['telegram_id']: row['id'] for row in cur.fetchall()}
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(user_mapping)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º projects.owner_id (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
                cur.execute("SELECT id, owner_id FROM projects WHERE owner_id > 1000000")  # telegram_id –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                projects_to_update = cur.fetchall()
                
                for project in projects_to_update:
                    old_owner_id = project['owner_id']
                    if old_owner_id in user_mapping:
                        new_owner_id = user_mapping[old_owner_id]
                        cur.execute("UPDATE projects SET owner_id = %s WHERE id = %s", 
                                  (new_owner_id, project['id']))
                        print(f"  üìÅ –ü—Ä–æ–µ–∫—Ç {project['id']}: owner_id {old_owner_id} -> {new_owner_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º tasks.user_id
                cur.execute("SELECT id, user_id FROM tasks WHERE user_id > 1000000")
                tasks_to_update = cur.fetchall()
                
                for task in tasks_to_update:
                    old_user_id = task['user_id']
                    if old_user_id in user_mapping:
                        new_user_id = user_mapping[old_user_id]
                        cur.execute("UPDATE tasks SET user_id = %s WHERE id = %s", 
                                  (new_user_id, task['id']))
                        print(f"  üìã –ó–∞–¥–∞—á–∞ {task['id']}: user_id {old_user_id} -> {new_user_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º events.user_id
                cur.execute("SELECT id, user_id FROM events WHERE user_id > 1000000")
                events_to_update = cur.fetchall()
                
                for event in events_to_update:
                    old_user_id = event['user_id']
                    if old_user_id in user_mapping:
                        new_user_id = user_mapping[old_user_id]
                        cur.execute("UPDATE events SET user_id = %s WHERE id = %s", 
                                  (new_user_id, event['id']))
                        print(f"  üìÖ –°–æ–±—ã—Ç–∏–µ {event['id']}: user_id {old_user_id} -> {new_user_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...
                tables_to_update = [
                    'shopping', 'purchases', 'shopping_lists', 'notes', 
                    'user_settings', 'project_members'
                ]
                
                for table in tables_to_update:
                    try:
                        cur.execute(f"SELECT id, user_id FROM {table} WHERE user_id > 1000000 LIMIT 5")
                        records = cur.fetchall()
                        
                        if records:
                            for record in records:
                                old_user_id = record['user_id']
                                if old_user_id in user_mapping:
                                    new_user_id = user_mapping[old_user_id]
                                    cur.execute(f"UPDATE {table} SET user_id = %s WHERE id = %s", 
                                              (new_user_id, record['id']))
                            print(f"  üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: {len(records)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table}: {e}")
                
                conn.commit()
                print("‚úÖ –°–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
                # 3. –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                print("üìù –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã...")
                
                cur.execute("SELECT id, telegram_id, first_name FROM users")
                users = cur.fetchall()
                
                created_count = 0
                existing_count = 0
                
                for user in users:
                    internal_id = user['id']
                    telegram_id = user['telegram_id']
                    first_name = user['first_name']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
                    cur.execute("""
                        SELECT id FROM projects 
                        WHERE owner_id = %s AND name = '–õ–∏—á–Ω–æ–µ' AND active = TRUE
                    """, (internal_id,))
                    
                    if cur.fetchone():
                        existing_count += 1
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
                    cur.execute("""
                        INSERT INTO projects (name, owner_id, color, created_at, active)
                        VALUES ('–õ–∏—á–Ω–æ–µ', %s, '#6366f1', %s, TRUE)
                        RETURNING id;
                    """, (internal_id, datetime.utcnow().isoformat()))
                    
                    project_result = cur.fetchone()
                    personal_project_id = project_result['id']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ project_members
                    cur.execute("""
                        INSERT INTO project_members (project_id, user_id, joined_at)
                        VALUES (%s, %s, %s)
                        ON CONFLICT (project_id, user_id) DO NOTHING;
                    """, (personal_project_id, internal_id, datetime.utcnow().isoformat()))
                    
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è {first_name} (ID: {internal_id})")
                    created_count += 1
                
                conn.commit()
                
                print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –õ–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {created_count}")
                print(f"üìä –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {existing_count}")
                print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                conn.rollback()
                raise

if __name__ == "__main__":
    complete_db_migration()