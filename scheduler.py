import json
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import requests
from db import get_today_tasks, get_today_events, get_recent_purchases, get_conn
import os
from datetime import datetime
from pytz import timezone

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

def send_daily_summary():
    print("‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT telegram_id FROM users WHERE telegram_id IS NOT NULL")
            users = cur.fetchall()
            print("üí¨ –í—Å–µ telegram_id –∏–∑ –ë–î:", users)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    for row in users:
        user_telegram_id = row["telegram_id"]
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
            tasks_data = get_today_tasks(user_telegram_id)
            print(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –¥–ª—è {user_telegram_id}: {tasks_data}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏
            all_tasks = []
            if isinstance(tasks_data, dict):
                overdue_tasks = tasks_data.get('overdue', [])
                today_tasks = tasks_data.get('today', [])
                all_tasks = overdue_tasks + today_tasks
            else:
                # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                all_tasks = tasks_data if isinstance(tasks_data, list) else []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            events = get_today_events(user_telegram_id)
            print(f"üîç –°–æ–±—ã—Ç–∏—è –¥–ª—è {user_telegram_id}: {events}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            shopping = get_recent_purchases(user_telegram_id)
            print(f"üîç –ü–æ–∫—É–ø–∫–∏ –¥–ª—è {user_telegram_id}: {shopping}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = format_summary_v2(all_tasks, events, shopping, user_telegram_id)
            send_message(user_telegram_id, message)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}: {e}")
            continue

def format_summary_v2(tasks, events, shopping, user_id):
    """
    –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from datetime import datetime
    from pytz import timezone
    
    lines = []
    tz = timezone("Europe/Moscow")
    now = datetime.now(tz)
    
    print(f"üîç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üìã –ó–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω–æ: {len(tasks) if tasks else 0}")
    print(f"üìÖ –°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–æ: {len(events) if events else 0}")
    print(f"üõí –ü–æ–∫—É–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ: {len(shopping) if shopping else 0}")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–¥–∫–∏
    lines.append(f"üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>")
    lines.append(f"üìÖ –°–µ–≥–æ–¥–Ω—è {now.strftime('%d.%m.%Y')}")
    lines.append("")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    if tasks:
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ
        overdue = []
        today = []
        
        for task in tasks:
            if not task:
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(task, 'keys'):
                task_dict = dict(task)
            else:
                task_dict = task
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
            is_completed = task_dict.get('completed', False) or task_dict.get('is_done', False)
            if is_completed:
                continue
                
            due_date_str = task_dict.get('due_date')
            if not due_date_str:
                continue
                
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                if 'T' in due_date_str:
                    if due_date_str.endswith('Z'):
                        due_dt = datetime.fromisoformat(due_date_str[:-1]).replace(tzinfo=tz)
                    else:
                        due_dt = datetime.fromisoformat(due_date_str).astimezone(tz)
                else:
                    due_dt = datetime.strptime(due_date_str, '%Y-%m-%d').replace(tzinfo=tz)
                
                if due_dt.date() < now.date():
                    overdue.append(task_dict)
                elif due_dt.date() == now.date():
                    today.append(task_dict)
                    
            except (ValueError, TypeError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {due_date_str}: {e}")
                continue
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if overdue:
            lines.append("‚è∞ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>:")
            for task in sorted(overdue, key=lambda x: x.get('priority') == '–≤–∞–∂–Ω–∞—è', reverse=True):
                title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                priority_icon = "‚ùóÔ∏è" if task.get('priority') == '–≤–∞–∂–Ω–∞—è' else "‚ñ™Ô∏è"
                project_name = task.get('project_name', '')
                project_info = f" ({project_name})" if project_name else " (–õ–∏—á–Ω–æ–µ)"
                lines.append(f"{priority_icon} {title}{project_info}")
            lines.append("")
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if today:
            lines.append("üìå <b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>:")
            for task in sorted(today, key=lambda x: x.get('priority') == '–≤–∞–∂–Ω–∞—è', reverse=True):
                title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                priority_icon = "‚ùóÔ∏è" if task.get('priority') == '–≤–∞–∂–Ω–∞—è' else "‚ñ™Ô∏è"
                project_name = task.get('project_name', '')
                project_info = f" ({project_name})" if project_name else " (–õ–∏—á–Ω–æ–µ)"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
                due_date_str = task.get('due_date', '')
                time_info = ""
                if len(due_date_str) > 10 and 'T' in due_date_str:
                    try:
                        time_part = due_date_str.split('T')[1][:5]  # HH:MM
                        time_info = f" –≤ {time_part}"
                    except:
                        pass
                
                lines.append(f"{priority_icon} {title}{time_info}{project_info}")
            lines.append("")
        
        if not overdue and not today:
            lines.append("üìå <b>–ó–∞–¥–∞—á–∏</b>: –ó–∞–¥–∞—á –Ω–µ—Ç! üéâ")
            lines.append("")
    else:
        lines.append("üìå <b>–ó–∞–¥–∞—á–∏</b>: –ó–∞–¥–∞—á –Ω–µ—Ç! üéâ")
        lines.append("")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    if events:
        lines.append("üìÖ <b>–í—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>:")
        for event in events:
            if not event:
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(event, 'keys'):
                event_dict = dict(event)
            else:
                event_dict = event
            
            title = event_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            location = event_dict.get('location', '')
            project_name = event_dict.get('project_name', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            start_at_str = event_dict.get('start_at', '')
            time_info = ""
            if start_at_str:
                try:
                    if 'T' in start_at_str:
                        time_part = start_at_str.split('T')[1][:5]  # HH:MM
                        time_info = f" –≤ {time_part}"
                except:
                    pass
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
            location_info = f", {location}" if location else ""
            project_info = f" ({project_name})" if project_name else " (–õ–∏—á–Ω–æ–µ)"
            
            lines.append(f"üïò {title}{time_info}{location_info}{project_info}")
        lines.append("")
    else:
        lines.append("üìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>: –°–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç")
        lines.append("")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏
    if shopping:
        lines.append("üõí <b>–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å</b>:")
        for item in shopping:
            if not item:
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(item, 'keys'):
                item_dict = dict(item)
            else:
                item_dict = item
            
            title = item_dict.get('item', item_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
            quantity = item_dict.get('quantity', '')
            
            quantity_info = f"{quantity} √ó " if quantity else ""
            lines.append(f"‚ñ™Ô∏è {quantity_info}{title}")
        lines.append("")
    else:
        lines.append("üõí <b>–ü–æ–∫—É–ø–∫–∏</b>: –í—Å—ë –∫—É–ø–ª–µ–Ω–æ! ‚úÖ")
        lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines.append("üí™ –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!")
    
    result = "\n".join(lines)
    print(f"üì® –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}:")
    print(result)
    print("=" * 50)
    
    return result

# def format_summary(tasks, events, shopping):
#     lines = ["üìå <b>–ó–∞–¥–∞—á–∏</b>:"]
#     lines += [f"- [ ] {t.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({t.get('due_date', '–Ω–µ—Ç –¥–∞—Ç—ã')})" for t in tasks] or ["–ù–µ—Ç –∑–∞–¥–∞—á"]

#     lines += ["", "üìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>:"]
#     lines += [f"- {e.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {e.get('start_at', '')[11:16]}" for e in events] or ["–ù–µ—Ç –≤—Å—Ç—Ä–µ—á"]

#     lines += ["", "üõí <b>–ü–æ–∫—É–ø–∫–∏</b>:"]
#     lines += [f"- {s.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for s in shopping] or ["–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"]

#     return "\n".join(lines)

def format_summary(tasks, events, shopping):
    lines = []

    tz = timezone("Europe/Moscow")
    now = datetime.now(tz)
    today_str = now.strftime("%Y-%m-%d")

    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–¥–∞—á
    overdue = []
    today = []
    for t in tasks:
        if t.get("is_done"):
            continue
        due = t.get("due_date")
        if not due:
            continue
        due_dt = datetime.fromisoformat(due).astimezone(tz) if len(due) > 10 else datetime.fromisoformat(due + "T00:00:00").astimezone(tz)
        if due_dt.date() < now.date():
            overdue.append(t)
        elif due_dt.date() == now.date():
            today.append(t)

    today_ids = {t.get("id") for t in today}
    filtered_overdue = [t for t in overdue if t.get("id") not in today_ids]

    if filtered_overdue:
        lines.append("\n‚è∞ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>:")
        for t in sorted(filtered_overdue, key=lambda x: x.get("priority") != "–≤–∞–∂–Ω–∞—è"):
            title = t.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            time = t.get("due_date", "")
            prio = "‚ùóÔ∏è" if t.get("priority") == "–≤–∞–∂–Ω–∞—è" else "‚ñ™Ô∏è"
            project = f"({t.get('project_title')})" if t.get("project_title") else "(–õ–∏—á–Ω–æ–µ)"
            time_str = time[11:16] if len(time) >= 16 else "–±–µ–∑ —Å—Ä–æ–∫–∞"
            # lines.append(f"{prio} {title} ‚Äî {time_str} {project}")
            lines.append(f"{prio} {title}")

    if today:
        lines.append("\nüìå <b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>:")
        for t in sorted(today, key=lambda x: x.get("priority") != "–≤–∞–∂–Ω–∞—è"):
            title = t.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            time = t.get("due_date", "")
            prio = "‚ùóÔ∏è" if t.get("priority") == "–≤–∞–∂–Ω–∞—è" else "‚ñ™Ô∏è"
            project = f"({t.get('project_title')})" if t.get("project_title") else "(–õ–∏—á–Ω–æ–µ)"
            suffix = f"{time[11:16]}" if len(time) >= 16 else "–±–µ–∑ —Å—Ä–æ–∫–∞"
            # lines.append(f"{prio} {title} ‚Äî {suffix} {project}")
            lines.append(f"{prio} {title}")
    if not filtered_overdue and not today:
        lines.append("üìå <b>–ó–∞–¥–∞—á–∏</b>: –ó–∞–¥–∞—á –Ω–µ—Ç üéâ")

    # === –°–û–ë–´–¢–ò–Ø ===
    if events:
        lines.append("\nüìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>:")
        for e in events:
            title = e.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            time = e.get("start_at", "")
            loc = e.get("location", "")
            project = f"({e.get('project_title')})" if e.get("project_title") else "(–õ–∏—á–Ω–æ–µ)"
            time_str = time[11:16] if len(time) >= 16 else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            lines.append(f"üïò {title} ‚Äî {time_str} {loc} {project}")
            
    else:
        lines.append("\nüìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>: –°–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç")

    # === –ü–û–ö–£–ü–ö–ò ===
    if shopping:
        lines.append("\nüõí <b>–ü–æ–∫—É–ø–∫–∏</b>:")
        for s in shopping:
            title = s.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            count = s.get("quantity")
            done = s.get("is_done", False)
            check = "‚úÖ" if done else "‚ùå"
            prefix = f"{count} √ó " if count else ""
            lines.append(f"{check} {prefix}{title}")
    else:
        lines.append("\nüõí <b>–ü–æ–∫—É–ø–∫–∏</b>: –í—Å—ë –∫—É–ø–ª–µ–Ω–æ!")

    return "\n".join(lines)

def send_message(user_id, text):
    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è {user_id}")
    try:
        response = requests.post(API_URL, data={"chat_id": user_id, "text": text, "parse_mode": "HTML"})
        print(f"‚û°Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def test_daily_summary():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    """
    print("üß™ –¢–ï–°–¢–û–í–ê–Ø —Ä–∞—Å—Å—ã–ª–∫–∞...")
    send_daily_summary()

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def start_scheduler():
    print("üåÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(send_daily_summary, "cron", hour=9, minute=1)
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")