from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import requests
from db import get_today_tasks, get_today_events, get_recent_purchases, get_conn
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

def send_daily_summary():
    print("‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT user_id FROM users")
            users = cur.fetchall()
            print("üí¨ –í—Å–µ user_id –∏–∑ –ë–î:", users)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    for row in users:
        user_id = row["user_id"]
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

        tasks = get_today_tasks(user_id)
        events = get_today_events(user_id)
        shopping = get_recent_purchases(user_id)

        message = format_summary(tasks, events, shopping)
        send_message(user_id, message)

def format_summary(tasks, events, shopping):
    lines = ["üìå <b>–ó–∞–¥–∞—á–∏</b>:"]
    lines += [f"- [ ] {t['title']} ({t['due_date']})" for t in tasks] or ["–ù–µ—Ç –∑–∞–¥–∞—á"]

    lines += ["", "üìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>:"]
    lines += [f"- {e['title']} ‚Äî {e['start_at'][11:16]}" for e in events] or ["–ù–µ—Ç –≤—Å—Ç—Ä–µ—á"]

    lines += ["", "üõí <b>–ü–æ–∫—É–ø–∫–∏</b>:"]
    lines += [f"- {s['title']}" for s in shopping] or ["–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"]

    return "\n".join(lines)

def send_message(user_id, text):
    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è {user_id}")
    response = requests.post(API_URL, data={"chat_id": user_id, "text": text, "parse_mode": "HTML"})
    print(f"‚û°Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}, —Ç–µ–∫—Å—Ç: {response.text}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def start_scheduler():
    print("üåÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(send_daily_summary, "interval", minutes=1)
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")