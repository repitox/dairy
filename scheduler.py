import json
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import requests
from db import get_today_tasks, get_today_events, get_recent_purchases, get_conn
import os
from datetime import datetime
from pytz import timezone

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

def send_daily_summary():
    print("‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT user_id FROM users")
            users = cur.fetchall()
            print("üí¨ –í—Å–µ user_id –∏–∑ –ë–î:", users)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    for row in users:
        user_id = row["user_id"]
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

        tasks_by_group = get_today_tasks(user_id)
        tasks_raw = []
        for group in tasks_by_group.values():
            tasks_raw.extend(group)
        def safe_parse(data):
            if isinstance(data, dict):
                return data
            if hasattr(data, 'keys'):  # –Ω–∞–ø—Ä–∏–º–µ—Ä, RealDictRow
                return dict(data)
            try:
                return json.loads(data) if isinstance(data, str) and data else data
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {data}")
                return None
        tasks = [safe_parse(t) for t in tasks_raw if safe_parse(t)]

        events_raw = get_today_events(user_id)
        events = [safe_parse(e) for e in events_raw if safe_parse(e)]

        shopping_raw = get_recent_purchases(user_id)
        shopping = [safe_parse(s) for s in shopping_raw if safe_parse(s)]

        message = format_summary(tasks, events, shopping)
        send_message(user_id, message)

# def format_summary(tasks, events, shopping):
#     lines = ["üìå <b>–ó–∞–¥–∞—á–∏</b>:"]
#     lines += [f"- [ ] {t.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({t.get('due_date', '–Ω–µ—Ç –¥–∞—Ç—ã')})" for t in tasks] or ["–ù–µ—Ç –∑–∞–¥–∞—á"]

#     lines += ["", "üìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>:"]
#     lines += [f"- {e.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {e.get('start_at', '')[11:16]}" for e in events] or ["–ù–µ—Ç –≤—Å—Ç—Ä–µ—á"]

#     lines += ["", "üõí <b>–ü–æ–∫—É–ø–∫–∏</b>:"]
#     lines += [f"- {s.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for s in shopping] or ["–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"]

#     return "\n".join(lines)

def format_summary(tasks, events, shopping):
    lines = []

    tz = timezone("Europe/Moscow")
    now = datetime.now(tz)
    today_str = now.strftime("%Y-%m-%d")

    overdue = [t for t in tasks if not t.get("is_done") and t.get("overdue")]
    today = [t for t in tasks if not t.get("is_done") and (t.get("due_date") or "").startswith(today_str)]

    today_ids = {t.get("id") for t in today}
    filtered_overdue = [t for t in overdue if t.get("id") not in today_ids]

    if filtered_overdue:
        lines.append("\n‚è∞ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>:")
        for t in filtered_overdue:
            title = t.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            time = t.get("due_date", "")
            prio = "‚ÄºÔ∏è" if t.get("priority") == "–≤–∞–∂–Ω–∞—è" else "‚Ä¢"
            project = f"({t.get('project_title')})" if t.get("project_title") else ""
            time_str = time[11:16] if len(time) >= 16 else "–±–µ–∑ —Å—Ä–æ–∫–∞"
            lines.append(f"{prio} [ ] {title} ‚Äî {time_str} {project}")

    if today:
        lines.append("\nüìå <b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>:")
        for t in today:
            title = t.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            time = t.get("due_date", "")
            prio = "‚ÄºÔ∏è" if t.get("priority") == "–≤–∞–∂–Ω–∞—è" else "‚Ä¢"
            project = f"({t.get('project_title')})" if t.get("project_title") else ""
            suffix = f"{time[11:16]}" if len(time) >= 16 else "–±–µ–∑ —Å—Ä–æ–∫–∞"
            lines.append(f"{prio} [ ] {title} ‚Äî {suffix} {project}")
    if not filtered_overdue and not today:
        lines.append("üìå <b>–ó–∞–¥–∞—á–∏</b>: –ó–∞–¥–∞—á –Ω–µ—Ç üéâ")

    # === –°–û–ë–´–¢–ò–Ø ===
    if events:
        lines.append("\nüìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>:")
        for e in events:
            title = e.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            time = e.get("start_at", "")
            loc = e.get("location", "")
            project = f"({e.get('project_title')})" if e.get("project_title") else ""
            time_str = time[11:16] if len(time) >= 16 else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            lines.append(f"üïò {title} ‚Äî {time_str} {loc} {project}")
    else:
        lines.append("\nüìÖ <b>–í—Å—Ç—Ä–µ—á–∏</b>: –°–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç")

    # === –ü–û–ö–£–ü–ö–ò ===
    if shopping:
        lines.append("\nüõí <b>–ü–æ–∫—É–ø–∫–∏</b>:")
        for s in shopping:
            title = s.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            count = s.get("quantity")
            done = s.get("is_done", False)
            check = "‚úÖ" if done else "‚ùå"
            prefix = f"{count} √ó " if count else ""
            lines.append(f"{check} {prefix}{title}")
    else:
        lines.append("\nüõí <b>–ü–æ–∫—É–ø–∫–∏</b>: –í—Å—ë –∫—É–ø–ª–µ–Ω–æ!")

    return "\n".join(lines)

def send_message(user_id, text):
    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è {user_id}")
    response = requests.post(API_URL, data={"chat_id": user_id, "text": text, "parse_mode": "HTML"})
    print(f"‚û°Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}, —Ç–µ–∫—Å—Ç: {response.text}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def start_scheduler():
    print("üåÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(send_daily_summary, "cron", hour=11, minute=31)
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")